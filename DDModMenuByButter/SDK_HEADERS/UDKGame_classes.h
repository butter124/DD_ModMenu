/*
#############################################################################################
# Dungeon Defender (v8.7.2) SDK
# Generated with TheFeckless UE3 SDK Generator v8.7.2
# ========================================================================================= #
# File: UDKGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_MAX_BUFF_SLOTS                                     3
#define CONST_MAX_BUFF_TIERS                                     6
#define CONST_MAX_LEVELUP_STATS                                  11
#define CONST_MAX_DAMAGEREDUCTIONS                               4
#define CONST_MAX_CORES                                          40
#define CONST_MAX_TUTORIAL_SETS                                  10
#define CONST_MAX_ACHIEVEMENTS_TO_STORE                          500
#define CONST_ANTI_CHEAT_INTERVAL                                10
#define CONST_SPEED_HACK_DETECTION_THRESHOLD                     3
#define CONST_SPEED_HACK_TOLERANCE                               1.20
#define CONST_DD_SIGNED_BYTE_MAX                                 128.0
#define CONST_EXP_PER_LEVEL_LINEAR_FACTOR                        80.0
#define CONST_EXP_PER_LEVEL_EXPONENT_FACTOR                      2.5
#define CONST_EXP_PER_LEVEL_LINEAR_FACTOR_HIGH                   800000
#define CONST_EXP_PER_LEVEL_EXPONENT_FACTOR_HIGH                 2.1
#define CONST_EXP_PER_LEVEL_LINEAR_FACTOR_DOUBLEHIGH             900000
#define CONST_EXP_PER_LEVEL_EXPONENT_FACTOR_DOUBLEHIGH           2.2
#define CONST_MANAPOWER_PER_LEVEL_LINEAR_FACTOR                  20.0
#define CONST_LEVELUPTIME_PER_LEVEL_LINEAR_FACTOR                6.0
#define CONST_LEVELUPTIME_PER_LEVEL_EXPONENT_FACTOR              0.35
#define CONST_MAX_STAT_VALUE                                     1000
#define CONST_MAX_STAT_VALUE_SPEED                               100
#define CONST_MAX_STAT_VALUE_SPEED_HERO                          100
#define CONST_MAX_HERO_EXPERIENCE                                3000000000
#define CONST_HERO_LEVEL_CAP                                     100
#define CONST_HERO_LEVEL_CAP_DEMO                                10
#define CONST_MAX_EQUIPMENT_SLOTS                                5
#define CONST_MAX_FOLDER_DEPTH                                   5
#define CONST_NUM_EQUIPMENT_TYPES                                5
#define CONST_NEGATIVE_EQUIPMENT_STAT_WEIGHT                     1.4
#define CONST_MAX_EQUIPMENT_STORED_MANA                          9999999999
#define CONST_DD_SIGNED_BYTE_MIN                                 -127.0
#define CONST_MAX_SUBFOLDERS                                     6
#define CONST_MAX_SHOP_EQUIPMENT_SET_AMOUNTS                     3
#define CONST_MAX_SHOP_EQUIPMENT_SETS                            3
#define CONST_MAX_BANKED_MANA_DEMO                               5000
#define CONST_MAX_BANKED_MANA                                    600000000
#define CONST_MAX_LOADED_HEROES                                  40
#define CONST_MAX_ITEM_BOX_EQUIPMENT                             320
#define CONST_MAX_ITEM_BOX_EQUIPMENT_ULTIMATE                    600
#define CONST_MAX_ITEM_BOX_EQUIPMENT_ETERNAL                     800
#define CONST_LEVEL_FILE_EXTENSION                               ".udk"
#define CONST_NUM_EQUIPMENT_TYPES01                              6
#define CONST_MAX_HERO_NAME_LENGTH                               32
#define CONST_GS_USERNAME_MAXLENGTH                              15
#define CONST_GS_PASSWORD_MAXLENGTH                              30
#define CONST_GS_MESSAGE_MAXLENGTH                               255
#define CONST_GS_EMAIL_MAXLENGTH                                 50
#define CONST_GS_CDKEY_PART_MAXLENGTH                            4
#define CONST_CONTEXT_GAME_MODE                                  0x0000800B
#define CONST_CONTEXT_GAME_MODE_COOP                             0
#define CONST_QUERY_COOP                                         1
#define CONST_QUERY_FILTERED                                     2
#define CONST_FILTER_LEVEL_START                                 0x1000002E
#define CONST_FILTER_DIFF_START                                  0x10000056
#define CONST_FILTER_BUILD                                       0x1000005B
#define CONST_FILTER_SURVIVAL                                    0x1000005C
#define CONST_FILTER_CHALLENGE                                   0x1000005D
#define CONST_FILTER_HEROLEVELSTART                              0x1000005F
#define CONST_FILTER_HEROLEVELEND                                0x10000061
#define CONST_FILTER_HEROCLASS                                   0x10000060
#define CONST_FILTER_LEVELINDEX                                  0x10000062
#define CONST_FILTER_SESSIONID_START                             0x10000064
#define CONST_FILTER_SESSIONID_COUNT                             10
#define CONST_FILTER_STRATEGY                                    0x10000070
#define CONST_FILTER_DEMOMODE                                    0x10000074
#define CONST_FILTER_VERSIONNUMBER                               0x10000075
#define CONST_FILTER_MATCHCOMPLETE                               0x10000077
#define CONST_CONTEXT_ACTIVE_MISSION                             1
#define CONST_PRESENCE_MAIN_MENU                                 0
#define CONST_PRESENCE_LOBBY                                     1
#define CONST_PRESENCE_MISSION                                   2
#define CONST_PRESENCE_SPECIAL_MISSION                           3
#define CONST_PRESENCE_INACTIVE                                  4
#define CONST_PROPS_LEVEL_INDEX                                  0x1000000D
#define CONST_PROPS_INFINITE_WAVES                               0x1000000E
#define CONST_PROPS_START_AT_WAVE                                0x1000000F
#define CONST_PROPS_GAME_DIFFICULTY                              0x10000010
#define CONST_PROPS_INFINITE_BUILD_TIME                          0x10000011
#define CONST_PROPS_LEVEL_TAG                                    0x10000012
#define CONST_PROPS_FRIENDLY_NAME                                0x10000013
#define CONST_PROPS_DIFFICULTY                                   0x10000014
#define CONST_PROPS_ISCHALLENGE                                  0x1000005A
#define CONST_PROPS_HOSTHEROCLASS                                0x1000005E
#define CONST_PROPS_HOSTHEROLEVEL                                0x1000002A
#define CONST_PROPS_UNIQUE_SESSIONID                             0x10000063
#define CONST_PROPS_PURE_STRATEGY                                0x1000006F
#define CONST_PROPS_PHASE_TYPE                                   0x10000071
#define CONST_PROPS_DEMOMODE                                     0x10000072
#define CONST_PROPS_VERSIONNUMBER                                0x10000073
#define CONST_PROPS_MATCHCOMPLETE                                0x10000076
#define CONST_PROPS_HERONAME                                     0x20000016
#define CONST_PROPS_HEROCLASS                                    0x20000020
#define CONST_PROPS_HEROLEVEL                                    0x1000002A
#define CONST_PROPS_SCORE                                        0x2000002B
#define CONST_PROPS_COMPLETIONTIME                               0x1000002C
#define CONST_PROPS_WAVECOUNT                                    0x1000002D
#define CONST_STATS_VIEW_COLUMN_NAME                             1
#define CONST_STATS_VIEW_COLUMN_CLASS                            2
#define CONST_STATS_VIEW_COLUMN_LEVEL                            3
#define CONST_STATS_VIEW_COLUMN_SCORE                            4
#define CONST_STATS_VIEW_COLUMN_TIME                             5
#define CONST_STATS_VIEW_COLUMN_WAVE                             6
#define CONST_MAX_STARTING_WAVE                                  8
#define CONST_MAX_BEST_STARTING_WAVE                             32
#define CONST_MAX_ALLOWED_PLAYERS                                4
#define CONST_MAX_PROJECTILE_ARRAY_SIZE                          250
#define CONST_EQUIPMENT_QUALITY_MAX                              20
#define CONST_WYVERN_EXPENSIVE_FUNCTION                          0
#define CONST_TOKEN_EXPENSIVE_FUNCTION                           1
#define CONST_LIGHTING_EXPENSIVE_FUNCTION                        2
#define CONST_FAMILIARTARGET_EXPENSIVE_FUNCTIONS                 3
#define CONST_AUTOAIM_EXPENSIVE_FUNCTIONS                        4
#define CONST_MAX_EXPENSIVE_FUNCTIONS                            5
#define CONST_WAVE_COMPLETION_SCORE_MULTIPLIER                   13.0
#define CONST_WAVE_COMPLETION_SCORE_EXPONENT                     1.28
#define CONST_WAVE_COMPLETION_SCORE_TIMEBONUS_MULTIPLIER         8.0
#define CONST_WAVE_COMPLETION_SCORE_TIMEBONUS_EXPONENT           2.15
#define CONST_WAVE_COMPLETION_SCORE_TIMEBONUS_DIVISOR            2.0
#define CONST_WAVE_COMPLETION_SCORE_TIMEBONUS_INTERVAL_SECONDS   180.0
#define CONST_WAVE_COMPLETION_SCORE_TIMEBONUS_LEVELMULTIPLIER_EXPONENT 1.33
#define CONST_MAX_WAVE_POINT_NUMBER                              12
#define CONST_MAX_TEAMS                                          4
#define CONST_DEFAULT_MAX_GROUPS                                 15
#define CONST_UnrealUnitToDisplayUnit                            0.01
#define CONST_PAWN_MEGA_DAMAGE                                   100000000
#define CONST_PAWN_COLLECTIONGROUP                               4
#define CONST_ENEMY_MAX_HEALTH                                   2000000000
#define CONST_MT_COLLECTIONGROUP                                 128
#define CONST_ENEMY_COLLECTIONGROUP                              8
#define CONST_DT_COLLECTIONGROUP                                 2
#define CONST_DI_COLLECTIONGROUP                                 512
#define CONST_PLAYERTARGETABLE_COLLECTIONGROUP                   8192
#define CONST_MAX_FILTER_SIZE                                    240
#define CONST_DROPPED_EQUIPMENT_COLLECTIONGROUP                  16
#define CONST_DEFAULT_NUM_DECIMALPLACES                          2
#define CONST_PLAYER_COLLECTIONGROUP                             256
#define CONST_ACTIVATABLE_COLLECTIONGROUP                        1024
#define CONST_COLLECTIONGROUP                                    32
#define CONST_TRAP_COLLECTIONGROUP                               64
#define CONST_CHEST_DROP_MULTIPLIER                              7
#define CONST_NUM_CURSOR_PARTICLES                               72
#define CONST_PC_MUSIC_MULTIPLIER                                0.7
#define CONST_PS3_MUSIC_MULTIPLIER                               1.40
#define CONST_XBOX_MUSIC_MULTIPLIER                              0.7
#define CONST_PS3_MOVIE_MULTIPLIER                               0.4
#define CONST_XBOX_MOVIE_MULTIPLIER                              0.9
#define CONST_PC_MOVIE_MULTIPLIER                                1.44
#define CONST_MAX_WAVE_DISPLAY_ENTRIES                           15
#define CONST_PLAYERSHOP_MAX_ITEM_SELL_AMOUNT                    2000000000
#define CONST_MAX_PLAYERSHOP_MANA                                2000000000
#define CONST_MAX_PLAYERSHOP_ITEMS                               250
#define CONST_MAX_PLAYERSHOP_MANA_DIGIT                          0
#define CONST_MAX_PLAYERSHOP_MANA_INT                            1000
#define CONST_MAX_TRADING_EQUIPMENTS                             48
#define CONST_MAX_DROP_MANA                                      100000
#define CONST_REQUIRED_WAVES_AFTER_START_TO_INVEST               1
#define CONST_NUM_SHIFT_ITERATIONS                               10
#define CONST_NUM_CTRL_ITERATIONS                                50
#define CONST_ITEMBOX_DATA_SET                                   8
#define CONST_PURCHASE_MANA_AMOUNT                               200000
#define CONST_MAX_TRADE_MANA                                     600000000
#define CONST_EQUIPMENT_CURSED                                   0
#define CONST_EQUIPMENT_TORN                                     1
#define CONST_EQUIPMENT_WORN                                     2
#define CONST_EQUIPMENT_STOCKY                                   3
#define CONST_EQUIPMENT_SOLID                                    4
#define CONST_EQUIPMENT_STURDY                                   5
#define CONST_EQUIPMENT_POLISHED                                 6
#define CONST_EQUIPMENT_SHINING                                  7
#define CONST_EQUIPMENT_POWERFUL                                 8
#define CONST_EQUIPMENT_AMAZING                                  9
#define CONST_EQUIPMENT_EPIC                                     10
#define CONST_EQUIPMENT_LEGENDARY                                11
#define CONST_EQUIPMENT_GODLY                                    12
#define CONST_EQUIPMENT_MYTHICAL                                 13
#define CONST_EQUIPMENT_TRANSCENDENT                             14
#define CONST_EQUIPMENT_SUPREME                                  15
#define CONST_EQUIPMENT_ULTIMATE                                 16
#define CONST_EQUIPMENT_ULTIMATE93                               17
#define CONST_EQUIPMENT_ULTIMATE_PLUS                            18
#define CONST_EQUIPMENT_ULTIMATE_PLUS_PLUS                       19

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum UDKGame._DataTypes.EPawnBoostType
/*enum EPawnBoostType
{
	EPB_RESISTANCE                                     = 0,
	EPB_DAMAGE                                         = 1,
	EPB_ATTACKRATE                                     = 2,
	EPB_ATTACKRANGE                                    = 3,
	EPB_MOVEMENTSPEED                                  = 4,
	EPB_ANIMSPEED                                      = 5,
	EPB_ATK_ANIMSPEED                                  = 6,
	EPB_GRAVITY                                        = 7,
	EPB_MAX                                            = 8
};*/

// Enum UDKGame._DataTypes.ETowerBoostType
/*enum ETowerBoostType
{
	ETB_RESISTANCE                                     = 0,
	ETB_DAMAGE                                         = 1,
	ETB_ATTACKRATE                                     = 2,
	ETB_ATTACKRANGE                                    = 3,
	ETB_MAX                                            = 4
};*/

// Enum UDKGame._DataTypes.LevelUpValueType
/*enum LevelUpValueType
{
	LU_NONE                                            = 0,
	LU_HEALTH                                          = 1,
	LU_SPEED                                           = 2,
	LU_DAMAGE                                          = 3,
	LU_CASTINGRATE                                     = 4,
	LU_HEROABILITYONE                                  = 5,
	LU_HEROABILITYTWO                                  = 6,
	LU_DEFENSEHEALTH                                   = 7,
	LU_DEFENSEATTACKRATE                               = 8,
	LU_DEFENSEBASEDAMAGE                               = 9,
	LU_DEFENSEAOE                                      = 10,
	LU_WEAPONBASEDAMAGE                                = 11,
	LU_WEAPONALTDAMAGE                                 = 12,
	LU_WEAPONELEMENTALDAMAGE                           = 13,
	LU_DAMAGEVULNERABILITY                             = 14,
	LU_ATTACKSPEED                                     = 15,
	LU_TENACITY                                        = 16,
	LU_MAX                                             = 17
};*/

// Enum UDKGame._DataTypes.EAccessoryType
/*enum EAccessoryType
{
	EAT_None                                           = 0,
	EAT_BRACERS                                        = 1,
	EAT_HAT                                            = 2,
	EAT_MASK                                           = 3,
	EAT_SHIELD                                         = 4,
	EAT_MAX                                            = 5
};*/

// Enum UDKGame._DataTypes.eComparisonType
/*enum eComparisonType
{
	CRT_None                                           = 0,
	CRT_Equals                                         = 1,
	CRT_LessThan                                       = 2,
	CRT_GreaterThan                                    = 3,
	CRT_MAX                                            = 4
};*/

// Enum UDKGame._DataTypes.EStatusEffect
/*enum EStatusEffect
{
	SE_NONE                                            = 0,
	SE_FROZEN                                          = 1,
	SE_STUNNED                                         = 2,
	SE_OILED                                           = 3,
	SE_FIRE                                            = 4,
	SE_POISONED                                        = 5,
	SE_SHOCKED                                         = 6,
	SE_WEBBED                                          = 7,
	SE_MAX                                             = 8
};*/

// Enum UDKGame._DataTypes.EElementTrait
/*enum EElementTrait
{
	ET_NONE                                            = 0,
	ET_EARTH                                           = 1,
	ET_FIRE                                            = 2,
	ET_WATER                                           = 3,
	ET_LIGHTNING                                       = 4,
	ET_ICE                                             = 5,
	ET_OIL                                             = 6,
	ET_POISON                                          = 7,
	ET_MAGIC                                           = 8,
	ET_DARK                                            = 9,
	ET_HOLY                                            = 10,
	ET_MAX                                             = 11
};*/

// Enum UDKGame._DataTypes.EBuffSpawnEvent
/*enum EBuffSpawnEvent
{
	BSE_Spawned                                        = 0,
	BSE_ProjectileExploded                             = 1,
	BSE_InstigatorAttacked                             = 2,
	BSE_AbilityUsed                                    = 3,
	BSE_Death                                          = 4,
	BSE_TakeDamage                                     = 5,
	BSE_DealtDamage                                    = 6,
	BSE_AbilityCompleted                               = 7,
	BSE_FireProjectile                                 = 8,
	BSE_AbilityProc                                    = 9,
	BSE_BuffEnd                                        = 10,
	BSE_Healed                                         = 11,
	BSE_KilledActor                                    = 12,
	BSE_Jumped                                         = 13,
	BSE_HealedTarget                                   = 14,
	BSE_MAX                                            = 15
};*/

// Enum UDKGame._DataTypes.ESortingFilter
/*enum ESortingFilter
{
	SF_OFF                                             = 0,
	SF_TYPE                                            = 1,
	SF_QUALITY                                         = 2,
	SF_TYPE_AND_QUAL                                   = 3,
	SF_RATING                                          = 4,
	SF_MANA                                            = 5,
	SF_NAME                                            = 6,
	SF_LEVELS                                          = 7,
	SF_SIZE                                            = 8,
	SF_MAX                                             = 9
};*/

// Enum UDKGame._DataTypes.EGraphicsQuality
/*enum EGraphicsQuality
{
	GQ_ULTRA                                           = 0,
	GQ_HIGH                                            = 1,
	GQ_MEDIUM                                          = 2,
	GQ_LOW                                             = 3,
	GQ_ULTRALOW                                        = 4,
	GQ_MAX                                             = 5
};*/

// Enum UDKGame._DataTypes.EWeaponType
/*enum EWeaponType
{
	EWT_WEAPON_ANYONE                                  = 0,
	EWT_WEAPON_APPRENTICE                              = 1,
	EWT_WEAPON_SQUIRE                                  = 2,
	EWT_WEAPON_INITIATE                                = 3,
	EWT_WEAPON_RECRUIT                                 = 4,
	EWT_WEAPON_NONE                                    = 5,
	EWT_WEAPON_MAX                                     = 6
};*/

// Enum UDKGame._DataTypes.EEquipmentStatType
/*enum EEquipmentStatType
{
	EQS_WEAPONBASEDAMAGE                               = 0,
	EQS_WEAPONALTDAMAGE                                = 1,
	EQS_WEAPONELEMENTALDAMAGE                          = 2,
	EQS_WEAPONSHOTSPERSECOND                           = 3,
	EQS_CLIPAMMO                                       = 4,
	EQS_RELOADSPEED                                    = 5,
	EQS_KNOCKBACK                                      = 6,
	EQS_CHARGESPEED                                    = 7,
	EQS_BLOCKING                                       = 8,
	EQS_WEAPONNUMBEROFPROJECTILES                      = 9,
	EQS_WEAPONPROJECTILESPEED                          = 10,
	EQS_ENDEQUIPMENTSTATS                              = 11,
	EQS_DAMAGERESISTANCE                               = 12,
	EQS_HEROSTAT                                       = 13,
	EQS_MAX                                            = 14
};*/

// Enum UDKGame.ActionWheel.EACTIONWHEEL_HIGHLIGHTSTATUS
/*enum EACTIONWHEEL_HIGHLIGHTSTATUS
{
	ACTIONWHEEL_HIGHLIGHTSTATUS_NA                     = 0,
	ACTIONWHEEL_HIGHLIGHTSTATUS_CANUSE_SECTION         = 1,
	ACTIONWHEEL_HIGHLIGHTSTATUS_CANUSE_ABILITY         = 2,
	ACTIONWHEEL_HIGHLIGHTSTATUS_CANUSE_CASTING         = 3,
	ACTIONWHEEL_HIGHLIGHTSTATUS_NOTENOUGHMANA          = 4,
	ACTIONWHEEL_HIGHLIGHTSTATUS_NOTENOUGHLEVEL         = 5,
	ACTIONWHEEL_HIGHLIGHTSTATUS_MAX                    = 6
};*/

// Enum UDKGame.DunDefPlayerAbility.EPlayerAbilityStatus
/*enum EPlayerAbilityStatus
{
	EPA_INVISIBLE                                      = 0,
	EPA_NOTAPPLICABLE                                  = 1,
	EPA_UNDERLEVELREQUIREMENT                          = 2,
	EPA_NOTENOUGHMANA                                  = 3,
	EPA_BADPHYSICSSTATE                                = 4,
	EPA_COOLINGDOWN                                    = 5,
	EPA_CANACTIVATE                                    = 6,
	EPA_CASTING                                        = 7,
	EPA_MAX                                            = 8
};*/

// Enum UDKGame.ActorFilter.EActorFilterRequirement
/*enum EActorFilterRequirement
{
	EAFR_Allow                                         = 0,
	EAFR_Disallow                                      = 1,
	EAFR_MAX                                           = 2
};*/

// Enum UDKGame.AnalyticsXML.EGameEvent
/*enum EGameEvent
{
	EGameEvent_Victory                                 = 0,
	EGameEvent_Defeat                                  = 1,
	EGameEvent_MAX                                     = 2
};*/

// Enum UDKGame.HeroEquipmentNative.EEquipmentType
/*enum EEquipmentType
{
	EQT_WEAPON                                         = 0,
	EQT_ARMOR_TORSO                                    = 1,
	EQT_ARMOR_PANTS                                    = 2,
	EQT_ARMOR_BOOTS                                    = 3,
	EQT_ARMOR_GLOVES                                   = 4,
	EQT_FAMILIAR                                       = 5,
	EQT_ENDPRIMARYITEMS                                = 6,
	EQT_ACCESSORY1                                     = 7,
	EQT_ACCESSORY2                                     = 8,
	EQT_ACCESSORY3                                     = 9,
	EQT_MASK                                           = 10,
	EQT_MAX                                            = 11
};*/

// Enum UDKGame.DunDefAchievementManager.EAchievementCheckSet
/*enum EAchievementCheckSet
{
	EAC_LEVEL_UP_EQUIPMENT                             = 0,
	EAC_LEVEL_UP_HERO                                  = 1,
	EAC_LEVEL_VICTORY                                  = 2,
	EAC_EQUIPMENT_SET                                  = 3,
	EAC_SURVIVAL_WAVE                                  = 4,
	EAC_AWARD                                          = 5,
	EAC_BANKED_MANA                                    = 6,
	EAC_ALL_FAMILIAR                                   = 7,
	EAC_AT_LOBBY                                       = 8,
	EAC_MAX                                            = 9
};*/

// Enum UDKGame.DunDefAchievementManager.EAchievement
/*enum EAchievement
{
	EA_SMITHY                                          = 0,
	EA_MY_WEAPON                                       = 1,
	EA_MASTER_FAMILIAR                                 = 2,
	EA_PUPIL                                           = 3,
	EA_VETERAN                                         = 4,
	EA_DEFENDER_OF_ETHERIA                             = 5,
	EA_TO_THE_LIMIT                                    = 6,
	EA_AREA1_ANY                                       = 7,
	EA_AREA2_ANY                                       = 8,
	EA_AREA3_ANY                                       = 9,
	EA_ALL_ANY                                         = 10,
	EA_AREA1_HARD                                      = 11,
	EA_AREA2_HARD                                      = 12,
	EA_AREA3_HARD                                      = 13,
	EA_ALL_HARD                                        = 14,
	EA_AREA1_INSANE                                    = 15,
	EA_AREA2_INSANE                                    = 16,
	EA_AREA3_INSANE                                    = 17,
	EA_ALL_INSANE                                      = 18,
	EA_CHALLENGE1_NORMAL                               = 19,
	EA_CHALLENGE2_NORMAL                               = 20,
	EA_CHALLENGE3_NORMAL                               = 21,
	EA_CHALLENGE4_NORMAL                               = 22,
	EA_CHALLENGE5_NORMAL                               = 23,
	EA_CHALLENGE6_NORMAL                               = 24,
	EA_CHALLENGE7_NORMAL                               = 25,
	EA_CHALLENGE8_NORMAL                               = 26,
	EA_CHALLENGE9_NORMAL                               = 27,
	EA_CHALLENGE10_NORMAL                              = 28,
	EA_CHALLENGE11_NORMAL                              = 29,
	EA_CHALLENGE12_NORMAL                              = 30,
	EA_ALL_CHALLENGE_NORMAL                            = 31,
	EA_CHALLENGE1_INSANE                               = 32,
	EA_CHALLENGE2_INSANE                               = 33,
	EA_CHALLENGE3_INSANE                               = 34,
	EA_CHALLENGE4_INSANE                               = 35,
	EA_CHALLENGE5_INSANE                               = 36,
	EA_CHALLENGE6_INSANE                               = 37,
	EA_SURVIVAL_WAVE15_NORMAL                          = 38,
	EA_SURVIVAL_WAVE20_NORMAL                          = 39,
	EA_SURVIVAL_WAVE15_HARD                            = 40,
	EA_SURVIVAL_WAVE10_INSANE                          = 41,
	EA_ALL_PURESTRATEGY_WAVE10_NORMAL                  = 42,
	EA_NORMAL_LORD                                     = 43,
	EA_GODLY_SET                                       = 44,
	EA_GODLY_WEAPON                                    = 45,
	EA_SIX_FLAWLESS_NORMAL                             = 46,
	EA_SIX_SKIN_OF_TEETH                               = 47,
	EA_ALL_STRATEGIST                                  = 48,
	EA_ALL_GUNSLINGER                                  = 49,
	EA_ALL_TEAMWORK                                    = 50,
	EA_ALL_ENDINGS                                     = 51,
	EA_ALL_LVL60                                       = 52,
	EA_ALL_FAMILIARS                                   = 53,
	EA_MASTER_BANKER                                   = 54,
	EA_COMPLETED_TUTORIAL                              = 55,
	EA_ALL_ACCOMPLISHMENTS                             = 56,
	EA_XMAS                                            = 57,
	EA_ETERNIASHARDS_PART1_ANY                         = 58,
	EA_ETERNIASHARDS_PART1_NIGHTMARE                   = 59,
	EA_PORTAL_PROTECTOR                                = 60,
	EA_PORTAL_PROTECTOR_NIGHTMARE                      = 61,
	EA_MYTHICAL_DEFENDER                               = 62,
	EA_MYTHICAL_DEFENDER_HARDCORE                      = 63,
	EA_DUNGEON_RAIDER                                  = 64,
	EA_DUNGEON_RAIDER_MYTHICAL                         = 65,
	EA_CUPID                                           = 66,
	EA_CUPID_MYTHICAL                                  = 67,
	EA_CHALLENGE_MYTHICAL_HARDCORE                     = 68,
	EA_ETERNIASHARDS_PART2_ANY                         = 69,
	EA_DJINN_RECRUITER                                 = 70,
	EA_ETERNIASHARDS_PART2_NIGHTMARE                   = 71,
	EA_DJINN_RECRUITER_NIGHTMARE                       = 72,
	EA_TRANSCENDENT_SURVIVALIST                        = 73,
	EA_ETERNIASHARDS_PART3_ANY                         = 74,
	EA_PUZZLE_SOLVER                                   = 75,
	EA_ETERNIASHARDS_PART3_NIGHTMARE                   = 76,
	EA_PUZZLE_SOLVER_NIGHTMARE                         = 77,
	EA_RTS                                             = 78,
	EA_RTS_NIGHTMARE                                   = 79,
	EA_ETERNIASHARDS_PART4_ANY                         = 80,
	EA_ETERNIASHARDS_PART4_NIGHTMARE                   = 81,
	EA_BOSS_CRUSHER                                    = 82,
	EA_BOSS_CRUSHER_NIGHTMARE                          = 83,
	EA_HEROES                                          = 84,
	EA_HEROES_NIGHTMARE                                = 85,
	EA_MONSTERS                                        = 86,
	EA_ULTIMATE_DEFENDER                               = 87,
	EA_ANNIVERSARY                                     = 88,
	EA_ANNIVERSARY_NIGHTMARE                           = 89,
	EA_PUMPKING_PARTY                                  = 90,
	EA_PUMPKING_PARTY_NIGHTMARE                        = 91,
	EA_GREATER_TURKEYHUNTER                            = 92,
	EA_GREATER_TURKEYHUNTER_NIGHTMARE                  = 93,
	EA_SILENTNIGHT                                     = 94,
	EA_SILENTNIGHT_NIGHTMARE                           = 95,
	EA_WINTERWONDERLAND                                = 96,
	EA_WINTERWONDERLAND_NIGHTMARE                      = 97,
	EA_VDAY2013                                        = 98,
	EA_VDAY2013_NIGHTMARE                              = 99,
	EA_LAB                                             = 100,
	EA_LAB_NIGHTMARE                                   = 101,
	EA_LABASSAULT                                      = 102,
	EA_LABASSAULT_NIGHTMARE                            = 103,
	EA_EMBERMOUNT                                      = 104,
	EA_EMBERMOUNT_NIGHTMARE                            = 105,
	EA_MOONBASE                                        = 106,
	EA_MOONBASE_NIGHTMARE                              = 107,
	EA_BUCCANEERBAY                                    = 108,
	EA_BUCCANEERBAY_NIGHTMARE                          = 109,
	EA_TEMPLEOFWATER                                   = 110,
	EA_TEMPLEOFWATER_NIGHTMARE                         = 111,
	EA_CRYSTALLINERESURGENCE                           = 112,
	EA_CRYSTALLINERESURGENCE_NIGHTMARE                 = 113,
	EA_WINTERMIRE_NIGHTMARE                            = 114,
	EA_INFESTED_NIGHTMARE                              = 115,
	EA_OMENAK_NIGHTMARE                                = 116,
	EA_TOMB_OF_ETHERIA_NIGHTMARE                       = 117,
	EA_ETERNAL_DEFENDER                                = 118,
	EA_SPOOKYBAY                                       = 119,
	EA_SPOOKYBAY_NIGHTMARE                             = 120,
	EA_HALLOWEENINVASION                               = 121,
	EA_HALLOWEENINVASION_NIGHTMARE                     = 122,
	EA_STRIKINGTREE                                    = 123,
	EA_STRIKINGTREE_NIGHTMARE                          = 124,
	EA_TAVERNINCURSION                                 = 125,
	EA_TAVERNINCURSION_NIGHTMARE                       = 126,
	EA_SKYOLOVECAMPAIGN                                = 127,
	EA_SKYOLOVECAMPAIGN_NIGHTMARE                      = 128,
	EA_COASTALBAZAAR                                   = 129,
	EA_COASTALBAZAAR_NIGHTMARE                         = 130,
	EA_WANDERINGHEART                                  = 131,
	EA_WANDERINGHEART_NIGHTMARE                        = 132,
	EA_ARCANELIBRARY_NIGHTMARE                         = 133,
	EA_DREADDUNGEON_NIGHTMARE                          = 134,
	EA_EMERALDCITY_NIGHTMARE                           = 135,
	EA_FLAMESOFREBIRTH_NIGHTMARE                       = 136,
	EA_PIRATEINVASION_NIGHTMARE                        = 137,
	EA_SPRINGVALLEY_NIGHTMARE                          = 138,
	EA_TEMPLEOFPOLYBIUS_NIGHTMARE                      = 139,
	EA_LIFESTREAMHOLLOW                                = 140,
	EA_LIFESTREAMHOLLOW_NIGHTMARE                      = 141,
	EA_FORESTOGRECRUSH                                 = 142,
	EA_FORESTOGRECRUSH_NIGHTMARE                       = 143,
	EA_MAGUSCITADEL_NIGHTMARE                          = 144,
	EA_MAX                                             = 145
};*/

// Enum UDKGame.DunDefHeroManager.EGameDifficulty
/*enum EGameDifficulty
{
	EGD_EASY                                           = 0,
	EGD_MEDIUM                                         = 1,
	EGD_HARD                                           = 2,
	EGD_INSANE                                         = 3,
	EGD_NIGHTMARE                                      = 4,
	EGD_MAX                                            = 5
};*/

// Enum UDKGame.DunDefHeroManager.StringVerificationTypes
/*enum StringVerificationTypes
{
	HERO_NAME_VERIFY                                   = 0,
	EQUIP_NAME_VERIFY                                  = 1,
	EQUIP_FORGER_NAME_VERIFY                           = 2,
	StringVerificationTypes_MAX                        = 3
};*/

// Enum UDKGame.DunDefHero.EHeroType
/*enum EHeroType
{
	EHT_APPRENTICE                                     = 0,
	EHT_SQUIRE                                         = 1,
	EHT_HUNTRESS                                       = 2,
	EHT_MONK                                           = 3,
	EHT_MAX                                            = 4
};*/

// Enum UDKGame.DunDefHeroManager.EMultiplayerModes
/*enum EMultiplayerModes
{
	MP_UNRANKED                                        = 0,
	MP_RANKED                                          = 1,
	MP_NONSTEAM                                        = 2,
	MP_MAX                                             = 3
};*/

// Enum UDKGame.DunDefGameStats.HeroAwardEnum
/*enum HeroAwardEnum
{
	DDAward_Immortal                                   = 0,
	DDAward_Invincible                                 = 1,
	DDAward_Knight                                     = 2,
	DDAward_Lord                                       = 3,
	DDAward_Strategist                                 = 4,
	DDAward_Banker                                     = 5,
	DDAward_TriggerHappy                               = 6,
	DDAward_HandyMan                                   = 7,
	DDAward_Janitor                                    = 8,
	DDAward_Chillax                                    = 9,
	DDAward_FlawlessVictory                            = 10,
	DDAward_MVP                                        = 11,
	DDAward_Teamwork                                   = 12,
	DDAward_SkinOfTeeth                                = 13,
	DDAward_FirstKill                                  = 14,
	DDAward_Mechanic                                   = 15,
	DDAward_BossSlayer                                 = 16,
	DDAward_MasterBuilder                              = 17,
	DDAward_MasterStrategist                           = 18,
	DDAward_GunSlinger                                 = 19,
	DDAward_RealMVP                                    = 20,
	DDAward_RTS                                        = 21,
	DDAward_MAX                                        = 22
};*/

// Enum UDKGame.DunDefGameStats.GameStat
/*enum GameStat
{
	DDStat_CombatStart                                 = 0,
	DDStat_CombatStop                                  = 1,
	DDStat_Score                                       = 2,
	DDStat_EnemyKill                                   = 3,
	DDStat_PlayerKill                                  = 4,
	DDStat_TowerKill                                   = 5,
	DDStat_ExpGained                                   = 6,
	DDStat_ManaEarned                                  = 7,
	DDStat_UsefulBooty                                 = 8,
	DDStat_UnusefulBooty                               = 9,
	DDStat_TowerBuilt                                  = 10,
	DDStat_TowerRepaired                               = 11,
	DDStat_TowerDestroyed                              = 12,
	DDStat_TowerSold                                   = 13,
	DDStat_TowerUpgraded                               = 14,
	DDStat_Distance                                    = 15,
	DDStat_ChestOpened                                 = 16,
	DDStat_ChestLost                                   = 17,
	DDStat_HeroDied                                    = 18,
	DDStat_HeroDamaged                                 = 19,
	DDStat_HeroSwapped                                 = 20,
	DDStat_EnemyDeath                                  = 21,
	DDStat_EnemySpawn                                  = 22,
	DDStat_CoreActivated                               = 23,
	DDStat_CoreAttacked                                = 24,
	DDStat_AwardImmortal                               = 25,
	DDStat_AwardInvincible                             = 26,
	DDStat_KnightAchieved                              = 27,
	DDStat_LordAchieved                                = 28,
	DDStat_AwardStrategist                             = 29,
	DDStat_AwardBanker                                 = 30,
	DDStat_AwardTriggerHappy                           = 31,
	DDStat_AwardHandyMan                               = 32,
	DDStat_AwardJanitor                                = 33,
	DDStat_AwardChillax                                = 34,
	DDStat_FlawlessVictory                             = 35,
	DDStat_AwardMVH                                    = 36,
	DDStat_AwardTeamwork                               = 37,
	DDStat_AwardSkinOfTeeth                            = 38,
	DDStat_AwardFirstKill                              = 39,
	DDStat_AwardMechanic                               = 40,
	DDStat_AwardBossSlayer                             = 41,
	DDStat_AwardMasterBuilder                          = 42,
	DDStat_AwardMasterStrategist                       = 43,
	DDStat_AwardGunSlinger                             = 44,
	DDStat_AwardMVP                                    = 45,
	DDStat_AwardRTS                                    = 46,
	DDStat_MAX                                         = 47
};*/

// Enum UDKGame.ToolTipInterface.ToolTipAlignment
/*enum ToolTipAlignment
{
	TTAlignment_LeftTop                                = 0,
	TTAlignment_RightBottom                            = 1,
	TTAlignment_Center                                 = 2,
	TTAlignment_Absolute                               = 3,
	TTAlignment_MAX                                    = 4
};*/

// Enum UDKGame.DunDefUIScene.SideButtonAlignment
/*enum SideButtonAlignment
{
	SBA_Left                                           = 0,
	SBA_Right                                          = 1,
	SBA_Top                                            = 2,
	SBA_Bottom                                         = 3,
	SBA_MAX                                            = 4
};*/

// Enum UDKGame.DunDefGameReplicationInfo.EScoreAwardType
/*enum EScoreAwardType
{
	ESA_NoType                                         = 0,
	ESA_CompletedWave                                  = 1,
	ESA_WaveTimeBonus                                  = 2,
	ESA_NoCoreDamageBonus                              = 3,
	ESA_NoPlayerDamageBonus                            = 4,
	ESA_OnlyAttackedWithTowersBonus                    = 5,
	ESA_OnlyAttackedWithWeaponsBonus                   = 6,
	ESA_KilledEnemy                                    = 7,
	ESA_Award                                          = 8,
	ESA_Cheated                                        = 9,
	ESA_ExpBonus                                       = 10,
	ESA_MAX                                            = 11
};*/

// Enum UDKGame.TextComponent.ENoteVerticalAlignment
/*enum ENoteVerticalAlignment
{
	NVA_Top                                            = 0,
	NVA_Center                                         = 1,
	NVA_Bottom                                         = 2,
	NVA_MAX                                            = 3
};*/

// Enum UDKGame.TextComponent.ENoteAlignment
/*enum ENoteAlignment
{
	NA_Center                                          = 0,
	NA_Left                                            = 1,
	NA_Right                                           = 2,
	NA_MAX                                             = 3
};*/

// Enum UDKGame.Main.ETUTORIALFLAG
/*enum ETUTORIALFLAG
{
	ETF_ONLYBUILDDEFENSES                              = 0,
	ETF_DISABLE_CORE_ACTIVATION                        = 1,
	ETF_DISABLE_FORGE_ACTIVATION                       = 2,
	ETF_MAX                                            = 3
};*/

// Enum UDKGame.DunDefGameMessage.GAME_HUD_MESSAGE_TYPE
/*enum GAME_HUD_MESSAGE_TYPE
{
	GHM_GENERIC                                        = 0,
	GHM_CRYSTALCOREATTACK                              = 1,
	GHM_LEVELUP                                        = 2,
	GHM_CANTJOINMULTIPLAYER                            = 3,
	GHM_MAX                                            = 4
};*/

// Enum UDKGame.DunDefEnemy.EnemyClassification
/*enum EnemyClassification
{
	EC_NORMAL                                          = 0,
	EC_UNDEAD                                          = 1,
	EC_MAX                                             = 2
};*/

// Enum UDKGame.DunDefDarkElfMageController.WhatToDo
/*enum WhatToDo
{
	WTD_Attack                                         = 0,
	WTD_Heal                                           = 1,
	WTD_Spawn                                          = 2,
	WTD_MoveToHeal                                     = 3,
	WTD_Run                                            = 4,
	WTD_MAX                                            = 5
};*/

// Enum UDKGame.DunDefDroppedEquipment.EQUALITYFX
/*enum EQUALITYFX
{
	EQF_NONE                                           = 0,
	EQF_CIRCLES_ONLY                                   = 1,
	EQF_CIRCLES_AND_BEAMS                              = 2,
	EQF_MAX                                            = 3
};*/

// Enum UDKGame.DunDefPlayerStats.PlayerStat
/*enum PlayerStat
{
	DDPlayerStat_EnemyKill                             = 0,
	DDPlayerStat_PlayerKill                            = 1,
	DDPlayerStat_TowerKill                             = 2,
	DDPlayerStat_OpenedChests                          = 3,
	DDPlayerStat_TowerBuilt                            = 4,
	DDPlayerStat_TowerRepaired                         = 5,
	DDPlayerStat_TowerDestroyed                        = 6,
	DDPlayerStat_TowerSold                             = 7,
	DDPlayerStat_TowerUpgraded                         = 8,
	DDPlayerStat_BestTime                              = 9,
	DDPlayerStat_TotalTime                             = 10,
	DDPlayerStat_BestEnemyKill                         = 11,
	DDPlayerStat_BestPlayerKill                        = 12,
	DDPlayerStat_BestTowerKill                         = 13,
	DDPlayerStat_Score                                 = 14,
	DDPlayerStat_HighScore                             = 15,
	DDPlayerStat_SurvivalHighScore                     = 16,
	DDPlayerStat_StrategyHighScore                     = 17,
	DDPlayerStat_ExpGained                             = 18,
	DDPlayerStat_ManaEarned                            = 19,
	DDPlayerStat_BestExp                               = 20,
	DDPlayerStat_BestMana                              = 21,
	DDPlayerStat_DamageTaken                           = 22,
	DDPlayerStat_MostDamage                            = 23,
	DDPlayerStat_LeastDamage                           = 24,
	DDPlayerStat_PlayerDeath                           = 25,
	DDPlayerStat_MostDeaths                            = 26,
	DDPlayerStat_LeastDeaths                           = 27,
	DDPlayerStat_SurvivalHighWave                      = 28,
	DDPlayerStat_StrategyHighWave                      = 29,
	DDPlayerStat_ViewedEndings                         = 30,
	DDPlayerStat_MaxedHeros                            = 31,
	DDPlayerStat_CaughtFamiliars                       = 32,
	DDPlayerStat_Immortal                              = 33,
	DDPlayerStat_Invincible                            = 34,
	DDPlayerStat_Knight                                = 35,
	DDPlayerStat_Lord                                  = 36,
	DDPlayerStat_Strategist                            = 37,
	DDPlayerStat_Banker                                = 38,
	DDPlayerStat_TriggerHappy                          = 39,
	DDPlayerStat_HandyMan                              = 40,
	DDPlayerStat_Janitor                               = 41,
	DDPlayerStat_Chillax                               = 42,
	DDPlayerStat_FlawlessVictory                       = 43,
	DDPlayerStat_MVP                                   = 44,
	DDPlayerStat_Teamwork                              = 45,
	DDPlayerStat_SkinOfTeeth                           = 46,
	DDPlayerStat_FirstKill                             = 47,
	DDPlayerStat_Mechanic                              = 48,
	DDPlayerStat_BossSlayer                            = 49,
	DDPlayerStat_MasterBuilder                         = 50,
	DDPlayerStat_MasterStrategist                      = 51,
	DDPlayerStat_GunSlinger                            = 52,
	DDPlayerStat_RealMVP                               = 53,
	DDPlayerStat_RTS                                   = 54,
	DDPlayerStat_MAX                                   = 55
};*/

// Enum UDKGame.UI_MessageBox.MessageBoxType
/*enum MessageBoxType
{
	MBT_Empty                                          = 0,
	MBT_Ok                                             = 1,
	MBT_YesNo                                          = 2,
	MBT_Cancel                                         = 3,
	MBT_Max                                            = 4
};*/

// Enum UDKGame.UI_GameSetup.E_MAPLISTTYPE
/*enum E_MAPLISTTYPE
{
	EMLT_CAMPAIGN                                      = 0,
	EMLT_SHARDS                                        = 1,
	EMLT_CHALLENGE                                     = 2,
	EMLT_CUSTOM                                        = 3,
	EMLT_LOSTQUESTS                                    = 4,
	EMLT_MAX                                           = 5
};*/

// Enum UDKGame.UI_GameSpyLogin.UserPassState
/*enum UserPassState
{
	EValid                                             = 0,
	EUsernameTooLong                                   = 1,
	EUsernameTooShort                                  = 2,
	EUsernameInvalidStartingCharacter                  = 3,
	EUsernameContainsInvalidCharacter                  = 4,
	EPasswordTooLong                                   = 5,
	EPasswordTooShort                                  = 6,
	UserPassState_MAX                                  = 7
};*/

// Enum UDKGame.UI_MainMenu.MainMenuButtons
/*enum MainMenuButtons
{
	MMButtonPlayOnline                                 = 0,
	MMButtonPlayLocal                                  = 1,
	MMButtonStatistics                                 = 2,
	MMButtonOptions                                    = 3,
	MMButtonCredits                                    = 4,
	MMButtonExit                                       = 5,
	MMButtonDLC                                        = 6,
	MMButtonUnlockFull                                 = 7,
	MainMenuButtons_MAX                                = 8
};*/

// Enum UDKGame.UI_PlayerStats.ViewMode
/*enum ViewMode
{
	KillMode                                           = 0,
	TowerMode                                          = 1,
	EnemyMode                                          = 2,
	TreasureMode                                       = 3,
	ViewMode_MAX                                       = 4
};*/

// Enum UDKGame.UIResolutionContainer.ResolutionType
/*enum ResolutionType
{
	ResType_FullScreen                                 = 0,
	ResType_SplitHalf                                  = 1,
	ResType_SplitQuarter                               = 2,
	ResType_MAX                                        = 3
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class UDKGame.AlienWareAPI
// 0x0000 (0x003C - 0x003C)
class UAlienWareAPI : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1340 ];

		return pClassPointer;
	};

	void LightEvent ( struct FLinearColor InColor, float FadeInTime, float FadeOutTime, float Duration, unsigned long bIsPulsing, float PulseOnInterval, float PulseOffInterval, float PulseFadeTime );
	void Update ( float DeltaTime );
	void SetAllDefaultLightColors ( struct FLinearColor cColor );
	void SetAllLightColors ( struct FLinearColor cColor );
};

UClass* UAlienWareAPI::pClassPointer = NULL;

// Class UDKGame.BaseStatObject
// 0x0008 (0x0044 - 0x003C)
class UBaseStatObject : public UObject
{
public:
	int                                                StatUniqueID;                                     		// 0x003C (0x0004) [0x0000000000200003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDebug : 1;                                       		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1341 ];

		return pClassPointer;
	};

};

UClass* UBaseStatObject::pClassPointer = NULL;

// Class UDKGame.BuffNativeObject
// 0x0048 (0x0084 - 0x003C)
class UBuffNativeObject : public UObject
{
public:
	int                                                buffUniqueID;                                     		// 0x003C (0x0004) [0x0000000000200003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      Owner;                                            		// 0x0040 (0x0004) [0x0000000000000000]              
	class APawn*                                       Instigator;                                       		// 0x0044 (0x0004) [0x0000000000000000]              
	class AWorldInfo*                                  WorldInfo;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	unsigned char                                      Role;                                             		// 0x004C (0x0001) [0x0000000000000000]              
	int                                                TargetingTeam;                                    		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              CreationTime;                                     		// 0x0054 (0x0004) [0x0000000000000000]              
	struct FVector                                     Location;                                         		// 0x0058 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Rotation;                                         		// 0x0064 (0x000C) [0x0000000000000000]              
	class AActor*                                      BasedOn;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      BasedOnMesh;                                      		// 0x0074 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BasedOnName;                                      		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned long                                      bDebug : 1;                                       		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1342 ];

		return pClassPointer;
	};

	void MarkBuffPendingKill ( );
};

UClass* UBuffNativeObject::pClassPointer = NULL;

// Class UDKGame.DunDef3DNote
// 0x0004 (0x0220 - 0x021C)
class ADunDef3DNote : public AActor
{
public:
	class UTextComponent*                              TextComponent;                                    		// 0x021C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1343 ];

		return pClassPointer;
	};

};

UClass* ADunDef3DNote::pClassPointer = NULL;

// Class UDKGame.DunDef_AnimNodeScaleRateBySpeed
// 0x0018 (0x0110 - 0x00F8)
class UDunDef_AnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseRate;                                         		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRate;                                          		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRate;                                          		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinFlightRate;                                    		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      AllowFlightScaling : 1;                           		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      NodeRelevant : 1;                                 		// 0x010C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1344 ];

		return pClassPointer;
	};

};

UClass* UDunDef_AnimNodeScaleRateBySpeed::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_EnemyWaveSpawner
// 0x00A0 (0x0198 - 0x00F8)
class UDunDef_SeqAct_EnemyWaveSpawner : public USeqAct_Latent
{
public:
	TArray< struct FEnemyWaveEntry >                   EnemyWaves;                                       		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              EnemyNumberMultiplier;                            		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveIntervalMultiplier;                           		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DeathsDecrementKillCount : 1;                     		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IgnoreMaxEnemyLimit : 1;                          		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRandomSpawnPoints : 1;                           		// 0x0118 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MaxNumberOfSimultaneousEnemiesScaleByPlayerCount : 1;		// 0x0118 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSpawnForever : 1;                                		// 0x0118 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                      		// 0x0118 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNavigateToInitialCustomNode : 1;                 		// 0x0118 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bOverrideDifficultySetOffset : 1;                 		// 0x0118 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bEvenlySpaceWaveSpawns : 1;                       		// 0x0118 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseSpawnClumps : 1;                              		// 0x0118 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bForceDontEvenlySpaceSpawns : 1;                  		// 0x0118 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      UseMinSpawnClumpValue : 1;                        		// 0x0118 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDisableSlowgreAcceleration : 1;                  		// 0x0118 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      AllKilled : 1;                                    		// 0x0118 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      AllSpawned : 1;                                   		// 0x0118 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      IsActive : 1;                                     		// 0x0118 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	TArray< struct FActorTargetingMultiplier >         ActorTargetingMultipliers;                        		// 0x011C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaximumNumberOfSimultaneousEnemies;               		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    WaveIndexedMaximumNumberOfSimultaneousEnemies;    		// 0x012C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    MaxNumberOfSimultaneousEnemiesScaleByPlayerAmounts;		// 0x0138 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TimeToRespawnAfterReachingMaximum;                		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DifficultySetOffsetOverrideValue;                 		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NavigateToInitialCustomNodeID;                    		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OverrideEnemyTargetingTeam;                       		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnClumpAbsoluteAmount;                         		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnClumpRelativePercent;                        		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TotalSpawnedInClump;                              		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpawnClump;                                       		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaximumSpawnTimer;                                		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TotalNumEnemies;                                  		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumEnemiesKilled;                                 		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WaveSpawnTimer;                                   		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TriggeredPercentDeath;                            		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumEnemiesSpawned;                                		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSpawnPointIndex;                           		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AActor* >                            SpawnedEnemies;                                   		// 0x0180 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                KillCountSpawnInterval;                           		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                KillCountRemainingAtLastSpawn;                    		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActualKillCountSpawnInterval;                     		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1345 ];

		return pClassPointer;
	};

	void NotifyDied ( class ADunDefEnemy* Enemy );
	bool eventUpdate ( float DeltaTime );
	void Tick ( float DeltaTime );
	void NativeWaveUpdating ( float DeltaTime, int masterWaveNum, int missionSwitch, int numDunDefPlayers );
	void Reset ( );
	void eventUpdateWave ( int it, float DeltaTime );
	int GetNumEnemiesRemainingToKill ( );
	int GetNumEnemiesRemainingToSpawn ( );
	int GetMasterWaveNumber ( );
};

UClass* UDunDef_SeqAct_EnemyWaveSpawner::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_PlayMovie
// 0x0018 (0x0104 - 0x00EC)
class UDunDef_UIAction_PlayMovie : public UUIAction
{
public:
	struct FString                                     MovieFile;                                        		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDelayNextAvaiableActivation : 1;                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      justEnabled : 1;                                  		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      MovieActive : 1;                                  		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              NextAvaiableActivationDelay;                      		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastFinishedTime;                                 		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1346 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
};

UClass* UDunDef_UIAction_PlayMovie::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType
// 0x004C (0x00D4 - 0x0088)
class UDunDefDamageType : public UDamageType
{
public:
	struct FString                                     FriendlyName;                                     		// 0x0088 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AdjectiveName;                                    		// 0x0094 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FLinearColor                                DamageColor;                                      		// 0x00A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HitTargetSound;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      PlayHitTargetSound : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IgnoreResistances : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IsElementalDamage : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsPassive : 1;                                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceSpawnImpactEmitterActor : 1;                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIgnoreMomentumResistance : 1;                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowClientSideDamage : 1;                       		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	class USurface*                                    DamageTypeIcon;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    WeaponDamageTypeIcon;                             		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumIntervalForDamageOfThisType;               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AEmitter*                                    ElementalEffectOverride;                          		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DamageNumbersRPCQueueLimit;                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ElementalTrait;                                   		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                DamageTypeArrayIndex;                             		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1347 ];

		return pClassPointer;
	};

	unsigned char GetElementalTrait ( );
	bool IsPassiveDamageType ( class UClass* tDamageType );
};

UClass* UDunDefDamageType::pClassPointer = NULL;

// Class UDKGame.DunDefDataStore_GameSearch
// 0x0024 (0x00CC - 0x00A8)
class UDunDefDataStore_GameSearch : public UUIDataStore_OnlineGameSearch
{
public:
	class UDunDefDataProvider_ServerDetails*           ServerDetailsProvider;                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FString                                     Filter;                                           		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      findPasswordProtectedServers : 1;                 		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     filterPlayerNick;                                 		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GamespyVersionID;                                 		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1348 ];

		return pClassPointer;
	};

	int GetNativeGamespyVersion ( );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	bool eventSubmitGameSearch ( unsigned char ControllerIndex, int numParticipatingLocalPlayers, unsigned long bInvalidateExistingSearchResults );
	void SetupGamespyFilter ( int numParticipatingLocalPlayers );
	bool AppendSizeCheck ( struct FString AppendString, int Size, struct FString* currentString );
	void SetupXboxFilter ( );
	void SetupSteamworksPreFilter ( class UOnlineGameSearch* GameSearch );
	void SetupFilter ( int numParticipatingLocalPlayers );
};

UClass* UDunDefDataStore_GameSearch::pClassPointer = NULL;

// Class UDKGame.DunDefDataStore_OnlineStats
// 0x0014 (0x00FC - 0x00E8)
class UDunDefDataStore_OnlineStats : public UUIDataStore_OnlineStats
{
public:
	int                                                StartIndex;                                       		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                RowCount;                                         		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FString                                     StatsReadString;                                  		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1349 ];

		return pClassPointer;
	};

	struct FString GetTopEntryValue ( struct FName entryTag );
	int GetStatIndexForClass ( struct FString classString );
	void SetStatsReadString ( struct FString InStatsReadString );
	bool eventRefreshStats ( unsigned char ControllerIndex );
	void SetStatsReadInfo ( );
};

UClass* UDunDefDataStore_OnlineStats::pClassPointer = NULL;

// Class UDKGame.DunDefGameSearchCommon
// 0x0020 (0x013C - 0x011C)
class UDunDefGameSearchCommon : public UOnlineGameSearch
{
public:
	int                                                QuickMatchCampaignWeight;                         		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                QuickMatchLobbyWeight;                            		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                QuickMatchBuildWeight;                            		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                QuickMatch5LevelWeight;                           		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                QuickMatch10LevelWeight;                          		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                QuickMatch15LevelWeight;                          		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                QuickMatchGreatPingWeight;                        		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                QuickMatchOKPingWeight;                           		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1350 ];

		return pClassPointer;
	};

};

UClass* UDunDefGameSearchCommon::pClassPointer = NULL;

// Class UDKGame.DunDefGameSearch_Xbox
// 0x0014 (0x0150 - 0x013C)
class UDunDefGameSearch_Xbox : public UDunDefGameSearchCommon
{
public:
	struct FSettingsProperty                           dummyProperty;                                    		// 0x013C (0x0014) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1351 ];

		return pClassPointer;
	};

	void RemoveProperty ( int PropertyId );
	void AddProperties ( );
};

UClass* UDunDefGameSearch_Xbox::pClassPointer = NULL;

// Class UDKGame.DunDefGameSearchQuick_Xbox
// 0x0000 (0x0150 - 0x0150)
class UDunDefGameSearchQuick_Xbox : public UDunDefGameSearch_Xbox
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1352 ];

		return pClassPointer;
	};

	void AddProperties ( );
	int eventGetHeroLevel ( );
	void eventSortSearchResults ( );
};

UClass* UDunDefGameSearchQuick_Xbox::pClassPointer = NULL;

// Class UDKGame.DunDefGameSearchCoop
// 0x0000 (0x013C - 0x013C)
class UDunDefGameSearchCoop : public UDunDefGameSearchCommon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1353 ];

		return pClassPointer;
	};

};

UClass* UDunDefGameSearchCoop::pClassPointer = NULL;

// Class UDKGame.DunDefGameSearchQuick
// 0x0000 (0x013C - 0x013C)
class UDunDefGameSearchQuick : public UDunDefGameSearchCoop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1354 ];

		return pClassPointer;
	};

	int eventGetHeroLevel ( );
	void eventSortSearchResults ( );
};

UClass* UDunDefGameSearchQuick::pClassPointer = NULL;

// Class UDKGame.DunDefHeroManagerNative
// 0x003C (0x0078 - 0x003C)
class UDunDefHeroManagerNative : public UObject
{
public:
	TArray< struct FProgressEntry >                    ProgressEntries;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCoreUnlockEntry >                  CoreUnlockEntries;                                		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAchievementSaveEntry >             AchievementEntries;                               		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCrystalCoreEntry >                 CrystalCoreSettings;                              		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGameDamageEntry >                  GameDamageEntries;                                		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1355 ];

		return pClassPointer;
	};

	TArray< struct FString > GetModMapNames ( unsigned long bSubscribed );
	void ServerCheckForDuplicateDroppedEquipment ( int EquipmentID1, int EquipmentID2 );
	void CheckForDuplicateEquipment ( int EquipmentID1, int EquipmentID2 );
	class UHeroEquipmentNative* GetEquipmentOfType ( TArray< class UHeroEquipmentNative* > InEquipments, int InEquipmentType, unsigned long bFindSecondary );
	int GetDamageTypeIndex ( class UClass* TheDamageType );
};

UClass* UDunDefHeroManagerNative::pClassPointer = NULL;

// Class UDKGame.DunDefInputNative
// 0x0000 (0x0170 - 0x0170)
class UDunDefInputNative : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1356 ];

		return pClassPointer;
	};

	void eventPlayerInput ( float DeltaTime );
	void NativePlayerInput ( float DeltaTime );
	void NativeAdjustMouseSensitivity ( float FOVScale );
	float NativeSmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount );
	void NativeClearSmoothing ( );
	bool eventIsRotatingCamera ( );
};

UClass* UDunDefInputNative::pClassPointer = NULL;

// Class UDKGame.DunDefNativeUIScene
// 0x0028 (0x05AC - 0x0584)
class UDunDefNativeUIScene : public UUIScene
{
public:
	TArray< struct FDunDefUIAnimation >                UIAnimationSequences;                             		// 0x0584 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USoundCue* >                         SoundsToStopOnDeactivate;                         		// 0x0590 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUIAnimationSound >                 soundQueue;                                       		// 0x059C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      soundsInQueue : 1;                                		// 0x05A8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1357 ];

		return pClassPointer;
	};

	void StopDunDefUIAnim ( struct FName DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn, unsigned long bFinalize );
	float PlayDunDefUIAnim ( struct FName DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn, unsigned long forceNoSound, float playSpeed );
	void PlayUIAnimationSound ( class USoundCue* Cue, unsigned long stopOnDeactivate );
	void CallNativeProcessKey ( class UUIScreenObject* onObject, struct FName keyPressed, int PlayerIndex, int ControllerId, unsigned char EventType );
	struct FString GetAlphaNumeric ( struct FString fullString, unsigned long removeSpaces, unsigned long removeBrackets );
	struct FString FormatTime ( int Seconds );
	struct FString FormatNumber ( int Number );
	void RequestViewportUpdate ( );
	void eventOnPostEditChange ( struct FName PropertyChanged );
	bool eventIsKeyboardOwned ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void InitStateExecution ( class UObject* onObject );
};

UClass* UDunDefNativeUIScene::pClassPointer = NULL;

// Class UDKGame.DunDefNativeViewportClient
// 0x0014 (0x013C - 0x0128)
class UDunDefNativeViewportClient : public UGameViewportClient
{
public:
	TArray< class UUIEditBox* >                        SplitscreenEditboxes;                             		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGameUISceneClient*                          theSceneClient;                                   		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefHeroManagerNative*                    TheHeroManagerNative;                             		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1358 ];

		return pClassPointer;
	};

	void GetAvailableResolutions ( TArray< struct FScreenResolution >* Resolutions );
	bool HasAnyGlobalInputLockingScene ( class ULocalPlayer* thePlayer );
	bool HasAnyInputLockingSceneOpen ( class ULocalPlayer* thePlayer, unsigned long bCountAnyLockingOwner );
	void SetNumericalProperty ( struct FString ObjClass, struct FString PropertyName, float Value, unsigned long bPermanent );
	bool IsPC ( );
	void SetDemoMode ( unsigned long demoMode );
	bool IsDemoMode ( );
	bool CheckShouldSkipFloatingText ( struct FVector Location, float FrustumRadius );
	bool CheckInLocalPlayersInfluence ( struct FVector Location, float FrustumRadius, float DistanceInfluence );
	bool CheckInLocalPlayersRanges ( struct FVector Location, float SphereRadius );
	bool CheckInLocalPlayersFrustums ( struct FVector Location, float SphereRadius );
	void CheckStaticMeshForBadCollisions ( class UStaticMesh* Mesh );
	int GetNumMaterialsForStaticMesh ( class UStaticMeshComponent* Component );
	bool IsStaticMeshComponentTranslucent ( class UStaticMeshComponent* Component );
	float GetVertexDensityForComponent ( class UStaticMeshComponent* Component );
	int GetNumParticlesForComponent ( class UParticleSystemComponent* Component );
	class UHUDWidgetScene* CreateHUDScene ( class ULocalPlayer* ForPlayer );
	struct FString PrintFloat ( float Value, int numDecimals, unsigned long forceDecimals );
	struct FString TruncateNumber ( float Value, int numDecimals );
	bool CompareTransformedString ( struct FString InString, struct FString TransformedString );
	void FilteredConsoleCommands ( struct FString InCommand, unsigned long bFullUnlock );
	int CountDynamicActorsWithArchetype ( class UObject* InArchetype );
	void StopMovie ( );
	bool IsMoviePlaying ( );
	void PlayMovie ( struct FString MovieName );
	void ShowPathTargets ( unsigned long SetToValue );
	void SetUsedPathWeight ( int withValue );
	void SetParticleLODBias ( int LODLevel );
	void ShowDynamicLights ( unsigned long setWith );
	void ShowDynamicShadows ( unsigned long setWith );
	void SetKeyboardInputID ( int withId );
	void SetJoystickOffset ( int withOffset );
	int GetJoystickOffset ( );
};

UClass* UDunDefNativeViewportClient::pClassPointer = NULL;

// Class UDKGame.DunDefOnlineGameSettingsConsole
// 0x0110 (0x01F8 - 0x00E8)
class UDunDefOnlineGameSettingsConsole : public UOnlineGameSettings
{
public:
	struct FString                                     LT;                                               		// 0x00E8 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                IWM;                                              		// 0x00F4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                PureStrategyMode;                                 		// 0x00F8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                StartWave;                                        		// 0x00FC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                GameDifficulty;                                   		// 0x0100 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                InfiniteBuildTime;                                		// 0x0104 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SessionId;                                        		// 0x0108 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                IsInLobby;                                        		// 0x010C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                MC;                                               		// 0x0110 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     LevelFriendlyName;                                		// 0x0114 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     difficulty;                                       		// 0x0120 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     SurvivalMode;                                     		// 0x012C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     InfiniteBuild;                                    		// 0x0138 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     pureStrategy;                                     		// 0x0144 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     LobbyLevelName;                                   		// 0x0150 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	int                                                MinimumLevel;                                     		// 0x015C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     OnlineSubsystemInfo;                              		// 0x0160 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                Password;                                         		// 0x016C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     thePassword;                                      		// 0x0170 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PlayerNick;                                       		// 0x017C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                isChallenge;                                      		// 0x0188 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                HeroClass;                                        		// 0x018C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                HeroLevel;                                        		// 0x0190 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     hostInfo;                                         		// 0x0194 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Ping;                                             		// 0x01A0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                demoMode;                                         		// 0x01AC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      IsMobile : 1;                                     		// 0x01B0 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      isBuildPhase : 1;                                 		// 0x01B0 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bIsAFKShopMode : 1;                               		// 0x01B0 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	struct FString                                     scriptVersion;                                    		// 0x01B4 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                nativeVersion;                                    		// 0x01C0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     PingTextures[ 0x4 ];                              		// 0x01C4 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GameMode;                                         		// 0x01F4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1359 ];

		return pClassPointer;
	};

	void SetupDemoAndVersion ( );
	void CreateUniqueSessionID ( );
	bool eventMatchesGameFilter ( );
	bool eventCustomize ( );
	bool eventIsValidLevel ( struct FString forLevelTag );
	void eventUpdateGameSpyCustomKeys ( );
	bool eventIsSpecialMission ( struct FString forLevelTag );
};

UClass* UDunDefOnlineGameSettingsConsole::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbilityNative
// 0x0004 (0x0220 - 0x021C)
class ADunDefPlayerAbilityNative : public AActor
{
public:
	unsigned long                                      bForceAbilityTick : 1;                            		// 0x021C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1360 ];

		return pClassPointer;
	};

	void eventAbilityTick ( float DeltaTime );
};

UClass* ADunDefPlayerAbilityNative::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerCameraNative
// 0x0160 (0x0578 - 0x0418)
class ADunDefPlayerCameraNative : public ACamera
{
public:
	float                                              CameraTraceInterpSpeed;                           		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTraceOffsetDistance;                        		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTraceNormalOffset;                          		// 0x0420 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTraceMinDistance;                           		// 0x0424 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CameraTraceOffsetPosition;                        		// 0x0428 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraLateralOffset;                              		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CameraVerticalOffset;                             		// 0x0438 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetLocationInterpSpeed;                        		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetRotationInterpSpeed;                        		// 0x0448 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChaseTargetRotationInterpSpeed;                   		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChaseMaxRotationInterpSpeed;                      		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ChaseUseLerpRotation : 1;                         		// 0x0454 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNativeValuesReset : 1;                           		// 0x0454 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bSpectatorCamera : 1;                             		// 0x0454 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWantShoulderCamera : 1;                          		// 0x0454 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              ChaseMouseMaxPitchUpAngle;                        		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChaseMouseMaxPitchDownAngle;                      		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PCChasePitchAffectLocationMultiplier;             		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PCChasePitchAffectLocationInitialOffset;          		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetLookOffset;                                 		// 0x0468 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTransitionInterpTime;                       		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetLookDirectionSpeed;                         		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCameraRotateSpeed;                             		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraOverHeadTugLerpSpeed;                       		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraOffsetSpeed;                                		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraOffsetLerpMax;                              		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastFinalCameraOffset;                            		// 0x048C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CameraTraceCurrentOffset;                         		// 0x0498 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCameraTugInPercent;                           		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCameraNoRotInterpTime;                        		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentUnitSphereTargetLookDirection;             		// 0x04AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              TraceDistanceFromTargetPosition;                  		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CameraTraceTargetOffset;                          		// 0x04BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCollidedHitNormal;                            		// 0x04C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCameraTransitionTime;                         		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TransitionCameraLocation;                         		// 0x04D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    TransitionCameraRotation;                         		// 0x04E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              TransitionCameraFOV;                              		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraDistanceMultiplier;                         		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCameraSpin;                                		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PendingCameraSpinAmmount;                         		// 0x04FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastPendingCameraSpinAmmount;                     		// 0x0500 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetCameraSpin;                                 		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentCameraRotationOffset;                      		// 0x0508 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CurrentTargetLookRotation;                        		// 0x0514 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentTargetLocation;                            		// 0x0520 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCameraPitchOffset;                         		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCameraPitch;                               		// 0x0530 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCameraLocation;                               		// 0x0534 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastCameraRotation;                               		// 0x0540 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCameraFOV;                                    		// 0x054C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShoulderCameraDistanceMultiplier;                 		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastPlacingTowerCameraDistance;                   		// 0x0554 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastDesiredCameraLocation;                        		// 0x0558 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastDesiredCameraRotation;                        		// 0x0564 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDesiredCameraFOV;                             		// 0x0570 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForcedCameraAccumulator;                          		// 0x0574 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1361 ];

		return pClassPointer;
	};

	struct FVector CheckForCollisionTowerPlacement ( struct FVector TargetLocation, struct FVector cameraLocation, float DeltaTime );
	struct FVector CheckForCollision ( struct FVector TargetLocation, struct FVector cameraLocation, float DeltaTime, float tDistanceMultiplier );
	float CameraDot ( struct FVector SrcPosition, struct FVector cameraLocation, struct FRotator cameraRotation );
	void NativeUpdateViewTargetChase ( struct FRotator TargetRotation, float DeltaTime, unsigned long bIsGamePad, struct FTViewTarget* OutVT );
	void NativeUpdateViewTargetBase ( float DeltaTime, struct FTViewTarget* OutVT );
	void eventCalculateSpinOffset ( );
	void eventSpinCamera ( float Amount, unsigned long forceSpin );
	bool eventIsInShoulderMode ( );
};

UClass* ADunDefPlayerCameraNative::pClassPointer = NULL;

// Class UDKGame.EquipmentDataContainer
// 0x000C (0x0048 - 0x003C)
class UEquipmentDataContainer : public UObject
{
public:
	TArray< struct FSHeroEquipmentItem >               EquipmentTemplates;                               		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1362 ];

		return pClassPointer;
	};

};

UClass* UEquipmentDataContainer::pClassPointer = NULL;

// Class UDKGame.HeroEquipmentNative
// 0x0164 (0x01A0 - 0x003C)
class UHeroEquipmentNative : public UObject
{
public:
	int                                                StatModifiers[ 0xB ];                             		// 0x003C (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FDamageReduction                            DamageReductions[ 0x4 ];                          		// 0x0068 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponDamageBonus;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponNumberOfProjectilesBonus;                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponSpeedOfProjectilesBonus;                    		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      WeaponAdditionalDamageType;                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponAdditionalDamageAmount;                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponDrawScaleMultiplier;                        		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRandomElementalDamageMultiplier;               		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponSwingSpeedMultiplier;                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      WeaponReloadSpeedBonusUse : 1;                    		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreLevelRequirement : 1;                      		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      WeaponKnockbackBonusUse : 1;                      		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCanBeUpgraded : 1;                               		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      AllowRenamingAtMaxUpgrade : 1;                    		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bForceUseParentTemplate : 1;                      		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      WeaponAltDamageBonusUse : 1;                      		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDisableTheRandomization : 1;                     		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      WeaponBlockingBonusUse : 1;                       		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDontCalculateLevelRequirement : 1;               		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      WeaponClipAmmoBonusUse : 1;                       		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDontUseLevelName : 1;                            		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      WeaponChargeSpeedBonusUse : 1;                    		// 0x00A8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      WeaponShotsPerSecondBonusUse : 1;                 		// 0x00A8 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      UseWeaponCoreStats : 1;                           		// 0x00A8 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bIsLocked : 1;                                    		// 0x00A8 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bWasAttached : 1;                                 		// 0x00A8 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bIsShopEquipment : 1;                             		// 0x00A8 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bIsSecondary : 1;                                 		// 0x00A8 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bIsNameOnlineVerified : 1;                        		// 0x00A8 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIsForgerNameOnlineVerified : 1;                  		// 0x00A8 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bWasAddedToDefenderStore : 1;                     		// 0x00A8 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	int                                                WeaponReloadSpeedBonus;                           		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponKnockbackBonus;                             		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponAltDamageBonus;                             		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponBlockingBonus;                              		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponClipAmmoBonus;                              		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AdditionalAllowedUpgradeResistancePoints;         		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RequirementLevelOverride;                         		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponChargeSpeedBonus;                           		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponShotsPerSecondBonus;                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NameIndex_Base;                                   		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NameIndex_QualityDescriptor;                      		// 0x00D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NameIndex_DamageReduction;                        		// 0x00D2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PrimaryColorSet;                                  		// 0x00D3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SecondaryColorSet;                                		// 0x00D4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      bCantBeDropped;                                   		// 0x00D5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      bCantBeSold;                                      		// 0x00D6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      bAutoLockInItemBox;                               		// 0x00D7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      bDidOnetimeEffect;                                		// 0x00D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ManualLR;                                         		// 0x00D9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EquipmentType;                                    		// 0x00DA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLinearColor >                      PrimaryColorSets;                                 		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      SecondaryColorSets;                               		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                PrimaryColorOverride;                             		// 0x00F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SecondaryColorOverride;                           		// 0x0104 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaximumSellWorth;                                 		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinimumSellWorth;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShopMinimumSellWorth;                             		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxEquipmentLevel;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     UserEquipmentName;                                		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     EquipmentDescription;                             		// 0x0130 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	int                                                StatEquipmentIDs[ 0x3 ];                          		// 0x013C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                StatEquipmentTiers[ 0x3 ];                        		// 0x0148 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                QualityBeamColorOverride;                         		// 0x0154 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                equipmentTemplateUniqueID;                        		// 0x0164 (0x0004) [0x0000000000200003]              ( CPF_Edit | CPF_Const )
	struct FString                                     UserForgerName;                                   		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     DroppedLocation;                                  		// 0x0174 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                FolderID;                                         		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Level;                                            		// 0x0184 (0x0004) [0x0000000000000000]              
	int                                                StoredMana;                                       		// 0x0188 (0x0004) [0x0000000000000000]              
	int                                                UserID;                                           		// 0x018C (0x0004) [0x0000000000000000]              
	float                                              MyRatingPercent;                                  		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              MyRating;                                         		// 0x0194 (0x0004) [0x0000000000000000]              
	int                                                EquipmentID1;                                     		// 0x0198 (0x0004) [0x0000000000000000]              
	int                                                EquipmentID2;                                     		// 0x019C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1363 ];

		return pClassPointer;
	};

	float AccelInterp ( float Source, float Destination, float DeltaTime, float AccelRate, float InBrakingPercent, float InAirBrakingFriction, float InAirFriction, float InYawAccelSpeed, float* Velocity );
	float ContinousDistanceBetween ( float Source, float Destination );
	float ContinousInterp ( float Source, float Destination, float Alpha, unsigned long bIsConstant );
	struct UDunDefHeroManagerNative_FEquipmentSaveInfo GetSaveInfo ( );
	void CovertEquipementsToSaveInfos ( int InUserID, TArray< class UHeroEquipmentNative* > InEquipments, TArray< struct UDunDefHeroManagerNative_FEquipmentSaveInfo >* outInfos );
};

UClass* UHeroEquipmentNative::pClassPointer = NULL;

// Class UDKGame.HUDWidgetScene
// 0x0028 (0x05AC - 0x0584)
class UHUDWidgetScene : public UUIScene
{
public:
	TArray< class UHUDPrefabContainer* >               containers;                                       		// 0x0584 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UHUDPrefabContainer* >               dormantContainers;                                		// 0x0590 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              lastFrameTimeSeconds;                             		// 0x059C (0x0004) [0x0000000000000000]              
	float                                              LastRenderTimeOffset;                             		// 0x05A0 (0x0004) [0x0000000000000000]              
	class APlayerController*                           Owner;                                            		// 0x05A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInLobbyLevel : 1;                                		// 0x05A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1364 ];

		return pClassPointer;
	};

	void NotifyLocalPlayerRemoved ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void UIPostRender ( class UCanvas* C );
	void Update ( float DeltaTime );
	class UUIObject* DrawPrefab ( class UUIPrefab* withPrefab, class UObject* onInstance, struct FVector withTranslation, unsigned long centerAboutTranslation, struct FVector withTransform, struct FVector offsetPercents );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
};

UClass* UHUDWidgetScene::pClassPointer = NULL;

// Class UDKGame.NativeDunDefDamageableTarget
// 0x0000 (0x021C - 0x021C)
class ANativeDunDefDamageableTarget : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1365 ];

		return pClassPointer;
	};

	bool ActorHudProjection ( class AHUD* H, struct FVector actLocation, struct FVector IconWorldOffset, float IconScale, float IconWidthMultiplier, float IconHeightMultiplier, float DistanceDenominator, float DistanceScaleClampMin, struct FVector* ScreenPos, float* IconDistanceScale, float* IconWidth, float* IconHeight );
	void SortActorsByDistance ( struct FVector SortFromPosition, TArray< class AActor* >* UnsortedTargets );
};

UClass* ANativeDunDefDamageableTarget::pClassPointer = NULL;

// Class UDKGame.NativeDunDefEnemyController
// 0x005C (0x0438 - 0x03DC)
class ANativeDunDefEnemyController : public AEngineNativeDunDefAIController
{
public:
	unsigned long                                      UseDynamicActorsTargeting_SLOW : 1;               		// 0x03DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckIfTargetWithinPreventionVolumes : 1;        		// 0x03DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseScriptGetTargetingDesire : 1;                 		// 0x03DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseNativeFindTarget : 1;                         		// 0x03DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      AllowNewTarget : 1;                               		// 0x03DC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDebuggingTargets : 1;                            		// 0x03DC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bCallSetSetTargetInFindTargetIfSame : 1;          		// 0x03DC (0x0004) [0x0000000000000000] [0x00000040] 
	float                                              TargetingRangeLimitMultiplier;                    		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetingDistanceReductionFactorLinear;           		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetingDistanceReductionFactorExponent;         		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AggroFactorDesirabilityMultiplier;                		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AggroFactorDecreaseGracePeriod;                   		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AggroFactorDecreaseSpeed;                         		// 0x03F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            IgnoreTargets;                                    		// 0x03F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FDebugTargetList >                  DebugTargets;                                     		// 0x0404 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      Target;                                           		// 0x0410 (0x0004) [0x0000000000000000]              
	TArray< struct FClassTargetingMultiplier >         ClassTargetingMultipliers;                        		// 0x0414 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FActorTargetingMultiplier >         ActorTargetingMultipliers;                        		// 0x0420 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAggroEntry >                       AggroEntries;                                     		// 0x042C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1366 ];

		return pClassPointer;
	};

	float eventScriptGetTargetingDesire ( class AActor* testTarget );
	float GetTargetingDesire ( class AActor* testTarget );
	class AActor* FindTarget ( unsigned long bDontSetAsTarget, unsigned long onlyPickSpecifiedClass, class UClass* specifiedClass );
	class AActor* NativeFindTarget ( unsigned long bDontSetAsTarget, unsigned long onlyPickSpecifiedClass, class UClass* specifiedClass );
	float GetTargetingMultiplier ( class AActor* ActorRef, float baseDesirability );
	float GetAggroDesirability ( class AActor* testTarget );
	bool eventIsWithinTargetingPreventionVolume ( class AActor* testTarget );
	void eventSetTarget ( class AActor* NewTarget, unsigned long bDontClearIgnoreList );
};

UClass* ANativeDunDefEnemyController::pClassPointer = NULL;

// Class UDKGame.NativeDunDefGameReplicationInfo
// 0x0040 (0x02BC - 0x027C)
class ANativeDunDefGameReplicationInfo : public AGameReplicationInfo
{
public:
	float                                              EnemyTargetingDistanceLimit;                      		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              MinFloatingDamageCameraDot;                       		// 0x0280 (0x0004) [0x0000000000000000]              
	TArray< struct FFloatingDamageEntry >              FloatingDamageEntries;                            		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFont*                                       DamageTextFriendlyFont;                           		// 0x0290 (0x0004) [0x0000000000000000]              
	class UFont*                                       DamageTextEnemyFont;                              		// 0x0294 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                DamageTextNormalGradientColor;                    		// 0x0298 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                DamageTextEnemyGradientColor;                     		// 0x02A8 (0x0010) [0x0000000000000000]              
	unsigned long                                      bShowFloatingDamageNumbers : 1;                   		// 0x02B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1367 ];

		return pClassPointer;
	};

	void DrawMyHUD ( class ADunDefHUD* H );
	void DrawFloatingNumbers ( class ANativeDunDefHUD* H );
	void UpdateFloatingDamageEntries ( float DeltaTime );
};

UClass* ANativeDunDefGameReplicationInfo::pClassPointer = NULL;

// Class UDKGame.NativeDunDefHero
// 0x0000 (0x003C - 0x003C)
class UNativeDunDefHero : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1368 ];

		return pClassPointer;
	};

	void eventRemoveEquipment ( class UHeroEquipmentNative* equipmentNative, unsigned long DoNotDrop );
};

UClass* UNativeDunDefHero::pClassPointer = NULL;

// Class UDKGame.NativeDunDefHUD
// 0x0004 (0x094C - 0x0948)
class ANativeDunDefHUD : public AHUD
{
public:
	unsigned long                                      ShowFloatingDamageNumbers : 1;                    		// 0x0948 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1369 ];

		return pClassPointer;
	};

};

UClass* ANativeDunDefHUD::pClassPointer = NULL;

// Class UDKGame.NativeDunDefPlayerReplicationInfo
// 0x0004 (0x02D8 - 0x02D4)
class ANativeDunDefPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	unsigned long                                      bIsTalking : 1;                                   		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1370 ];

		return pClassPointer;
	};

	void UpdatePlayerTalking ( struct FUniqueNetId PlayerNetId, unsigned long isTalking );
};

UClass* ANativeDunDefPlayerReplicationInfo::pClassPointer = NULL;

// Class UDKGame.NativeMain
// 0x001C (0x03AC - 0x0390)
class ANativeMain : public AGameInfo
{
public:
	class UClass*                                      DefaultDunDefController;                          		// 0x0390 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            TargetableActors;                                 		// 0x0394 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UClass* >                            EnemyTargetingClassesToIgnore;                    		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1371 ];

		return pClassPointer;
	};

	bool IsCurrentMapMod ( );
	bool HasPendingInvite ( );
	int GetNumPrimaryDunDefPlayers ( unsigned long onlyCountPlayersThatHaveSpawned );
	int GetNumNonLocalDunDefPlayers ( unsigned long onlyCountPlayersThatHaveSpawned );
	bool IsMacOS ( );
	int GetNumDunDefPlayers ( unsigned long onlyCountPlayersThatHaveSpawned, unsigned long OnlyCountLocalPlayers );
};

UClass* ANativeMain::pClassPointer = NULL;

// Class UDKGame.ProfanityFilter
// 0x0000 (0x003C - 0x003C)
class UProfanityFilter : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1372 ];

		return pClassPointer;
	};

	struct FString Dirty ( struct FString testString );
	void Init ( );
};

UClass* UProfanityFilter::pClassPointer = NULL;

// Class UDKGame.SaveHelper
// 0x01CC (0x0208 - 0x003C)
class USaveHelper : public UObject
{
public:
	TArray< int >                                      userIDs;                                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              deviceSelectorDelay;                              		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FDouble                                     SaveTimers[ 0x5 ];                                		// 0x004C (0x0028) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     CachedMOTD;                                       		// 0x0074 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     MSG_MidGameLoadTitle;                             		// 0x0080 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_MidGameLoadMessage;                           		// 0x008C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_NoSaveDeviceTitle;                            		// 0x0098 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_NoSaveDeviceMessage;                          		// 0x00A4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CouldNotLoadTitle;                            		// 0x00B0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CouldNotLoadMessage;                          		// 0x00BC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_DeviceRemovedTitle;                           		// 0x00C8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_DeviceRemovedMessage;                         		// 0x00D4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_DeviceFoundTitle;                             		// 0x00E0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_DeviceFoundMessage;                           		// 0x00EC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_NotEnoughSpaceTitle;                          		// 0x00F8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_NotEnoughSpaceMessage;                        		// 0x0104 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FQueuedSave                                 CurrentWrite[ 0x4 ];                              		// 0x0110 (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NeedsWrite[ 0x4 ];                                		// 0x0160 (0x0010) [0x0000000000000000]              
	int                                                SavingActive;                                     		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                ValidLoad[ 0x4 ];                                 		// 0x0174 (0x0010) [0x0000000000000000]              
	int                                                LoadedGUID[ 0x4 ];                                		// 0x0184 (0x0010) [0x0000000000000000]              
	int                                                FoundSave[ 0x4 ];                                 		// 0x0194 (0x0010) [0x0000000000000000]              
	int                                                HasSetDefaultOptions[ 0x4 ];                      		// 0x01A4 (0x0010) [0x0000000000000000]              
	int                                                HasSaved[ 0x4 ];                                  		// 0x01B4 (0x0010) [0x0000000000000000]              
	int                                                SaveError[ 0x4 ];                                 		// 0x01C4 (0x0010) [0x0000000000000000]              
	int                                                HasShownSaveError[ 0x4 ];                         		// 0x01D4 (0x0010) [0x0000000000000000]              
	int                                                ShowDeviceRequests[ 0x4 ];                        		// 0x01E4 (0x0010) [0x0000000000000000]              
	int                                                ShowDeviceModulo;                                 		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                MultipleSaves[ 0x4 ];                             		// 0x01F8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1373 ];

		return pClassPointer;
	};

	void eventAZURE_LoadfileFailure ( );
	void eventAZURE_KeepAliveFailure ( );
	void eventAZURE_LoginDuplicateError ( );
	void eventAZURE_BannedError ( );
	void eventAZURE_LoginSuccessful ( struct FString MessageOfDay );
	void eventAZURE_DataLoaded ( );
	void eventAZURE_SeriousError ( );
	void eventAZURE_UnEndedItemPurchaseSuccess ( TArray< struct FPurchasedItem > UnEndedPurchase );
	void eventAZURE_ItemPurchaseFailure ( int OrderID, int ItemId, int itemQuantity );
	void eventAZURE_ItemPurchaseSuccess ( int OrderID, int ItemId, int itemQuantity );
	struct FString GetSteamID ( );
	void TriggerHttpEvent ( struct FString URL, struct FString Arguments, unsigned long IsPost );
	struct FString GenerateCompressedValidURL ( struct FString InString );
	bool IsAppPurchased ( int AppID, unsigned long bIsDLC );
	void GetUnEndedPurchasedItem ( );
	void EndItemPurchaseFromStore ( int OrderID );
	void BuyItemFromStore ( int ItemId, int itemQuantity, int itemPrice, struct FString itemDescription, struct FString itemCategory );
	void EndRemoteConnection ( );
	void AcquireRemoteConnection ( );
	bool ProcessMobileConversion ( TArray< struct UDunDefHeroManagerNative_FHeroAndEquipment >* Heroes, int* mana, TArray< struct UDunDefHeroManagerNative_FEquipmentSaveInfo >* ItemBoxEquipment, TArray< struct UDunDefHeroManagerNative_FEquipmentSaveInfo >* LobbyEquipment );
	bool HasMobileConversion ( );
	bool LoadStorageFile ( int UserID, unsigned long bUseBackup, class UObject* GameStorage, class UStatSystem* Stats, unsigned long bIsRemote, unsigned long bUseSteamCloud );
	void SaveStorageFile ( int UserID, class UObject* GameStorage, class UStatSystem* Stats, unsigned long bIsRemote );
	void SavingStorageTimerEnd ( int TimerID );
	void SavingStorageTimerBegin ( int TimerID );
	void DoWork ( );
	void Update ( );
	void OpenWebPage ( struct FString URL );
	void ShowLoginUI ( unsigned long bWithGuest );
	TArray< int > GetUserIDs ( );
	void ShowUserList ( int PlayerIndex );
	bool IsSignedIn ( int UserID, unsigned long requireLive );
	int GetGuestSponsor ( int UserID );
	bool IsUserGuest ( int UserID );
	void ClearDeviceCacheForUser ( int UserID );
	void SetupDeviceSelectorDelay ( int UserID );
	void ClearDeviceSelectionDelegates ( );
	void SetupDeviceSelectionDelegates ( );
	void OnSubscribedMapUpdate ( unsigned long bWasSuccessful );
	void NotifyStorageDeviceChanged ( );
	void deviceReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void deviceSelectedFour ( unsigned long bWasSuccessful );
	void deviceSelectedThree ( unsigned long bWasSuccessful );
	void deviceSelectedTwo ( unsigned long bWasSuccessful );
	void deviceSelectedOne ( unsigned long bWasSuccessful );
	void ShowDeviceSelectorUI ( int whichController );
	void PromptClosed ( int whichController );
	bool WantsDeviceSelector ( class UUI_MessageBox* theMessageBox, struct FString ButtonPressed, int whichPlayer );
	void DeviceSelectorPromptClosed ( class UUI_MessageBox* theMessageBox );
	void eventShowSaveError ( );
	void deviceSelected ( int whichController, unsigned long bWasSuccessful );
	bool HasSave ( int UserID );
	bool IsSaving ( );
	void ReEnumerateContent ( int ControllerId );
	void UsedFoundStorageDevice ( int ControllerId );
	void BootBackToMenu ( unsigned long BootWithDisconnect, int ControllerId );
	void OnLoginChangeDelegate ( unsigned char ControllerId );
	void LoadToMainMenu ( class ULocalPlayer* thePlayer );
	void UsedStorageDeviceDisconnected ( int ControllerId );
	bool DeviceRemovedResponse ( class UUI_MessageBox* theMessageBox, struct FString ButtonPressed, int whichPlayer );
	void OnLoginChange ( int UserID );
	void eventRegisterUserID ( int PlayerIndex, int UserID, int GuestID, struct FString NickName );
};

UClass* USaveHelper::pClassPointer = NULL;

// Class UDKGame.StatObjectDataContainer
// 0x000C (0x0048 - 0x003C)
class UStatObjectDataContainer : public UObject
{
public:
	TArray< struct FSStatObject >                      StatObjects;                                      		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1374 ];

		return pClassPointer;
	};

};

UClass* UStatObjectDataContainer::pClassPointer = NULL;

// Class UDKGame.StatSystem
// 0x0060 (0x009C - 0x003C)
class UStatSystem : public UObject
{
public:
	TArray< struct FStatClass >                        statClasses;                                      		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FStatPlayer >                       Players;                                          		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FStatPlayerMetaData >               bestOfMetadata;                                   		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FStatBuffer                                 currentBuffer;                                    		// 0x0060 (0x0020) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FStatBuffer >                       storedBuffers;                                    		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             findNameArray;                                    		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      shouldBeRecording : 1;                            		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1375 ];

		return pClassPointer;
	};

	int GetAward ( int whichAward );
	TArray< struct FStatEntry > GetCumulativeStats ( int StatClassIndex, struct FString BufferName, int bufferIndex );
	bool HasStats ( struct FString BufferName, int bufferIndex );
	bool CreateFromArray ( TArray< int > fromArray, unsigned long bUseCompression );
	void CreateProxyBuffer ( struct FStatProxyBuffer* InBuffer );
	TArray< int > SerializeIntoArray ( unsigned long bUseCompression );
	TArray< struct FStatEntry > GetStoredStats ( int StatClassIndex, struct FString BufferName, int bufferIndex );
	TArray< struct FStatEntry > GetEventStats ( struct FString BufferName, int bufferIndex );
	void ClearStoredStats ( int StatClassIndex, int PC, struct FString fromBuffer, struct FName SplitName );
	void PurgeTotalBuffers ( );
	int QueryAccumulatedStatForCurrentBuffer ( int StatClassIndex, int PC, struct FName SplitName );
	int QueryAccumulatedStat ( int StatClassIndex, int PC, struct FName SplitName, struct FString fromBuffer, int fromBufferIndex, unsigned long bRequiredFromStored );
	void ConglomerateEventAlongTimeline ( int StatClassIndex, float StartTime, float EndTime, int numBuckets );
	int GetFirstStatWriter ( int StatClassIndex );
	int GetLastStatWriter ( int StatClassIndex );
	void CheckTimeBasedAward ( int StatClassIndex, int numEventsForAward, float timeForAward, int awardStatClassIndex );
	void eventReportGameStat ( int StatClassIndex, int Value, class APlayerController* PC, struct FName SplitName, float Time, unsigned long sharedStat );
	void ReportStat ( int StatClassIndex, int Value, class APlayerController* PC, struct FName SplitName, float Time, unsigned long sharedStat );
	bool IsStatRecording ( );
	void StopStatRecording ( );
	void StartStatRecording ( struct FString BufferName, int bufferIndex );
	struct FString eventGetStatPlayerName ( class APlayerController* PC );
	void eventStatPlayerAdded ( class APlayerController* PC, int Index );
	bool HasBestOfValue ( int StatClassIndex, struct FString BufferName, int bufferIndex );
	struct FStatEntry GetBestOfEntry ( int StatClassIndex, struct FString BufferName, int bufferIndex );
	bool GetBestOfMetadata ( int StatClassIndex, struct FString BufferName, int bufferIndex, struct FName dataKey, struct FString* DataValue );
	void SetBestOfMetadata ( struct FName dataKey, struct FString DataValue );
	bool GetPlayerMetadata ( int PlayerIndex, struct FName dataKey, struct FString* DataValue );
	bool SetPlayerMetadata ( int PlayerIndex, struct FName dataKey, struct FString DataValue );
	void AddStatPlayer ( class APlayerController* PC, struct FString PlayerName );
};

UClass* UStatSystem::pClassPointer = NULL;

// Class UDKGame.TextComponent
// 0x0032 (0x01F6 - 0x01C4)
class UTextComponent : public UPrimitiveComponent
{
public:
	struct FString                                     TextOut;                                          		// 0x01C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInterface*                          TextMaterial;                                     		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       TextFont;                                         		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      TextColor;                                        		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFaceScreen : 1;                                  		// 0x01DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FVector2D                                   MaximumWorldSpace2DBounds;                        		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoundsExtent;                                     		// 0x01E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Alignment;                                        		// 0x01F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VerticalAlignment;                                		// 0x01F5 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1376 ];

		return pClassPointer;
	};

};

UClass* UTextComponent::pClassPointer = NULL;

// Class UDKGame.UDKGamePawn
// 0x00E4 (0x056C - 0x0488)
class AUDKGamePawn : public APawn
{
public:
	unsigned long                                      bClientUseRotationInterpolation : 1;              		// 0x0488 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseRotationInterpolation : 1;                    		// 0x0488 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseLocationInterpolation : 1;                    		// 0x0488 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNativeCalculateSpeed : 1;                        		// 0x0488 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bNativeCalculateAirSpeed : 1;                     		// 0x0488 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSetLocationInterpolation : 1;                    		// 0x0488 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bClientHasSetRotation : 1;                        		// 0x0488 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      Dead : 1;                                         		// 0x0488 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      TurnAnimationUseConstantSpeed : 1;                		// 0x0488 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseTurnDirectionBlender : 1;                     		// 0x0488 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUseUpperBodyCustomAnims : 1;                     		// 0x0488 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDoUseTurnBlender : 1;                            		// 0x0488 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bClampLookAtPitch : 1;                            		// 0x0488 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bClampLookAtYaw : 1;                              		// 0x0488 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bUseConstantMeshInterpolation : 1;                		// 0x0488 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bConstantLocInterpUseZLerp : 1;                   		// 0x0488 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	float                                              ClientRotationInterpSpeed;                        		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TheLocInterpSpeed;                                		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLocInterpDistance;                             		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolatedMeshDrawScale;                        		// 0x0498 (0x0004) [0x0000000000000000]              
	struct FVector                                     MeshInterpLoc;                                    		// 0x049C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeBlend*                              TurnInPlaceActiveBlender;                         		// 0x04A8 (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              TurnWhileMovingActiveBlender;                     		// 0x04AC (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              TurnDirectionBlender;                             		// 0x04B0 (0x0004) [0x0000000000000000]              
	struct FName                                       TurnInPlaceActiveBlenderName;                     		// 0x04B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TurnWhileMovingActiveBlenderName;                 		// 0x04BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceMinDeltaYaw;                           		// 0x04C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeScalePlayRate*                      TurnInPlaceSpeedScaler;                           		// 0x04C8 (0x0004) [0x0000000000000000]              
	struct FName                                       TurnInPlaceSpeedScalerName;                       		// 0x04CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceSpeedDivision;                         		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceBlendInTime;                           		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceBlendOutTime;                          		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnWhileMovingBlendAmount;                       		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceAnimSpeedScalar;                       		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnDirectionBlendTime;                           		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LocInterpSpeedBase;                               		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LocInterpSpeedZ;                                  		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LookAtTargetOffset;                               		// 0x04F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLookAtDeltaDegrees;                            		// 0x0500 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLookAtPitchDegrees;                            		// 0x0504 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLookAtPitchDegrees;                            		// 0x0508 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLookAtYawDegrees;                              		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLookAtYawDegrees;                              		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MovementSpeedMultiplier;                          		// 0x0514 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              MyMovementSpeedMultiplier;                        		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraMovementSpeedMultiplier;                     		// 0x051C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BaseGroundSpeed;                                  		// 0x0520 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AnotherExtraMovementSpeedMultiplier;              		// 0x0524 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BaseAirSpeed;                                     		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAnimNodePlayCustomAnim* >           CustomAnimNodes;                                  		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimNodePlayCustomAnim* >           UpperBodyCustomAnimNodes;                         		// 0x0538 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DesiredLookAtYaw;                                 		// 0x0544 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentLookAtYaw;                                 		// 0x0548 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DesiredLookAtPitch;                               		// 0x054C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentLookAtPitch;                               		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PreviousLocation;                                 		// 0x0554 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviousTurnInPlaceYaw;                           		// 0x0560 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PathNodeID;                                       		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              lastPawnRubTime;                                  		// 0x0568 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1377 ];

		return pClassPointer;
	};

	struct FRotator GetInterpolatedRotation ( );
	struct FVector GetInterpolatedLocation ( );
	struct FVector IsolatedCalculateVelocity ( struct FVector InCurrentVelocity, struct FVector InAcceleration, float InMaxSpeed, float InFriction, float InAnisotropicFriction, float InDeltaTime );
	bool IsPlayingCustomAnim ( struct FName inAnim, float TimeFromEndToConsiderFinished );
	void UpdateLookAtAngles ( struct FVector TargetLoc );
	void DrawFloatingName ( class AHUD* H, class UFont* theFont, struct FColor theDrawcolor, struct FVector WorldLoc, struct FString PlayerName, struct FString HeroName, float theScale );
	bool GetAutoAimWeight ( class AActor* CurrentTarget, float checkRange, float MinAutoAimDot, float MinimumDotOverride, float AutoAimDotWeight, float TargetingDesirability, float* AimWeight );
	void UpdateTurnBlender ( float DeltaTime, struct FRotator YawRotationToCheck, unsigned long bUseTurnBlender );
	struct FRotator UpdateTransformInterpolation ( float DeltaTime );
	float GetSeededFRand ( unsigned char Seed );
};

UClass* AUDKGamePawn::pClassPointer = NULL;

// Class UDKGame.UILineGraph
// 0x002C (0x04A0 - 0x0474)
class UUILineGraph : public UUIObject
{
public:
	TArray< struct FLineGraphLine >                    lines;                                            		// 0x0474 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector2D                                   MaxValue;                                         		// 0x0480 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   MinValue;                                         		// 0x0488 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          lineMaterial;                                     		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   PaddingPercent;                                   		// 0x0494 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUIResolutionContainer*                      rezContainer;                                     		// 0x049C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1378 ];

		return pClassPointer;
	};

};

UClass* UUILineGraph::pClassPointer = NULL;

// Class UDKGame.UIResolutionContainer
// 0x0040 (0x04B8 - 0x0478)
class UUIResolutionContainer : public UUIContainer
{
public:
	TArray< struct FResolutionFitting >                fittings;                                         		// 0x0478 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FResolutionFitting >                altFittings;                                      		// 0x0484 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      fittingAlignmentHorz;                             		// 0x0490 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      fittingAlignmentVert;                             		// 0x0491 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      emulateResType;                                   		// 0x0492 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                currentFitting;                                   		// 0x0494 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	float                                              currentFittingScale;                              		// 0x0498 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	TArray< struct FResolutionFitting >                tempFittings;                                     		// 0x049C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FResolutionFitting >                tempAltFittings;                                  		// 0x04A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MyUIScalePercent;                                 		// 0x04B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1379 ];

		return pClassPointer;
	};

	void UpdateUIScalePercent ( float newUIScalePct );
};

UClass* UUIResolutionContainer::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget
// 0x0020 (0x04CC - 0x04AC)
class UUIScriptWidget : public UUIImage
{
public:
	class USurface*                                    PreviewImage;                                     		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      WhiteColor;                                       		// 0x04B0 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                WhiteLinearColor;                                 		// 0x04B4 (0x0010) [0x0000000000000000]              
	class UCanvas*                                     CanvasObject;                                     		// 0x04C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      needsMatFlush : 1;                                		// 0x04C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1380 ];

		return pClassPointer;
	};

	void EndUIDrawing ( class UCanvas* C );
	struct FLinearColor GetBackgroundDrawColor ( );
	void UIDraw ( class UCanvas* C, class USurface* surf, float XL, float YL, struct FLinearColor LinColor, unsigned long FlushMaterial );
	void BeginUIDrawing ( class UCanvas* C );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void eventRenderEditor ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
};

UClass* UUIScriptWidget::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_Button
// 0x0130 (0x05C4 - 0x0494)
class UUIScriptWidget_Button : public UUIButton
{
public:
	class USurface*                                    ButtonBackground;                                 		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    FocusedButtonBackground;                          		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseDisplayString : 1;                            		// 0x049C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisplayStringScaleToFit : 1;                     		// 0x049C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bWrapText : 1;                                    		// 0x049C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bScaleTextByResolution : 1;                       		// 0x049C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsClickable : 1;                                 		// 0x049C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bForceOnlyStyleDrawColor : 1;                     		// 0x049C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSupportsDraggedOntoRendering : 1;                		// 0x049C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseTooltip : 1;                                  		// 0x049C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bPreviewTooltip : 1;                              		// 0x049C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bCenterToolTipX : 1;                              		// 0x049C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bCenterToolTipY : 1;                              		// 0x049C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDrawToolTipBG : 1;                               		// 0x049C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      WrapToolTipText : 1;                              		// 0x049C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bOffsetToolTipFromOwner : 1;                      		// 0x049C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      isEditorRender : 1;                               		// 0x049C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      needsMatFlush : 1;                                		// 0x049C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bRenderingDraggable : 1;                          		// 0x049C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	struct FVector2D                                   DisplayStringPadding;                             		// 0x04A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplayStringMinScale;                            		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplayPostFitScaleMultiplier;                    		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     displayString;                                    		// 0x04B0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UFont*                                       TextFont;                                         		// 0x04BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      TextColor;                                        		// 0x04C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextScale;                                        		// 0x04C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TextGradientColor;                                		// 0x04C8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DisabledBGColor;                                  		// 0x04D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DisabledTextColor;                                		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DisabledTextGradientColor;                        		// 0x04EC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                BackgroundColor;                                  		// 0x04FC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DragColorMultiply;                                		// 0x050C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FocusedBGColor;                                   		// 0x051C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              PressedScaleMultiplier;                           		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PressedXOffset;                                   		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PressedYOffset;                                   		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextShadowScaleMultiplier;                        		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomData;                                       		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomDataTwo;                                    		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipTextShadowScaleMultiplier;                 		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipCenterOffsetX;                             		// 0x0548 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipCenterOffsetY;                             		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TooltipBGPaddingX;                                		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TooltipBGPaddingY;                                		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipTextScale;                                 		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USurface* >                          TooltipBGs;                                       		// 0x055C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFont*                                       ToolTipTextFont;                                  		// 0x0568 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MyTooltipString;                                  		// 0x056C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              TooltipFadeInSpeed;                               		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TooltipFadeOutSpeed;                              		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipTextColor;                                 		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ToolTipBgColor;                                   		// 0x0584 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              WrapToolTipTextWidth;                             		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WrapToolTipTextHeight;                            		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipOpacity;                                   		// 0x059C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      WhiteColor;                                       		// 0x05A0 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                WhiteLinearColor;                                 		// 0x05A4 (0x0010) [0x0000000000000000]              
	class UCanvas*                                     CanvasObject;                                     		// 0x05B4 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __NotifyWidgetClicked__Delegate;                  		// 0x05B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1381 ];

		return pClassPointer;
	};

	void EndUIDrawing ( class UCanvas* C );
	void UIDrawRotated ( class UCanvas* C, class USurface* surf, float XL, float YL, struct FRotator TheRotation, struct FLinearColor LinColor, unsigned long FlushMaterial );
	void UIDraw ( class UCanvas* C, class USurface* surf, float XL, float YL, struct FLinearColor LinColor, unsigned long FlushMaterial );
	void BeginUIDrawing ( class UCanvas* C );
	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	bool NotifyWidgetClicked ( class UUIObject* Widget );
	struct FString GetToolTipString ( );
	struct FLinearColor GetToolTipBGColor ( );
	struct FColor GetToolTipTextColor ( );
	void DrawToolTip ( class UCanvas* C, float X1, float X2, float Y1, float Y2, float ScaleX, float ScaleY );
	class USurface* GetToolTipBG ( float AspectRatio );
	void GetToolTipTextBlocks ( TArray< struct FTextEx >* TextBlocks );
	class USurface* GetBackgroundImage ( );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	bool SupportsDraggedOntoItem ( class UUIScriptWidget_Button* DraggedItem );
	void ApplyRenderOffsets ( class UCanvas* C, float* X1, float* X2, float* Y1, float* Y2 );
	bool IsClickable ( );
	bool GetIsPressed ( );
	float GetScaleMultiplier ( );
	bool GetFocused ( unsigned long IgnoreTopLevelScene );
	struct FColor GetTextDrawColor ( unsigned long bEnabled );
	struct FLinearColor GetFocusedBGColor ( );
	struct FLinearColor GetBackgroundDrawColor ( unsigned long bEnabled );
	struct FVector GetCurrentMatrixScale ( class UCanvas* C );
	struct FVector ApplyCurrentScreenMatrix ( class UCanvas* C, struct FVector onVector );
	void eventRenderEditor ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
};

UClass* UUIScriptWidget_Button::pClassPointer = NULL;

// Class UDKGame._DataTypes
// 0x0018 (0x0054 - 0x003C)
class U_DataTypes : public UObject
{
public:
	struct FScriptDelegate                             __ItemSortComparer__Delegate;                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PetSizeSortComparer__Delegate;                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36708 ];

		return pClassPointer;
	};

	bool SizeCompare ( class UHeroEquipment* A, class UHeroEquipment* B );
	bool LevelCompare ( class UHeroEquipment* A, class UHeroEquipment* B );
	bool NameCompare ( class UHeroEquipment* A, class UHeroEquipment* B );
	bool ManaCompare ( class UHeroEquipment* A, class UHeroEquipment* B );
	bool RatingCompare ( class UHeroEquipment* A, class UHeroEquipment* B );
	bool QualityCompare ( class UHeroEquipment* A, class UHeroEquipment* B );
	bool TypeCompare ( class UHeroEquipment* A, class UHeroEquipment* B );
	int TypeScoreHeroEquipment ( class UHeroEquipment* A );
	void Merge ( int Low, int Mid, int High, struct FScriptDelegate comparer, TArray< class UHeroEquipment* >* arr );
	void MergeSortPets ( int Low, int High, struct FScriptDelegate comparer, TArray< class UHeroEquipment* >* arr );
	void MergeSortItems ( int Low, int High, struct FScriptDelegate comparer, TArray< class UHeroEquipment* >* arr );
	bool PetSizeSortComparer ( class UHeroEquipment_Familiar* A, class UHeroEquipment_Familiar* B );
	bool ItemSortComparer ( class UHeroEquipment* A, class UHeroEquipment* B );
	struct FHQArray InitializeHQArray ( TArray< class UHeroEquipment* > A );
	struct FString GraphicsQualtyToString ( unsigned char aGraphicsQualitybyte );
	unsigned char GraphicsQualtyToByte ( struct FString aGraphicsQualityString );
	struct FString SortingFilterToString ( unsigned char aSortingFilterByte );
	unsigned char SortingFilterToByte ( struct FString aSortingFilterString );
};

UClass* U_DataTypes::pClassPointer = NULL;

// Class UDKGame.DunDefDamageableTarget
// 0x02EC (0x0508 - 0x021C)
class ADunDefDamageableTarget : public ANativeDunDefDamageableTarget
{
public:
	int                                                Health;                                           		// 0x021C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                MaxHealth;                                        		// 0x0220 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              BaseMaxHealth;                                    		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              TargetingDesirability;                            		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DTHealthMultiplier;                               		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TowerTargetingDesirability;                       		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     HurtEffectTemplate;                               		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     DiedEffectTemplate;                               		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DescriptiveName;                                  		// 0x023C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   TheHealthHUDMatTemplate;                          		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPlayerTargetRange;                             		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DrawHealthBar : 1;                                		// 0x0250 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawHealthBarAtMaxHealth : 1;                    		// 0x0250 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceDrawHud : 1;                                		// 0x0250 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      DisplayToolTip : 1;                               		// 0x0250 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInvincibleInBuildPhase : 1;                      		// 0x0250 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bForcePlayerTarget : 1;                           		// 0x0250 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAutoControlSimulatedPosition : 1;                		// 0x0250 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      IsDead : 1;                                       		// 0x0250 (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCanBePlayerEnemy : 1;                            		// 0x0250 (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      UseHealthbarMaterial : 1;                         		// 0x0250 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPlayedDeathEffect : 1;                           		// 0x0250 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDidSetPlayerTargetableStatus : 1;                		// 0x0250 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bDidLowHealthEffects : 1;                         		// 0x0250 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      DoFadeOut : 1;                                    		// 0x0250 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bCalledBaseChange : 1;                            		// 0x0250 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bAllowSuction : 1;                                		// 0x0250 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bChainIgnore : 1;                                 		// 0x0250 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bIsWebbed : 1;                                    		// 0x0250 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	float                                              HealthBarScale;                                   		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthBarWidth;                                   		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthBarHeight;                                  		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HealthBarPositionOffset;                          		// 0x0260 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetingAttackRangeOffset;                       		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerTargetingDesirability;                      		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    LowHealthParticleEffect;                          		// 0x0274 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LowHealthParticlePercentThreshold;                		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HealthyColor;                                     		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WhiteHealthColor;                                 		// 0x0288 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     UnhealthyColor;                                   		// 0x0294 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             LowHealthSound;                                   		// 0x02A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     TargetingLocationOffset;                          		// 0x02A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationWeighting;                              		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationOffset;                                 		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NeedRepairHealthPercentThreshold;                 		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxNumberOfAttackers;                             		// 0x02BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NetFrequencyOverride;                             		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NetPriorityOverride;                              		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TargetingTeam;                                    		// 0x02C8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FString                                     SummonedByString;                                 		// 0x02CC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FVector                                     ToolTipScreenOffset;                              		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDamageAdjuster >                   DamageAdjusters;                                  		// 0x02E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LightningTowerDamagePercent;                      		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Attackers;                                        		// 0x02F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastTakeDamageTime;                               		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MyHealthHUDMatInstance;                           		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastHitLocation;                                  		// 0x0308 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviousHealthChange;                             		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      RedColor;                                         		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PreviousHealthPercent;                            		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxPlayerTargetRangeSq;                           		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFloatingTakeDamageTime;                       		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHurtEffectTime;                               		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentToolTipDrawOpacity;                        		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastToolTipDrawTime;                              		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageAdjustmentMultiplier;                       		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumVeryRecentDamages;                             		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SummonedString;                                   		// 0x033C (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FLinearColor                                HealDamageTextColor;                              		// 0x0348 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              AuraEffectScale;                                  		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalAuraEffectScale;                            		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ADunDefTower_Aura* >                 MyAffectingAuras;                                 		// 0x0360 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FAuraEffect                                 AuraEffects[ 0xA ];                               		// 0x036C (0x0050) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    AuraPSC[ 0xA ];                                   		// 0x03BC (0x0028) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class ADunDefTower_ChainLightning* >       ChainingTowers;                                   		// 0x03E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UDunDefBuff* >                       DefaultBuffsToSpawn;                              		// 0x03F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FActorLevelUpStatModifier                   Stats[ 0x7 ];                                     		// 0x03FC (0x00E0) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultBuffSpawnDelay;                            		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FActorLevelUpStatModifier >         CurrentActorLevelUpStatModifiers;                 		// 0x04E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UIActorModifierInterface*                    MyActorStatModifier;                              		// 0x04EC (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x04F0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned char                                      CurrentStatusEffect;                              		// 0x04F4 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FsLastDamageInfo                            LastDamageInfo;                                   		// 0x04F8 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36756 ];

		return pClassPointer;
	};

	float GetStatModifier ( unsigned char levelUpValue, unsigned long onlyReturnBaseValue );
	bool GetActorLevelUpStatModifier ( unsigned char Type, struct FActorLevelUpStatModifier* Modifier );
	void SetActorLevelUpStatModifier ( unsigned char Type, struct FActorLevelUpStatModifier Modifier );
	float CalculateStatValue ( float BaseValue, struct FActorLevelUpStatModifier* Modifier );
	void GetBuffedStatValue ( unsigned char levelUpValue, unsigned long bAdditivePass, float* buffVal );
	void SpawnDefaultBuffs ( );
	class UIActorModifierInterface* GetStatModifierObject ( );
	float GetStatValueByTag ( float initalValue, struct FString StatTag, class UIActorModifierInterface* TagActor, unsigned char statType, unsigned long bBaseValueOnly );
	void InitalizeActorStats ( class UIActorModifierInterface* ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly );
	bool HasStatusEffect ( unsigned char StatusToCheck );
	void RemoveStatusEffect ( unsigned char Status );
	void AddStatusEffect ( unsigned char Status );
	void AdjustDealtDamage ( class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum );
	void OnBuffRemoved ( class UObject* BuffRemoved );
	void OnBuffAdded ( class UObject* BuffAdded );
	void ReportBuffRemoved ( class UDunDefBuff* BuffRemoved );
	void ReportBuffAdded ( class UDunDefBuff* BuffAdded );
	void ReportActorDealtDamage ( int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage );
	void ReportTookDamage ( int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage );
	void ReportHealedActor ( int healedAmount, class AActor* healed );
	void ReportKilledActor ( class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem );
	float GetLightningTowerDamagePercent ( );
	void setIsWebbed ( unsigned long isWebbed );
	bool isWebbed ( );
	bool GetChainIgnore ( );
	void SetChainIgnore ( unsigned long ignore );
	bool IsBeingChainedBy ( class ADunDefTower_ChainLightning* Tower );
	void RemoveFromChainingTowers ( class ADunDefTower_ChainLightning* Tower );
	void AddToChainingTowers ( class ADunDefTower_ChainLightning* Tower );
	bool AllowSuction ( );
	struct FVector GetLocation ( );
	void PSCFinished ( class UParticleSystemComponent* PSystem );
	void RemoveAllAuraEffects ( );
	void HandleAuraEffects ( );
	void RemoveAuraEffect ( class ADunDefTower_Aura* AuraInstance );
	void AddAuraEffect ( class ADunDefTower_Aura* AuraInstance );
	bool IsFirstAuraOfType ( class ADunDefTower_Aura* AuraInstance );
	void StopAuraEffects ( );
	void ClientTakeDamage ( int DamageAmount, class APawn* InstigatorPawn, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void eventBaseChange ( );
	bool CanDetonate ( );
	void HealPctOfMaxHealth ( float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers );
	int GetHealth ( unsigned long bGetMax );
	void Detonate ( int SetDetonationsNumber );
	bool ForceMoveActor ( class AActor* Mover, struct FVector NewLoc );
	class UPrimitiveComponent* GetOverrideTargetComponent ( );
	void LocalTookDamage ( int DamageAmount, struct FVector atPosition, class UClass* fromDamageType );
	bool AllowDarknessIgnorance ( );
	bool ShouldBlockPlayerAim ( class APlayerController* PC );
	bool NeedsRepair ( unsigned long requireFullHealth );
	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	float GetMass ( );
	void eventEncroachedBy ( class AActor* Other );
	void ClientSingleSetMovement ( struct FVector endLoc, struct FRotator endRot, unsigned long bShouldCollideWorld );
	void ClientDisableMovementReplication ( struct FVector endedLoc );
	void DisableMovementReplication ( );
	void EnableMovementReplicationTimer ( float Time );
	void SetMovementReplication ( unsigned long replicateMovement );
	float GetActivationOffset ( );
	float GetActivationWeighting ( );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	struct FString GetToolTipText ( );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	void eventNotifyTookDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void PlayHitEffect ( class UClass* DamageType, struct FVector HitLocation );
	void NotifyHealthChange ( );
	void AddHealth ( int howMuch, unsigned long bDontDisplayFloatingNumber );
	void HandleDamageTypeEffects ( class UClass* ForDamageType, struct FVector HitLocation );
	void ShowHealingFloatingNumbers ( int howMuch );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void SubtractHealth ( int DamageAmount );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void AdjustDamage ( class UClass* DamageType, class AController* InstigatedBy, struct FVector HitLocation, struct FTraceHitInfo HitInfo, int* DamageAmount, struct FVector* Momentum );
	void PlayDeath ( );
	void Died ( class AController* EventInstigator, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser );
	void eventDestroyed ( );
	class ADunDefGameReplicationInfo* GetGRI ( );
	float GetHealthPercent ( );
	bool GetCanBePlayerEnemy ( );
	void SetPlayerTargetableStatus ( );
	void PostBeginPlay ( );
	struct FColor GetWhiteHealthColor ( );
	struct FColor GetHealthColor ( );
	bool DrawMyHUD ( class ADunDefHUD* H );
	bool OnlyDrawHUDForOwner ( );
	float DTGetEnemyTargetingDesirability ( class ADunDefEnemyController* forController );
	float DTGetTowerTargetingDesirability ( class ADunDefTower* forTower );
	float DTGetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	struct FVector GetInterpolatedTargetingLocation ( class AActor* RequestedBy );
	struct FVector GetTargetingLocation ( class AActor* RequestedBy );
	void OnDestroy_RemoveFromTargetableList ( );
	void OnPostBeginPlay_AddToTargetableList ( );
	void UnregisterAttacker ( class ADunDefEnemyController* forController );
	void RegisterAttacker ( class ADunDefEnemyController* forController );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	float GetAttackRangeOffset ( );
	bool IgnoreFriendlyFireDamage ( class UDunDefTargetableInterface* instigatorActor, class AController* OptionalController );
	int GetTargetingTeam ( );
	bool ForceFriendlyFire ( class AActor* Target );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefDamageableTarget::pClassPointer = NULL;

// Class UDKGame.DunDefTower
// 0x0310 (0x0818 - 0x0508)
class ADunDefTower : public ADunDefDamageableTarget
{
public:
	class UStaticMeshComponent*                        CollisionMesh;                                    		// 0x0508 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      TowerMesh;                                        		// 0x050C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0510 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ADunDefEmitterSpawnable*                     SpawnInEffectTemplate;                            		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     SellEffectTemplate;                               		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     LevelVictorySellEffectTemplate;                   		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     UpgradeEffectTemplate;                            		// 0x0520 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     DowngradeEffectTemplate;                          		// 0x0524 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnInScaleTime;                                 		// 0x0528 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CostOfTotalRepairWorthPercent;                    		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CostOfTotalRepair;                                		// 0x0530 (0x0004) [0x0000000000000000]              
	float                                              TimeOfTotalRepair;                                		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepairTimeMultiplier;                             		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellMarkdown;                                     		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepairSpeedMultiplier;                            		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TowerUnitCost;                                    		// 0x0544 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                ManaWorth;                                        		// 0x0548 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MiniMapIconTexture;                               		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CreatorHeroInPlayIcon;                            		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSize;                                  		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconFlashHealthPercentThreshold;           		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconFlashSpeed;                            		// 0x055C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconFlashSpeedBuildPhase;                  		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CreatorInActivePlayDamageMultiplier;              		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRotateMiniMapIcon : 1;                           		// 0x0568 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCantBeSold : 1;                                  		// 0x0568 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowOverlapWithCore : 1;                        		// 0x0568 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoSpawnEffect : 1;                               		// 0x0568 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShowRepairAbilityHealingNumbers : 1;             		// 0x0568 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAllowTargetingWhileInvincible : 1;               		// 0x0568 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bForceTopSelection : 1;                           		// 0x0568 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowCharging : 1;                               		// 0x0568 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowDesummoning : 1;                            		// 0x0568 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bOpenable : 1;                                    		// 0x0568 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      UseTowerRatingMaterial : 1;                       		// 0x0568 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bAllowPushing : 1;                                		// 0x0568 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDebugAutoBindToPlayer : 1;                       		// 0x0568 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bReportedSummoned : 1;                            		// 0x0568 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bKillOnBuildPhase : 1;                            		// 0x0568 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bAddedTowerUnits : 1;                             		// 0x0568 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bOldReportedSummoned : 1;                         		// 0x0568 (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      bDidSpawnEffect : 1;                              		// 0x0568 (0x0004) [0x0000000000000020] [0x00020000] ( CPF_Net )
	unsigned long                                      bInvisible : 1;                                   		// 0x0568 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bOverrideInstigatorHero : 1;                      		// 0x0568 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bDoDamageFlashing : 1;                            		// 0x0568 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bAllowFamiliarBoosting : 1;                       		// 0x0568 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bUsesAlternateDUCount : 1;                        		// 0x0568 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bAllowNegativeStatusAffect : 1;                   		// 0x0568 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bAllowTowerBuff : 1;                              		// 0x0568 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bDisplayDps : 1;                                  		// 0x0568 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bHideMiniMapTowers : 1;                           		// 0x0568 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	struct FColor                                      MiniMapLowHealthFlashColor;                       		// 0x056C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapLowHealthBuildPhaseFlashColor;             		// 0x0570 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AOEMultiplierScale;                               		// 0x0574 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepairTimeToHealthExponent;                       		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareRepairTimeToHealthExponent;              		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareHealthMultiplier;                        		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareDamageMultiplier;                        		// 0x0584 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CompetitiveDamageMultiplier;                      		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CompetitiveHealthMultiplier;                      		// 0x058C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTowerUpgradeStat >                 TowerUpgradeInfos;                                		// 0x0590 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      TowerUpgradeCosts;                                		// 0x059C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    TowerUpgradeTimes;                                		// 0x05A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaxUpgradeLevel;                                  		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        UpgradeLevelIconTextures;                         		// 0x05B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    UpgradeLevelIconSizes;                            		// 0x05C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ManaText;                                         		// 0x05D0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradeToText;                                    		// 0x05DC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      OverlayUpgradeIconColor;                          		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DiedMessageColor;                                 		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SummonedMessageColor;                             		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SoldMessageColor;                                 		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeMiniMapIconScale;                          		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeIconMiniMapOffsetPercent;                  		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumFireIntervalForDetailedTooltip;            		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    DifficultyHealthMultipliers;                      		// 0x0604 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyDamageMultipliers;                      		// 0x0610 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    UpgradeLinearMultipliersHealth;                   		// 0x061C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    UpgradeLinearMultipliersDamage;                   		// 0x0628 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaxDifficultySets;                                		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TowerDamageMultiplierExponent;                    		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackRateMultiplierExponent;                     		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AOEMultiplierExponent;                            		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthMultiplierExponent;                         		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementalIconSize;                                		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ManaToDrop;                                       		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    ManaToDropDifficultyMultipliers;                  		// 0x0650 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AttackRangeString;                                		// 0x065C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NumKillsString;                                   		// 0x0668 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PercentScaleString;                               		// 0x0674 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttackDamageString;                               		// 0x0680 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttackIntervalString;                             		// 0x068C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttackIntervalEndString;                          		// 0x0698 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TowerUnitCostString;                              		// 0x06A4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideDetailsString;                                		// 0x06B0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ShowDetailsString;                                		// 0x06BC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TowerKilledString;                                		// 0x06C8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TowerSummonedString;                              		// 0x06D4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TowerSoldString;                                  		// 0x06E0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UTexture2D*                                  StatIcon;                                         		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ToggleDetailsSound;                               		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalHealthBarScaleMult;                         		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DontTargetEnemiesWithElementType;                 		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackRateMultiplier;                             		// 0x06FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DamageMultiplier;                                 		// 0x0700 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReistanceMultiplier;                              		// 0x0704 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              HealthMultiplier;                                 		// 0x0708 (0x0004) [0x0000000000000000]              
	float                                              AOEMultiplier;                                    		// 0x070C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DamageMultiplierAdditional;                       		// 0x0710 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TowerBoostHealAmount;                             		// 0x0714 (0x0004) [0x0000000000000000]              
	int                                                TowerRatingMaterialIndex;                         		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NumStatPointsForMaxTowerRating;                   		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthBarTowerIconSize;                           		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              theTowerRangeScaler;                              		// 0x0724 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              TowerRating;                                      		// 0x0728 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LastTowerFallDamageTime;                          		// 0x072C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RepairIncrementFloat;                             		// 0x0730 (0x0004) [0x0000000000000000]              
	int                                                StartRepairHealth;                                		// 0x0734 (0x0004) [0x0000000000000000]              
	int                                                CreatedAtPhaseID;                                 		// 0x0738 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                UpgradeLevel;                                     		// 0x073C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                heroGUID1;                                        		// 0x0740 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                heroGUID2;                                        		// 0x0744 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                heroGUID3;                                        		// 0x0748 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                heroGUID4;                                        		// 0x074C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMaterialInstanceConstant*                   TowerRatingMaterialInstance;                      		// 0x0750 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefHero*                                 CreatorHero;                                      		// 0x0754 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UTowerBoosterInterface* >            TowerBoosters;                                    		// 0x0758 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UTowerBoosterInterface* >            TowerDeBoosters;                                  		// 0x0764 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ADunDefPlayerController*                     InstigatorController;                             		// 0x0770 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumKills;                                         		// 0x0774 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              currentInvisibleSightRange;                       		// 0x0778 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFlashingDamageTime;                           		// 0x077C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageFlashingDuration;                           		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageFlashingFadeExponent;                       		// 0x0784 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageFlashingIntensity;                          		// 0x0788 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageFlashingScalarParamName;                    		// 0x078C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetingAimOffset;                               		// 0x0794 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStatObject*                                 TowerStatModifierTemplate;                        		// 0x07A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FsActorStatDescription >            TowerStatDescriptionEntries;                      		// 0x07A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UIActorModifierInterface* >          CurrentTowerStatModifiers;                        		// 0x07B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UStatObject*                                 TowerStatModifier;                                		// 0x07BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ReplicatedStats[ 0x6 ];                           		// 0x07C0 (0x0048) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	float                                              minMinimapOpacity;                                		// 0x0808 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              minHealthOpacity;                                 		// 0x080C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              maxHealthOpacity;                                 		// 0x0810 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                maxDisplayedUpgrades;                             		// 0x0814 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36755 ];

		return pClassPointer;
	};

	void ChangedDifficulty ( unsigned char newDifficulty, unsigned char oldDifficulty );
	void DrawTowerToolTipActorStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float GetTowerHealth ( );
	float GetAttackInterval ( );
	float GetAttackDamage ( );
	float GetStatModifier ( unsigned char levelUpValue, unsigned long onlyReturnBaseValue );
	int GetStatValue ( unsigned char levelUpValue, unsigned long onlyBaseHeroValue, unsigned long onlyEquipmentValue, int* doesEquipmentModify );
	void RemoveTowerStatModifier ( class UIActorModifierInterface* oldModifier );
	void AddTowerStatModifier ( class UIActorModifierInterface* newModifier );
	class UIActorModifierInterface* GetStatModifierObject ( );
	float GetStatValueByTag ( float initalValue, struct FString StatTag, class UIActorModifierInterface* TagActor, unsigned char statType, unsigned long bBaseValueOnly );
	void UpdateReplicatedStats ( );
	void UpdateBuffValues ( );
	bool AllowAbilityMove ( );
	bool UsesRange ( );
	bool AllowNegativeStatusAffecting ( );
	bool AllowsFamiliarBoosting ( );
	void GetAlternateAggroActor ( class UDunDefTargetableInterface** AltActor );
	void GetSelectionLocation ( class AActor* wantsLocation, struct FVector* bestLoc );
	bool IsPhysicalTower ( );
	class AActor* GetAlternateActor ( );
	bool IsMultiActorTower ( );
	float GetGlobalTowerHealthMultiplier ( );
	void UpdateDamageFlashing ( );
	void LocalTookDamage ( int DamageAmount, struct FVector atPosition, class UClass* fromDamageType );
	void SetInvisible ( unsigned long bIsInvisible, float newSightRange );
	bool CanTargetInvisibleTarget ( class UDunDefTargetableInterface* aTarget );
	void AdjustDamage ( class UClass* DamageType, class AController* InstigatedBy, struct FVector HitLocation, struct FTraceHitInfo HitInfo, int* DamageAmount, struct FVector* Momentum );
	void ReportSold ( class ADunDefPlayerReplicationInfo* byWhom );
	void SetOldReportedSummoned ( );
	void ReportSummoned ( );
	void ReportedDeath ( );
	void KilledTarget ( class UDunDefTargetableInterface* aTarget );
	bool CanBeHealed ( int byTeam );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	bool ForceSingleMove ( struct FVector NewLoc, struct FRotator NewRot, unsigned long bShouldCollideWorld );
	bool ForceMoveActor ( class AActor* Mover, struct FVector NewLoc );
	bool AllowPushing ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void SellAllTowers ( );
	void DelayedTurnOffSkelUpdating ( );
	void ForceSkelUpdating ( unsigned long Force, float delayTurnOff );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void PerformFullHeal ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	struct FVector GetTowerToolTipLocation ( );
	float StaticGetTowerScale ( class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler );
	void InitTowerRatingMaterial ( );
	void UpdateTowerRatingMaterial ( );
	void RefreshTowerRating ( class UDunDefHero* hero );
	void DrawUpgradeOverlay ( class ADunDefHUD* H, float Opacity, struct FColor upgradeOverlayColor );
	int GetNextUpgradeLevel ( unsigned long bForceBeyondMaxUpgrade );
	int GetTimeToUpgradeTower ( );
	int GetCostToUpgradeTower ( );
	int GetTowerUpgradeLevelStatModifier ( unsigned char valueType );
	float StaticGetAttackRange ( class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler );
	float GetAttackRange ( );
	void Died ( class AController* EventInstigator, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser );
	void ChangedGamePhases ( unsigned long IsCombatPhase );
	void DestroyOwnerLeft ( );
	void TransferTowerOwnership ( class APawn* toPawn );
	float GetSellWorth ( );
	bool Sell ( class ADunDefPlayerController* PC );
	bool IsCreatorHeroInActivePlay ( class UDunDefHero** theCreatorHero );
	float GetDamageMultiplier ( );
	float GetPhysicalTowerDamageMultiplier ( );
	float GetPhysicalTowerHealthMultiplier ( );
	void ScaleForHeroModifiers ( unsigned long IsFirstTime );
	void CheckAssociateWithHero ( class UDunDefHero* hero, class ADunDefPawn* pawnInstigator, class ADunDefPlayerController* PC );
	bool AllowHeroGUID ( int GUID1, int GUID2, int GUID3, int GUID4 );
	void InitializeForInstigator ( class APawn* Pawn );
	void DoDowngrade ( );
	void DoUpgrade ( );
	bool CanBeUpgraded ( );
	void PlaySellFX ( );
	float IncrementRepair ( float CurrentMana, float DeltaTime );
	void DisableNetUpdateFrequency ( );
	float GetCurrentRepairPercentage ( float StartRepairTime, float RepairSpeed );
	void StartRepair ( );
	float GetTimeOfTotalRepair ( );
	float GetTimeToRepair ( );
	float GetCostToRepair ( );
	void eventDestroyed ( );
	bool NoWorldGeometryOccluding ( struct FVector End, struct FVector Start );
	void AutoBindToPlayer ( );
	void InitalizeStatObject ( );
	void eventPostBeginPlay ( );
	void TurnOffSpawnEffect ( );
	void DoSpawnEffect ( );
	void UpdateAI ( float DeltaTime );
	void eventReplicatedEvent ( struct FName VarName );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void DrawUpgradeIcons ( class UCanvas* C, float IconDistanceScale, struct FVector ScreenPos, float YOffset, float Opacity, unsigned long bIsMiniMap, class ADunDefMiniMap* MiniMap, struct FRotator tileRotation );
	class UClass* GetDamageType ( );
	bool DrawMyHUD ( class ADunDefHUD* H );
	bool HasBeenRendered ( );
	bool IsPreviousToolTipActor ( class ADunDefPlayerController* ownerCheck );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	void getMinimapDrawSettings ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	float GetLastDamageTime ( );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	float GetBoostAmount ( unsigned char boostType );
	class UTowerBoosterInterface* GetTowerBooster ( unsigned char boostType, float* boostValue );
	class UTowerBoosterInterface* GetTowerDeBooster ( unsigned char boostType, float* boostValue );
	void RemoveTowerDeBooster ( class UTowerBoosterInterface* aBooster, int indexOverride );
	void AddTowerDeBooster ( class UTowerBoosterInterface* aBooster );
	void RemoveTowerBooster ( class UTowerBoosterInterface* aBooster, int indexOverride );
	void AddTowerBooster ( class UTowerBoosterInterface* aBooster );
};

UClass* ADunDefTower::pClassPointer = NULL;

// Class UDKGame.DunDefTower_NonPhysical
// 0x0008 (0x0820 - 0x0818)
class ADunDefTower_NonPhysical : public ADunDefTower
{
public:
	float                                              RangeScale;                                       		// 0x0818 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned long                                      bPreferSelectionTraceOverOtherNonPhysicalTowers : 1;		// 0x081C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36754 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	bool IsPhysicalTower ( );
	float GetPhysicalTowerDamageMultiplier ( );
	float GetPhysicalTowerHealthMultiplier ( );
	bool UseForTowerSelectionPassThrough ( );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
};

UClass* ADunDefTower_NonPhysical::pClassPointer = NULL;

// Class UDKGame.DunDefTower_Aura
// 0x0094 (0x08B4 - 0x0820)
class ADunDefTower_Aura : public ADunDefTower_NonPhysical
{
public:
	unsigned long                                      bAffectPlayers : 1;                               		// 0x0820 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectEnemies : 1;                               		// 0x0820 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      AllowHeroAttackRateToScaleEffectSet : 1;          		// 0x0820 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      LoseEnergyOverTime : 1;                           		// 0x0820 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShutDown : 1;                                    		// 0x0820 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	class UParticleSystemComponent*                    AuraIconEffect;                                   		// 0x0824 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    AuraParticleEffect;                               		// 0x0828 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             AuraParticleSystemLowQuality;                     		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectInterval;                                   		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AuraPawnEffect;                                   		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifeEnergy;                                       		// 0x0838 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              LifeEnergyDecrease;                               		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifeEnergyDecreasePerPawnAffected;                		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MyRadius;                                         		// 0x0844 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UAudioComponent*                             AuraAmbientSoundComponent;                        		// 0x0848 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   AuraSpawnCue;                                     		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          TowerRatingMaterial;                              		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AuraBaseRangeScale;                               		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealAmountMultiplier;                             		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusCheckFudgeAmount;                           		// 0x085C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AuraScaleInterpSpeed;                             		// 0x0860 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NetUpdateFrequencyWhenRepairing;                  		// 0x0864 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomRadiusMultiplier;                           		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            PawnClassesToIgnore;                              		// 0x086C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            DamagableClassesToAttack;                         		// 0x0878 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AttackDamagePerSecondString;                      		// 0x0884 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< class ADunDefPawn* >                       PawnList;                                         		// 0x0890 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ADunDefDamageableTarget* >           DamagableList;                                    		// 0x089C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxLifeEnergy;                                    		// 0x08A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              StartRepairEnergy;                                		// 0x08AC (0x0004) [0x0000000000000000]              
	float                                              LastRepairIncrementTime;                          		// 0x08B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36753 ];

		return pClassPointer;
	};

	float GetGlobalTowerHealthMultiplier ( );
	float GetDamageMultiplier ( );
	void RefreshRadius ( );
	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	void PerformFullHeal ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	void InitTowerRatingMaterial ( );
	void UpdateTowerRatingMaterial ( );
	void HealPctOfMaxHealth ( float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	float IncrementRepair ( float CurrentMana, float DeltaTime );
	float GetCurrentRepairPercentage ( float StartRepairTime, float RepairSpeed );
	void StartRepair ( );
	float GetTimeToRepair ( );
	float GetCostToRepair ( );
	float GetTimeOfTotalRepair ( );
	float StaticGetAttackRange ( class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler );
	void RemoveTowerBooster ( class UTowerBoosterInterface* aBooster, int indexOverride );
	void AddTowerBooster ( class UTowerBoosterInterface* aBooster );
	float GetAttackRange ( );
	float GetTimedInterval ( );
	void ScaleForHeroModifiers ( unsigned long IsFirstTime );
	int GetHealth ( unsigned long bGetMax );
	float GetHealthPercent ( );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	struct FString GetToolTipText ( );
	void ScaleAuraEffect ( );
	void SetRadius ( int rad, unsigned long bDontCheckCollidingActors );
	bool TimedEffect ( class ADunDefPawn* P );
	void Timer ( );
	bool IsInRadiusDT ( class ADunDefDamageableTarget* dt );
	void ExitEffectDT ( class ADunDefDamageableTarget* dt );
	void EntryEffectDT ( class ADunDefDamageableTarget* dt );
	bool TimedEffectDT ( class ADunDefDamageableTarget* dt );
	void AffectedDTDied ( class ADunDefDamageableTarget* dt );
	void LeftRadiusDT ( class ADunDefDamageableTarget* dt );
	bool AttacksDT ( class ADunDefDamageableTarget* dt );
	void EnteredRadiusDT ( class ADunDefDamageableTarget* dt );
	void CheckForDamagableTargets ( );
	void ExitEffect ( class ADunDefPawn* P );
	void EntryEffect ( class ADunDefPawn* P );
	void AffectedPawnDied ( class ADunDefPawn* DeadPawn );
	void Destroyed ( );
	void LeftRadius ( class ADunDefPawn* P );
	bool IgnoresPawn ( class ADunDefPawn* P );
	void EnteredRadius ( class ADunDefPawn* P );
	void UnTouch ( class AActor* Other );
	bool CanTargetInvisibleTarget ( class UDunDefTargetableInterface* aTarget );
	void Touch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void ScaleDown ( );
	void DecreaseLifeEnergy ( float X );
	bool IsInRadius ( class APawn* P );
	bool IsValidForLifeEnergyDecrease ( class ADunDefPawn* P );
	void Tick ( float dt );
	void PostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
	bool SameTeamAs ( class UDunDefTargetableInterface* Target );
};

UClass* ADunDefTower_Aura::pClassPointer = NULL;

// Class UDKGame.HeroEquipment
// 0x0848 (0x09E8 - 0x01A0)
class UHeroEquipment : public UHeroEquipmentNative
{
public:
	struct FString                                     EquipmentName;                                    		// 0x01A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FEG_StatRandomizer                          StatModifierRandomizers[ 0xB ];                   		// 0x01AC (0x01B8) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceRandomDLCColor : 1;                         		// 0x0364 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseShotsPerSecondRandomizerMult : 1;             		// 0x0364 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceAllowDropping : 1;                          		// 0x0364 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceAllowSelling : 1;                           		// 0x0364 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDoTranscendentLevelBoost : 1;                    		// 0x0364 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseLevelRequirementOverrides : 1;                		// 0x0364 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bForceRandomizerWithMinEquipmentLevel : 1;        		// 0x0364 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowSellingToExceedSoftManaCap : 1;             		// 0x0364 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bCanBeEquipped : 1;                               		// 0x0364 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bForceUseEquipmentDrawScale : 1;                  		// 0x0364 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDistributeManaUponDroppedDestruction : 1;        		// 0x0364 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bAllowDroppedDestruction : 1;                     		// 0x0364 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDontHideEquipmentAttachmentInFPV : 1;            		// 0x0364 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bEncumberHero : 1;                                		// 0x0364 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bIconUseEquipmentRating : 1;                      		// 0x0364 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bPlayerShopForceToMinimumSellWorth : 1;           		// 0x0364 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bMaxEquipLevelUseAltCalc : 1;                     		// 0x0364 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bUseExtraQualityDamage : 1;                       		// 0x0364 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bUseSecondExtraQualityDamage : 1;                 		// 0x0364 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      AllowNameRandomization : 1;                       		// 0x0364 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      OnlyRandomizeBaseName : 1;                        		// 0x0364 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bNoNegativeRandomizations : 1;                    		// 0x0364 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      WeaponAdditionalDamageTypeNotPoison : 1;          		// 0x0364 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      UsesEquipmentAttachments : 1;                     		// 0x0364 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      UseColorSets : 1;                                 		// 0x0364 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      RandomizeColorSets : 1;                           		// 0x0364 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      ForceQualityBeam : 1;                             		// 0x0364 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bUsePreviewZOffsetting : 1;                       		// 0x0364 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bUseSelectionPreviewScale : 1;                    		// 0x0364 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bUsePawnWeaponDamageCallback : 1;                 		// 0x0364 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bUsePawnDamageCallback : 1;                       		// 0x0364 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bCantSave : 1;                                    		// 0x0364 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bCantPutInItemBox : 1;                            		// 0x0368 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ProvideHealOnBlock : 1;                           		// 0x0368 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSetRandomizerMultipliers : 1;                    		// 0x0368 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bPlayerShopPurchasePending : 1;                   		// 0x0368 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bEnchantmentsInitalized : 1;                      		// 0x0368 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDontDisplayPetSize : 1;                          		// 0x0368 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCanModifyParticleColour : 1;                     		// 0x0368 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseHighDigitManaTokenValue : 1;                  		// 0x0368 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                RandomizerStatModifierGoNegativeThreshold;        		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxUpgradeableSpeedOfProjectilesBonus;            		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomizerStatModifierGoNegativeMultiplier;       		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomizerStatModifierGoNegativeChance;           		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefWeapon*                               EquipmentWeaponTemplate;                          		// 0x037C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomizerQualityMultiplier;                      		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelRequirementRatingOffset;                     		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinElementalDamageIncreasePerLevel;               		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighLevelRequirementsRatingThreshold;             		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumSellWorthUpgradeDepreciationFactor;        		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TranscendentLevelBoostAmount;                     		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TranscendentLevelBoostRandomizerPower;            		// 0x0398 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighResaleWorthPower;                             		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SupremeLevelBoostAmount;                          		// 0x03A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SupremeLevelBoostRandomizerPower;                 		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UltimateLevelBoostAmount;                         		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UltimateLevelBoostRandomizerPower;                		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLevelRequirementOverride >         LevelRequirementOverrides;                        		// 0x03B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FEG_StatRandomizer                          WeaponDamageBonusRandomizer;                      		// 0x03BC (0x0028) [0x0000000000000001]              ( CPF_Edit )
	int                                                OneTime_ExpBonus;                                 		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HighLevelThreshold;                               		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxHeroStatValue;                                 		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TranscendentMaxHeroStatValue;                     		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SupremeMaxHeroStatValue;                          		// 0x03F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinTranscendentLevel;                             		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinSupremeLevel;                                  		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                UltimateMaxHeroStatValue;                         		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                UltimatePlusMaxHeroStatValue;                     		// 0x0404 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinUltimateLevel;                                 		// 0x0408 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           DescriptionStringOriginalReplacements;            		// 0x040C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           DescriptionStringNewReplacements;                 		// 0x0418 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FEG_StatRandomizer                          WeaponAltDamageBonusRandomizer;                   		// 0x0424 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          DamageReductionRandomizers[ 0x4 ];                		// 0x044C (0x00A0) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponClipAmmoBonusRandomizer;                    		// 0x04EC (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponReloadSpeedBonusRandomizer;                 		// 0x0514 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponKnockbackBonusRandomizer;                   		// 0x053C (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponChargeSpeedBonusRandomizer;                 		// 0x0564 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponBlockingBonusRandomizer;                    		// 0x058C (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          MaxEquipmentLevelRandomizer;                      		// 0x05B4 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellWorthLinearFactor;                            		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellWorthExponentialFactor;                       		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellWorthMin;                                     		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellWorthMax;                                     		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellRatingExponent;                               		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellWorthEquipmentRatingBase;                     		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementalDamageMultiplier;                        		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthLinearFactor;                        		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthExponentialFactor;                   		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthMin;                                 		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthMax;                                 		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellRatingExponent;                           		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthEquipmentRatingBase;                 		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthWeaponMultiplier;                    		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthWeaponExponentialFactorMult;         		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AltDamageRandomizerMult;                          		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShopSellWorth;                                 		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthMinWeaponMultiplier;                 		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthMaxWeaponMultiplier;                 		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthRatingWeaponMultiplier;              		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostPerLevelMaxQualityMultiplierAdditional;   		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighLevelManaCostPerLevelMaxQualityMultiplierAdditional;		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostPerLevelExponentialFactorAdditional;      		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighLevelManaCostPerLevelExponentialFactorAdditional;		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponDrawScaleRandomizerExtraMultiplier;         		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      EquipLevelRequirements;                           		// 0x0640 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                ExtraQualityUpgradeDamageNumberDescriptor;        		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SecondExtraQualityUpgradeDamageNumberDescriptor;  		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementalDamageIncreasePerLevelMultiplier;        		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageIncreasePerLevelMultiplier;                 		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UltimateDamageIncreasePerLevelMultiplier;         		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraQualityDamageIncreasePerLevelMultiplier;     		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondExtraQualityDamageIncreasePerLevelMultiplier;		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxElementalDamageIncreasePerLevel;               		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamageIncreasePerLevel;                        		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UltimateMaxDamageIncreasePerLevel;                		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraQualityMaxDamageIncreasePerLevel;            		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondExtraQualityMaxDamageIncreasePerLevel;      		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelectionPreviewScaleMultiplier;                  		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AltDamageIncreasePerLevelMultiplier;              		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AltMaxDamageIncreasePerLevel;                     		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PrimaryColorOverrideMultiplier;                   		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondaryColorOverrideMultiplier;                 		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalSelectionPreviewScaleMultiplier;            		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopSellWorthMaxExponentAbsolute;                 		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentRatingPercentBase;                       		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponEquipmentRatingPercentBase;                 		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    QualityShopCostMultipliers;                       		// 0x06A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    QualityShopCostCaps;                              		// 0x06AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                WeaponKnockbackMax;                               		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxNonTranscendentStatRollValue;                  		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinDamageBonus;                                   		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinEquipmentLevels;                               		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LevelRequirementOffset;                           		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponShotsPerSecondBonusRandomizer;              		// 0x06CC (0x0028) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponNumberOfProjectilesQualityBaseline;         		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DamageReductionUpgradeInterval;                   		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponNumberOfProjectilesBonusRandomizer;         		// 0x06FC (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponSpeedOfProjectilesBonusRandomizer;          		// 0x0724 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponAdditionalDamageAmountRandomizer;           		// 0x074C (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FEG_StatRandomizer                          WeaponDrawScaleMultiplierRandomizer;              		// 0x0774 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ADunDefDroppedEquipment* >           DroppedEquipmentTemplates;                        		// 0x079C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      weaponType;                                       		// 0x07A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EquipmentSetID;                                   		// 0x07A9 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< unsigned char >                            AccessoryRequirements;                            		// 0x07AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ManaCostPerLevelLinearFactor;                     		// 0x07B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconColorMultPrimary;                             		// 0x07BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconColorMultSecondary;                           		// 0x07C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostPerLevelExponentialFactor;                		// 0x07C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostPerLevelMinQualityMultiplier;             		// 0x07C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostPerLevelMaxQualityMultiplier;             		// 0x07CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RespawnTimeMultiplier;                            		// 0x07D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TotalRandomizerMultiplier;                        		// 0x07D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FEquipmentAttachmentInfo >          EquipmentAttachmentInfos;                         		// 0x07D8 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FString                                     LevelString;                                      		// 0x07E4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ForgedByDescription;                              		// 0x07F0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              Ultimate93Chance;                                 		// 0x07FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UltimatePlusChance;                               		// 0x0800 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UltimatePlusPlusChance;                           		// 0x0804 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PrimaryColorSetIntensity;                         		// 0x0808 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PrimaryColorSetPow;                               		// 0x080C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondaryColorSetIntensity;                       		// 0x0810 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondaryColorSetPow;                             		// 0x0814 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponDrawScaleGlobalMultiplier;                  		// 0x0818 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconScaleMultiplier;                              		// 0x081C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullEquipmentSetStatMultiplier;                   		// 0x0820 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MythicalFullEquipmentSetStatMultiplier;           		// 0x0824 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TranscendentFullEquipmentSetStatMultiplier;       		// 0x0828 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SupremeFullEquipmentSetStatMultiplier;            		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UltimateFullEquipmentSetStatMultiplier;           		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponDamageDisplayValueScale;                    		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RatingPercentForLevelUpCostExponent;              		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponDamageBonusRandomizerMultiplier;            		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalWeaponDamageBonusRandomizerMultiplier;  		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellWorthMultiplierLevelBase;                     		// 0x0844 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellWorthMultiplierLevelMin;                      		// 0x0848 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellWorthMultiplierLevelMax;                      		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ExtraEquipmentColorMultiplier;                    		// 0x0850 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ExtraEquipmentColorMultiplierMaterialParamName;   		// 0x0860 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewMinOffsetScale;                            		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewMinOffsetZ;                                		// 0x086C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewMaxOffsetScale;                            		// 0x0870 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewMaxOffsetZ;                                		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   EquipmentIconMat;                                 		// 0x0878 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     AdditionalDescription;                            		// 0x087C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DamageDescription;                                		// 0x0888 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           EquipmentStatNames;                               		// 0x0894 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           EquipmentStatDescriptions;                        		// 0x08A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< class USurface* >                          EquipmentStatIcons;                               		// 0x08AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                IconColorAddPrimary;                              		// 0x08B8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                IconColorAddSecondary;                            		// 0x08C8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     BaseForgerName;                                   		// 0x08D8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              ComparisonSimilarRatingAllowance;                 		// 0x08E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ComparisonRatingExponent;                         		// 0x08E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerSpeedMultiplier;                            		// 0x08EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerGravityMultiplier;                          		// 0x08F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      GivenEquipmentMessageColor;                       		// 0x08F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     GivenEquipmentMessageString;                      		// 0x08F8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequiredLevelString;                              		// 0x0904 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequiredClassString;                              		// 0x0910 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   EquipSound;                                       		// 0x091C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PreviewTranslationOffset;                         		// 0x0920 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProtonChargeBlastDamageMultiplier;                		// 0x092C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealingPerBlock;                                  		// 0x0930 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     BackupUserForgerName;                             		// 0x0934 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     BackupUserEquipmentName;                          		// 0x0940 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MyNonUpgradeLevelRating;                          		// 0x094C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PlayerShopSellAmount;                             		// 0x0950 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FHighDigitInt                               PlayerShopSellAmountHDI;                          		// 0x0954 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	float                                              DebugPreTranscendentEquipmentRating;              		// 0x0964 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FEG_StatMatchingString >            RandomBaseNames;                                  		// 0x0968 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEG_StatMatchingString >            DamageReductionNames;                             		// 0x0974 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEG_StatMatchingString >            QualityDescriptorNames;                           		// 0x0980 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEG_StatMatchingString >            QualityDescriptorRealNames;                       		// 0x098C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MinWeaponScale;                                   		// 0x0998 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponDamageMultiplier;                           		// 0x099C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponAltDamageMultiplier;                        		// 0x09A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACosmeticSetBonus*                           CosmeticSet;                                      		// 0x09A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLevelRange >                       MaxLevelRangeDifficultyArray;                     		// 0x09A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentComparison >              compareSets;                                      		// 0x09B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UDunDefHero*                                 EquipmentHero;                                    		// 0x09C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UStatObject_Equipment* >             DefaultEnchantments;                              		// 0x09C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UStatObject_Equipment* >             StatObjectArray;                                  		// 0x09D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CustomEffectText;                                 		// 0x09DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36772 ];

		return pClassPointer;
	};

	class UStatObject_Equipment* GenerateStatObject ( class UStatObject_Equipment* StatObjectTemplate );
	void LoadEnchantments ( class ADunDefPlayer* tPlayer, unsigned long bisDropped, class AActor* DroppedActor );
	void ClearEnchantments ( );
	bool RemoveEnchantment ( int SlotIndex );
	bool AddEnchantment ( int SlotIndex, int BuffID, int BuffTier );
	void LoadComparisonBiases ( TArray< struct FString >* statMultipliersForComparison );
	bool GetEquipmentOverrideStatValue ( unsigned char levelUpValue, int* OverridenValue, int* doesEquipmentModify );
	struct FHighDigitInt GetManaTokenHDIValue ( );
	bool AllowDroppedDestruction ( );
	bool CanBeDropped ( );
	struct FString GetDescription ( );
	void SwappedShop ( unsigned long swappedToShop );
	void RemoveFromDefenderStore ( );
	void SoldFromPlayerShop ( class ADunDefPlayerController* buyerPC );
	void AddToDefenderStore ( unsigned long IsFromPlayerShop );
	struct FString GetURLString ( unsigned long IsFromPlayerShop, unsigned long bAppending );
	int GetPlayerShopSellAmount ( );
	class ATradeManager* UsedInTradeManager ( );
	void CopyRandomizersFromTemplate ( class UHeroEquipment* aTemplate );
	float GetIconDrawScale ( );
	float GetEquipmentDrawScale ( );
	bool AllowStoringInItemBox ( );
	bool AllowSaving ( );
	float GetRespawnTimeMultiplier ( );
	bool AllowSelling ( );
	struct FString GetDenialReasonString ( int denialreason );
	struct FString GetClassRequirementString ( );
	struct FString GetLevelRequirementString ( );
	int GetLevelRequirement ( );
	void SetLocked ( unsigned long bSetLocked );
	bool IsNameFullyVerified ( );
	void LocalCustomForgerNameVerified ( );
	void LocalCustomNameVerified ( );
	struct FString GetCustomCreatorName ( );
	struct FString GetCustomName ( );
	bool DoesCustomNameNeedVerification ( );
	void ShutDown ( unsigned long isDestruction );
	struct FString GetGivenEquipmentMessage ( );
	float GetWorldSeconds ( );
	void NotifyEquipment_AnimNotifyAttachment ( int NotifyID, class USkeletalMeshComponent* equipmentSkelComp );
	bool IsAuthority ( );
	void NotifyEquipment_WeaponDidDamage ( class ADunDefPlayer* fromPlayer, class UDunDefTargetableInterface* aTarget, int Damage, struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType );
	void NotifyEquipment_PawnDied ( );
	void NotifyEquipment_PawnJumped ( );
	void NotifyEquipment_PawnAttacked ( int FireMode );
	void NotifyEquipment_PawnTookDamage ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	class UActorComponent* GetEquipmentAttachedComponent ( int equipmentAttachmentIndex, unsigned long bForceLookup );
	void ExecHeroEvent ( struct FName EventName, struct FName nameParam1, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1 );
	class ADunDefPlayer* GetPlayerPawn ( unsigned long bForceLookup );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	float GetFullEquipmentSetMultiplier ( unsigned long bValueLessThenZero );
	bool HasFullEquipmentSet ( );
	bool MatchesEquipmentIDNumbers ( int anEquipmentID1, int anEquipmentID2 );
	bool MatchesEquipmentIDNetInfo ( struct FEquipmentNetInfo* netInfo );
	bool MatchesEquipmentID ( class UHeroEquipment* OtherEquipment );
	void CloseAnyEquipmentInfoGUI ( );
	bool IsInAnyEquipmentInfoGUI ( class ULocalPlayer** PlayerOwnerOfGUI );
	int CompareDamageResistance ( class UHeroEquipment* OtherEquipment, class UClass* damageResistanceType, int* otherEquipmentValue );
	int CompareHeroStat ( class UHeroEquipment* OtherEquipment, unsigned char statType, int* otherEquipmentValue );
	int CompareEquipmentStat ( class UHeroEquipment* OtherEquipment, unsigned char statType, int* otherEquipmentValue );
	int GetNumStatsForRows ( );
	struct FString GetForgerName ( unsigned char* IsCustomForger );
	bool GetNonZeroResistanceStatAtIndex ( int StatIndex, class UClass** FoundStatType );
	bool GetNonZeroHeroStatAtIndex ( int StatIndex, unsigned char* FoundStatType );
	bool GetNonZeroEquipmentStatAtIndex ( int StatIndex, unsigned char* FoundStatType );
	void SetResistanceStatValue ( int resistanceIndex, int Value );
	void SetEquipmentStatValue ( unsigned char equipmentStatType, int Value );
	struct FString GetEquipmentStatString ( unsigned char equipmentStatType, unsigned long includeStatLevelUp, int* signType );
	float GetEquipmentStatValue ( unsigned char equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp );
	struct FString GetEquipmentStatName ( unsigned char equipmentStatType );
	class USurface* GetEquipmentStatIcon ( unsigned char equipmentStatType );
	struct FString GetEquipmentStatDescription ( unsigned char equipmentStatType );
	class USurface* GetEquipmentIcon ( );
	bool UsesColorOverrides ( );
	bool UsesColorSets ( );
	void ReattachEquipment ( unsigned long bIgnoreAttachFX );
	void LogEquipStats ( );
	void RefreshedValues ( );
	void ReceivedPlayerActor ( class ADunDefPlayer* Player );
	void RemovedFromHero ( );
	void AddAttachments ( class ADunDefPlayer* Player );
	void RemoveAttachments ( );
	void LocalFirstTimeEquipped ( class UDunDefHero* ownerHero, class ADunDefPlayerReplicationInfo* OwnerPRI, class ADunDefPlayer* OwnerPlayer );
	void AddedToHero ( );
	void SetOwnerNoSee ( class ADunDefPlayer* aPlayer, unsigned long ownerNoSee, unsigned long ownerNoSeeWeapon );
	void RemoveEquipmentAttachment ( class USkeletalMeshComponent* thePlayerMesh, class AActor* AttachToActor );
	void AddEquipmentAttachment ( class USkeletalMeshComponent* thePlayerMesh, unsigned long attachWeapon, class AActor* AttachToActor, unsigned long bForce, unsigned long bIgnoreAttachFX );
	void AttachedComponent ( class UPrimitiveComponent* aComp );
	void CheckNameVerification ( );
	void ApplyAltDamageMultiplierDisplay ( int* Value );
	int GetAltDamageIncreaseDisplay ( int Value );
	void ApplyElementalDamageMultiplierDisplay ( int* Value );
	int GetElementalDamageIncreaseDisplay ( int Value );
	int GetBaseDamage ( );
	int GetShiftClickUpgradeCount ( );
	void ApplyPrimaryDamageMultiplierDisplay ( int* StatValue );
	int GetPrimaryDamageIncreaseDisplay ( int Value );
	int GetStatLevelUpAmountIterations ( unsigned char EQS, int Value, int statSubIndex );
	bool CheckStatLevelUpIterations ( unsigned char EQS, int statSubIndex, int EquipmentLevelToCheck, float Value );
	bool ApplyLevelUp ( unsigned char EQS, int statSubIndex, struct FString setUserEquipmentName, struct FString setUserForgerName, unsigned long refresh );
	int GetNextStatLevelUpValue ( unsigned char EQS, int statSubIndex, unsigned long SetAsValue );
	int GetDamageResistanceStatIndex ( class UClass* tDamageType );
	bool AllowStatLevelUp ( unsigned char EQS, int statSubIndex, unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement );
	int GetMaxHeroStatValue ( );
	bool NextLevelIsMaximumLevel ( );
	bool AtMaximumLevel ( );
	bool AllowManaInvestment ( unsigned long bJustForce );
	bool CanLevelUp ( unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement );
	bool InvestMana ( class ADunDefPlayerController* PC, int AmountDesired, unsigned long bJustForce );
	float GetManaPercentageOfLevelUp ( );
	int GetRemainingManaForLevelUp ( );
	struct FHighDigitInt GetShopWorth ( );
	int GetEquipmentWorth ( unsigned long bForceResaleWorth );
	int GetManaRequirementForLevelUp ( );
	int GetAltWeaponDamage ( );
	int GetWeaponDamage ( );
	bool UseEquipmentDrawScale ( );
	bool IsWeapon ( );
	int GetHowManyDamageReductionTypes ( );
	struct FEquipmentColorSet GetEquipmentColorSet ( unsigned long bIsIcon );
	float GetEquipmentRatingPercent ( unsigned long bForceCalculation );
	int GetComparisonIndex ( class UHeroEquipment* OtherEquipment );
	float GetRemovalRating ( );
	float GetArmourRating ( );
	float GetEquipmentRating ( unsigned long bForceCalculation, unsigned long bIgnorePotentialUpgradeLevels, unsigned long forceUseCompareArmour );
	struct FString GetEquipmentName ( );
	void AddRandomizeValues ( float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear );
	void DetermineUltQuality ( );
	void SanitiseRandomizers ( );
	void GenerateUniqueID ( );
	int GetIndexOfRandomStatName ( struct FString stringName, TArray< struct FEG_StatMatchingString >* StatStringArray );
	void ResetStatsToTemplate ( );
	float GenerateRandomizerValue ( float equipmentQuality, struct FEG_StatRandomizer* randomizer );
	class ADunDefWeapon* GetEquipmentWeaponTemplate ( );
	int GetStatValueAndSign ( unsigned char valueType, unsigned long includeStatLevelUp, int* signType );
	int GetDamageResistanceAndSign ( class UClass* DamageType, unsigned long includeStatLevelUp, int* signType );
	int GetDamageResistance ( class UClass* DamageType, unsigned long includeStatLevelUp );
	void SetHeroStatValue ( unsigned char valueType, int Value );
	int GetStatValue ( unsigned char valueType, unsigned long includeStatLevelUp, unsigned long bIncludeFullSetMultiplier );
	class UHeroEquipment* CreateEquipmentFromNetInfo ( class UDunDefHero* ownerHero, class UObject* AltOwnerObject, class UObject* fromDroppedEquipment, struct FEquipmentNetInfo* netInfo );
	struct FEquipmentNetInfo ConvertSaveInfoToNetInfo ( struct UDunDefHeroManagerNative_FEquipmentSaveInfo* saveInfo );
	void InitFromNetInfo ( struct FEquipmentNetInfo Info, class UObject* fromDroppedEquipment );
	struct FEquipmentNetInfo GetNetInfo ( unsigned long UseSelfAsTemplate, unsigned long bForceNotOnHero );
	struct FString GetFullEquipmentName ( );
	bool IsRootEntry ( );
	int GetFolderID ( );
	bool GetEntryEnabled ( class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject );
	void GetDataProps ( int dataSetType, struct FDataEntryProps* dProps );
	struct FString GetDataString ( int dataSetType );
};

UClass* UHeroEquipment::pClassPointer = NULL;

// Class UDKGame.HeroEquipment_Familiar
// 0x0108 (0x0AF0 - 0x09E8)
class UHeroEquipment_Familiar : public UHeroEquipment
{
public:
	class USkeletalMesh*                               TheFamiliarMesh;                                  		// 0x09E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLocInterpDistance;                             		// 0x09EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationInterpSpeedMax;                           		// 0x09F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LocInterpSpeed;                                   		// 0x09F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeshTranslationOffset;                            		// 0x09F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeshScale3D;                                      		// 0x0A04 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeshScale;                                        		// 0x0A10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableMeshInterpolation : 1;                     		// 0x0A14 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTranslateOtherComponent : 1;                     		// 0x0A14 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRotateOtherComponent : 1;                        		// 0x0A14 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoFamiliarAbilities : 1;                         		// 0x0A14 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceToMinimumSize : 1;                          		// 0x0A14 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bForceToMaximumSize : 1;                          		// 0x0A14 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDoClampMeshZTranslation : 1;                     		// 0x0A14 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDoubleFamiliarActive : 1;                        		// 0x0A14 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	struct FName                                       CustomAnimNodeNames[ 0x2 ];                       		// 0x0A18 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimNodeCrossBlenderName;                   		// 0x0A28 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HurtAnimation;                                    		// 0x0A30 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DeathAnimation;                                   		// 0x0A38 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttackAnimation;                                  		// 0x0A40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       JumpAnimation;                                    		// 0x0A48 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SpawnAnimation;                                   		// 0x0A50 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             OtherParticleSystemToTransform;                   		// 0x0A58 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TranslateOtherComponentByBoneName;                		// 0x0A5C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DesiredRotInterpSpeed;                            		// 0x0A64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroExperienceInvestmentMultiplier;               		// 0x0A68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AttackOctreeCollectionGroup;                      		// 0x0A6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AttachedMeshIndex;                                		// 0x0A70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRotDegreesForInterp;                           		// 0x0A74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotTargetLerpSpeed;                               		// 0x0A78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRotationInterpAngleBase;                       		// 0x0A7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationInterpSpeedMin;                           		// 0x0A80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DrawScaleOffsetExponent;                          		// 0x0A84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DrawScaleOffsetMult;                              		// 0x0A88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SizeScalerMaximumLevel;                           		// 0x0A8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SizeScalerPower;                                  		// 0x0A90 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumLevelScaleMultiplier;                      		// 0x0A94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     OtherParticleSystemToTransformOffset;             		// 0x0A98 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeshZTranslationClampMinimum;                     		// 0x0AA4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeshZTranslationClampMaximum;                     		// 0x0AA8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastAttachedTime;                                 		// 0x0AAC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DoubleFamiliarDegressOffset;                      		// 0x0AB0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastCustomNodeIndex;                              		// 0x0AB4 (0x0004) [0x0000000000000000]              
	struct FVector                                     MeshInterpLoc;                                    		// 0x0AB8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDesiredRot;                                   		// 0x0AC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUnlerpedDesiredRot;                           		// 0x0AC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RotTargetLerpPercent;                             		// 0x0ACC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshDirectionRot;                                 		// 0x0AD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastMeshDesiredRot;                               		// 0x0AD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              YawAccelRate;                                     		// 0x0AD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawAccelSpeed;                                    		// 0x0ADC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirFriction;                                      		// 0x0AE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirBrakingFriction;                               		// 0x0AE4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BrakingPercent;                                   		// 0x0AE8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawYelocity;                                      		// 0x0AEC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36788 ];

		return pClassPointer;
	};

	void AddRandomizeValues ( float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear );
	void AttachedComponent ( class UPrimitiveComponent* aComp );
	void RemovedFromHero ( );
	void AddedToHero ( );
	float GetPetMaxDrawScale ( unsigned long GetMaxLevel );
	float GetEquipmentDrawScale ( );
	void AddEquipmentAttachment ( class USkeletalMeshComponent* thePlayerMesh, unsigned long attachWeapon, class AActor* AttachToActor, unsigned long bForce, unsigned long bIgnoreAttachFX );
	void NotifyEquipment_AnimNotifyAttachment ( int NotifyID, class USkeletalMeshComponent* equipmentSkelComp );
	void NotifyEquipment_PawnDied ( );
	void NotifyEquipment_PawnJumped ( );
	void NotifyEquipment_PawnTookDamage ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void ExecHeroEvent ( struct FName EventName, struct FName nameParam1, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1 );
	bool IsPlayingCustomAnim ( class USkeletalMeshComponent* MeshComp, struct FName inAnim, float TimeFromEndToConsiderFinished );
	class USkeletalMeshComponent* GetMeshComponent ( unsigned long bForceLookup );
	float PlayAnimation ( struct FName AnimName, unsigned long bReplicate, float BlendInTime, float BlendOutTime, float PlayRate, unsigned long bLooping, unsigned long bOverride, unsigned long bForceLookup );
	struct FRotator GetDesiredDirection ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer );
	struct FRotator GetDesiredSphereRotationalPlacement ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	float GetPetHealingAmount ( );
	bool LimitPetHealing ( );
	bool DoPetHealing ( );
	bool DoFairyAbilities ( );
	bool DoFamiliarAbilities ( );
};

UClass* UHeroEquipment_Familiar::pClassPointer = NULL;

// Class UDKGame.DunDefBuff
// 0x027C (0x0300 - 0x0084)
class UDunDefBuff : public UBuffNativeObject
{
public:
	struct FsBuffInfo                                  BuffInfo;                                         		// 0x0084 (0x0064) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCanTick : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCanStack : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStackingResetsTimer : 1;                         		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      BaseOnOwner : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bStacksAffectStats : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bInstantBuff : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableDynamicBuffUpdating : 1;                   		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bReplicateBuff : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDestroyBuffOnTargetDeath : 1;                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDestroyBuffOnOwnerDeath : 1;                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAddStackOnTimerReset : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bStackingAddsStacks : 1;                          		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bLimitNumSameBuffs : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bLimitNumSameBuffs_PerOwner : 1;                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bKillOldest : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bPreventBossStatChanges : 1;                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bCheckForStatusEffect : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bCheckTargetElementalType : 1;                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bOnlyAffectPlayers : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bOnlyAffectEnemies : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bOnlyAffectTowers : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bOnlyAffectPawns : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bAffectsOwner : 1;                                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bOnlyAffectsOwner : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bSkipOnlyAffect : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bCanBuffBoss : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bApplyToInvincibleTargets : 1;                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bBuffDeadTarget : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bUseCharacterOverlay : 1;                         		// 0x00E8 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bAttachToSocket : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bScaleVFX : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bShowBuffNotification : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bInitedForClient : 1;                             		// 0x00EC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bOnlyRelevantToOwner : 1;                         		// 0x00EC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bBuffActive : 1;                                  		// 0x00EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBuffKilled : 1;                                  		// 0x00EC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      InitializeAck : 1;                                		// 0x00EC (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                MaxStackCount;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BuffTier;                                         		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuffProcInterval;                                 		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuffLifeSpan;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuffProcChance;                                   		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuffRange;                                        		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IntervalBetweenProcs;                             		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearStatIncreasePerStack;                       		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DynamicBuffUpdateInterval;                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpZMuliplier;                                   		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GravityMuliplier;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedMultiplier;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumSameBuffsLimit;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumSameBuffs_PerOwner;                            		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditiveStatModifier[ 0x11 ];                     		// 0x0128 (0x0044) [0x0000000000000001]              ( CPF_Edit )
	float                                              MultiplicativeStatModifier[ 0x11 ];               		// 0x016C (0x0044) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ClassesToIgnoreForStatChanges;                    		// 0x01B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      InvalidTargetElementalTypeClass;                  		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StacksToApplyStatusEffect;                        		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FsElementalCombo >                  ElementalCombos;                                  		// 0x01C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      StatusEffectToAdd;                                		// 0x01D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      StatusEffectToRemove;                             		// 0x01D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                OverlayColor;                                     		// 0x01D4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ParticleSystemComponent;                          		// 0x01E4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             FadeInVFX;                                        		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FadeOutVFX;                                       		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BuffEffectVFX;                                    		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       VfxAttachSocketName;                              		// 0x01F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BuffEffectVfxAttachSocketName;                    		// 0x01FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScaleVFXParamName;                                		// 0x0204 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              VfxScaleMultiplier;                               		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AudioComponent;                                   		// 0x0210 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              AudioFadeInVolume;                                		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioFadeOutVolume;                               		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioFadeInTime;                                  		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioFadeOutTime;                                 		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MaterialParam;                                    		// 0x0224 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaterialParamValue;                               		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialToApplyOnBuff;                            		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FsBuffNotifcationInfo                       BuffNotifications;                                		// 0x0238 (0x00A0) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefBuffManager*                          BuffManager;                                      		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BuffID;                                           		// 0x02DC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AActor*                                      BuffTarget;                                       		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeAttached;                                     		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastProcTime;                                     		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StackCount;                                       		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   CachedMaterial;                                   		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIActorModifierInterface*                    MyActorStatModifier;                              		// 0x02F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02F8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class ADunDefPlayerController*                     InstigatorController;                             		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36899 ];

		return pClassPointer;
	};

	class UIActorModifierInterface* GetStatModifierObject ( );
	float GetStatValueByTag ( float initalValue, struct FString StatTag, class UIActorModifierInterface* TagActor, unsigned char statType, unsigned long bBaseValueOnly );
	void UpdateBuffRange ( float NewBuffRange );
	void RefreshBuffRange ( class UIActorModifierInterface* ActorStatObject );
	void InitalizeActorStats ( class UIActorModifierInterface* ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly );
	void ReportHeroSwapped ( );
	void AdjustTargetDamage ( class AActor* forActor, class AController* fromController, class UClass* TheDamageType, class UObject* WhatHitMe, struct FsLastDamageInfo damageInfo, int* howMuchDamage, struct FVector* Momentum );
	void ReportBuffRemoved ( class UDunDefBuff* BuffRemoved );
	void ReportBuffAdded ( class UDunDefBuff* BuffAdded );
	void TriggerEvent ( unsigned char EventToTrigger );
	void ReportOwnerDeath ( );
	void ReportOwnerJumped ( );
	void ReportHealedActor ( int healedAmount, class AActor* healed );
	void ReportKilledActor ( class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem );
	void ReportHealed ( int healedAmount, class AActor* Healer );
	void ReportTookDamage ( int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage );
	void ReportActorDealtDamage ( int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage );
	void AdjustDealtDamage ( class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum );
	class ADunDefHUD* GetHUD ( );
	void DoBuffNotification ( struct FString NotificationText, struct FLinearColor NotificationTextColor, float NotificationTextDuration );
	void UpdateBuff ( );
	void GetStatValue ( class AActor* forActor, unsigned char levelUpValue, unsigned long bAdditivePass, float* buffVal );
	struct FString GetTierName ( );
	class USurface* GetBuffIcon ( class UDunDefTargetableInterface* aTarget );
	struct FString GetBuffDescription ( class UDunDefTargetableInterface* aTarget );
	struct FString GetBuffName ( class UDunDefTargetableInterface* aTarget );
	bool CheckProcChance ( );
	int GetStackCount ( );
	void SetStackCount ( int NewAmount );
	void ResetTimer ( );
	bool IsEnemy ( class AActor* pActor );
	bool IsFriend ( class AActor* pActor );
	int GetTargetingTeam ( );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	bool IsTimerActive ( struct FName inTimerFunc );
	void ClearAllTimers ( );
	void ClearTimer ( struct FName TimerName );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void StopSound ( class USoundCue* Cue, float FadeOutTime );
	void PlaySound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	void UpdateLocation ( );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	void AttachComponent ( class UActorComponent* Comp );
	void ReattachComponent ( class UPrimitiveComponent* Comp );
	void SetLocation ( struct FVector NewLoc );
	void SetRotation ( struct FRotator NewRot );
	void InitializeBuffInfo ( struct FsBuffNetInfo* initialInfo );
	void eventDestroyed ( );
	void SpawnEffect ( class UParticleSystem* aParticle, class AActor* theOwner, struct FVector Position, struct FRotator Orientation, float ScaleFactor, struct FName SpawnFromSocket, unsigned long AttachToSocket, unsigned long AttachToActor, unsigned long DontReplicate, unsigned long bIgnoreRenderTime );
	void DisableBuff ( );
	void EnableBuff ( );
	void ToggleBuff ( unsigned long bBuffEnabled );
	void DeactivateBuff ( );
	void ActivateBuff ( );
	void eventTick ( float DeltaTime );
	bool CheckAlive ( );
	void BuffEffect ( );
	void Initialize ( );
	void SetBuffID ( int IDValue );
	bool IsValidTarget ( class AActor* Target, class AActor* BuffOwner, class UDunDefBuff* aBuffTemplate );
	class UDunDefBuff* AddBuff ( class AActor* Target, class AActor* BuffOwner, class UDunDefBuff* aBuffTemplate, int aBuffTier, class UIActorModifierInterface* aActorModifier, class ADunDefPawn* anInstigator, struct FVector SpawnLocation, struct FRotator SpawnRotation, int NullInstigatorTargetingTeam, unsigned long bForceNoInstigator );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* UDunDefBuff::pClassPointer = NULL;

// Class UDKGame.ActionWheel
// 0x008C (0x00C8 - 0x003C)
class UActionWheel : public UObject
{
public:
	TArray< class UActionWheelEntry* >                 EditorWheelEntries;                               		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInterface*                          GamepadPointingDirectionIcon;                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  EntrySelectionBorder;                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EntrySelectionBorderSize;                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      PlaceFirstIconAtCenter : 1;                       		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAddAdditionalActionWheelEntriesFromHero : 1;     		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      WaitingForCenterInput : 1;                        		// 0x0054 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsVisible : 1;                                   		// 0x0054 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWheelFadeBackwards : 1;                          		// 0x0054 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              SpinnerInterpSpeed;                               		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundOpen;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundBack;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundSelect;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundStoreHotkey;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       HotKeyFont;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              wheelYOffset;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GamepadSpinnerDistancePercent;                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GamepadSpinnerSize;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLinearColor >                      GamepadSpinnerColors;                             		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ActionWheelCanvasScaleNudgeAmount;                		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class UActionWheelEntry* >                 TopWheelEntries;                                  		// 0x008C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ADunDefPlayerController*                     PCOwner;                                          		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UActionWheelEntry*                           CurrentSelectedEntry;                             		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UActionWheelEntry*                           LastSelectedEntry;                                		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UActionWheelEntry*                           GamepadHighlightedEntry;                          		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTimeWaitedForCenterInput;                     		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UActionWheelEntry*                           LastHighlightedEntry;                             		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UActionWheelEntry*                           PreviousHighlightedEntry;                         		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSpinnerYaw;                                		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              WheelOpacity;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              LastWheelOpacity;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              LastOpenTime;                                     		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   GamepadPointingDirectionIconInst;                 		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36993 ];

		return pClassPointer;
	};

	bool ExecutePlayerAbility ( class UActionWheelEntry* Entry, unsigned long bForceHideOnAbilityActivate );
	bool SetSelectedEntry ( class UActionWheelEntry* Entry, unsigned long playSelectionSound );
	void Destroyed ( );
	void SetHotKey ( int hkIndex );
	void UpdateInput ( float DeltaTime );
	void ProcessBack ( );
	void ProcessSelection ( );
	void ToggleVisible ( unsigned long ForceOff );
	void Hide ( );
	void Show ( class UActionWheelEntry* startingWheelEntry );
	void SetGamepadHiglightedEntry ( class UActionWheelEntry* Entry );
	class UActionWheelEntry* GetCenterWheelEntry ( );
	bool IsVisible ( );
	void DrawGamepadSpinner ( class ADunDefHUD* H, float xCenter, float yCenter, float WheelSize );
	void DrawEntries ( class ADunDefHUD* H, unsigned long DrawSpinner, unsigned long DontCheckForMouseOver, unsigned long DontShowLevelUp, float WheelScaleMult, float UseWheelOpacity, TArray< class UActionWheelEntry* >* entries );
	class UUI_PlayerHUD* GetHudUI ( );
	void DrawHUD ( class ADunDefHUD* H );
	TArray< class UActionWheelEntry* > GetVisibleWheelEntries ( );
	class UActionWheelEntry* FindEntryByNameFromArray ( struct FName WheelEntryName, TArray< class UActionWheelEntry* >* entries );
	class UActionWheelEntry* FindEntryByName ( struct FName WheelEntryName );
	void InitializeHotKeys ( );
	void InitializeWheel ( class ADunDefPlayerController* PC );
};

UClass* UActionWheel::pClassPointer = NULL;

// Class UDKGame.ActionWheelEntry
// 0x0108 (0x0144 - 0x003C)
class UActionWheelEntry : public UObject
{
public:
	struct FName                                       WheelEntryName;                                   		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WheelParentName;                                  		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PlayerAbilityName;                                		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DoConsoleCommand;                                 		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  EntryIcon;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSize;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      IconDefaultColor;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      IconDisabledColor;                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      IconWarningColor;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DescriptiveName;                                  		// 0x0074 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      FlashOnLevelUp : 1;                               		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsATowerBuildingEntry : 1;                        		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceCloseOnToggleOff : 1;                       		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UFont*                                       ToolTipFont;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipTextScale;                                 		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       ManaCostFont;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostTextScale;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       TinyManaCostFont;                                 		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TinyManaCostTextScale;                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       ToolTipDescriptionFont;                           		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ToolTipDescription;                               		// 0x00A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              ToolTipDescriptionScale;                          		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundHighlight;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipYOffset;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TextGradientColor;                                		// 0x00B8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ManaFontTextGradientColor;                        		// 0x00C8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbilityNameYOffset;                               		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefenseUnitsYOffset;                              		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostTextPercentageOffset;                     		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoolDownTextOffsetY;                              		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TinyManaCostTextPercentageOffset;                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SelectedNameTextColor;                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SelectedNameTextBGColor;                          		// 0x00F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                ForceHotKeyIndex;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UActionWheelEntry* >                 EntryChildren;                                    		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UActionWheelEntry*                           EntryParent;                                      		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefPlayerAbility*                        EntryPlayerAbility;                               		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UActionWheel*                                WheelOwner;                                       		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              leftBound;                                        		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              rightBound;                                       		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              topBound;                                         		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              bottomBound;                                      		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentCircleIndex;                               		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCircleAngle;                               		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCircleAngleAllowance;                      		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastMouseOverTime;                                		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastHighlightStatus;                              		// 0x013C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentMouseOverScale;                            		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36996 ];

		return pClassPointer;
	};

	bool ProcessSelection ( unsigned long bForceHideOnAbilityActivate );
	bool HandleSelection ( );
	bool IsMouseOrGamepadOverMe ( unsigned char Status );
	void DrawEntry ( class UCanvas* Canvas, float XPos, float YPos, float origScale, unsigned long DontCheckForMouseOver, unsigned long DisableLevelUpFlashing, float Opacity, unsigned long ForceFullOpacity, float CenterWheelPositionX, float CenterWheelPositionY, unsigned long useTinyManaFont, unsigned long drawSelectionBorder, int hotKeyIndex );
	void AbilityActorDestroyed ( );
	void Initialize ( class UActionWheel* ownerWheel, TArray< class UActionWheelEntry* >* entries );
	void AddChild ( class UActionWheelEntry* childEntry );
	class UActionWheelEntry* FindEntryByName ( struct FName theEntryName );
};

UClass* UActionWheelEntry::pClassPointer = NULL;

// Class UDKGame.DunDefBasePlayerController
// 0x0094 (0x06B4 - 0x0620)
class ADunDefBasePlayerController : public AGamePlayerController
{
public:
	TArray< struct FCameraParticleInfo >               CameraParticles;                                  		// 0x0620 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UParticleSystemComponent* >          cameraParticleComponents;                         		// 0x062C (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     curMovie;                                         		// 0x0638 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                remoteUserID;                                     		// 0x0644 (0x0004) [0x0000000000000000]              
	int                                                statPlayerIndex;                                  		// 0x0648 (0x0004) [0x0000000000000000]              
	int                                                HostStatIndex;                                    		// 0x064C (0x0004) [0x0000000000000000]              
	int                                                currentSession;                                   		// 0x0650 (0x0004) [0x0000000000000000]              
	TArray< int >                                      statsData;                                        		// 0x0654 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      playerStatsData;                                  		// 0x0660 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      myStatsData;                                      		// 0x066C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                numMyStatElements;                                		// 0x0678 (0x0004) [0x0000000000000000]              
	int                                                numReceivedMyStatElements;                        		// 0x067C (0x0004) [0x0000000000000000]              
	int                                                numPlayerStatElements;                            		// 0x0680 (0x0004) [0x0000000000000000]              
	int                                                numReceivedPlayerStatElements;                    		// 0x0684 (0x0004) [0x0000000000000000]              
	int                                                numTotalStatElements;                             		// 0x0688 (0x0004) [0x0000000000000000]              
	int                                                numReceivedStatElements;                          		// 0x068C (0x0004) [0x0000000000000000]              
	unsigned char                                      isTalking;                                        		// 0x0690 (0x0001) [0x0000000000000000]              
	unsigned long                                      wantsPushToTalk : 1;                              		// 0x0694 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsHUDSceneOwner : 1;                             		// 0x0694 (0x0004) [0x0000000000000000] [0x00000002] 
	class UHUDWidgetScene*                             HUDScene;                                         		// 0x0698 (0x0004) [0x0000000000000000]              
	float                                              gameStatsWriteDelay;                              		// 0x069C (0x0004) [0x0000000000000000]              
	float                                              gameStatsTimer;                                   		// 0x06A0 (0x0004) [0x0000000000000000]              
	float                                              clientPlayerStatsWriteDelay;                      		// 0x06A4 (0x0004) [0x0000000000000000]              
	float                                              clientPlayerStatsTimer;                           		// 0x06A8 (0x0004) [0x0000000000000000]              
	float                                              serverPlayerStatsWriteDelay;                      		// 0x06AC (0x0004) [0x0000000000000000]              
	float                                              serverPlayerStatsTimer;                           		// 0x06B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37015 ];

		return pClassPointer;
	};

	void ClientSetCurrentSession ( int SessionId );
	void ClientReceiveStatBlock ( int numInBlock, int* bLock );
	void CancelStatWriteTimers ( );
	void UpdateStatWriteTimers ( float DeltaTime );
	void TrySettingHostStats ( );
	void ClientSendingStats ( int numElements );
	void ServerSendClientStats ( );
	void ServerSendStats ( );
	void ServerReceiveMyStatBlock ( int numInBlock, int* bLock );
	void ClientSendMyStats ( );
	void ServerSendingMyStats ( int numElements, int myStatPlayerIndex );
	void SendMyStats ( int myStatPlayerIndex );
	void ClientAddRemoteIDToIgnore ( int remoteID );
	void ClientAddRemoteID ( int remoteID, struct FString PlayerName, unsigned long trueRemote, unsigned long Host, int myStatPlayerIndex );
	void ServerMarkStatsComplete ( );
	void ClientReceivePlayerStatBlock ( int numInBlock, int* bLock );
	void ClientSendingPlayerStats ( int numElements );
	void ServerSendClientPlayerStats ( );
	void ServerSendPlayerStats ( );
	void CheckMovie ( unsigned long bForce );
	void eventSkippedMovie ( );
	void EndedMovie ( );
	void CacheMovie ( );
	void StopMoviePlaying ( );
	void StopMovie ( );
	void PlayMovie ( struct FString MovieName, int AdditionalMovieID );
	void StartedPlayingMovie ( struct FString MovieName, int AdditionalMovieID );
	void ServerStopMovie ( );
	void ServerPlayMovie ( struct FString MovieName, int AdditionalMovieID );
	void ServerCheckMovie ( );
	bool GetCameraParticleEnabled ( struct FName particleName );
	bool SetCameraParticleEnabled ( struct FName particleName, unsigned long Enabled );
	void PostCameraUpdate ( float DeltaTime, struct FVector cameraLocation, struct FRotator cameraRotation );
	void eventPlayerTick ( float DeltaTime );
	void PlayerRealTimeTick ( float RealDeltaTimeSeconds );
	void eventReceivedPlayer ( );
	void ToggleCameraParticle ( struct FName particleName );
	void DisableCameraParticle ( struct FName particleName );
	void EnableCameraParticle ( struct FName particleName );
	class ADunDefGameReplicationInfo* GetGRI ( );
	void CreateHUDScene ( class ULocalPlayer* ForPlayer );
	void PostSpawn ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefBasePlayerController::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerController
// 0x0484 (0x0B38 - 0x06B4)
class ADunDefPlayerController : public ADunDefBasePlayerController
{
public:
	int                                                ManaPower;                                        		// 0x06B4 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                MaxManaPower;                                     		// 0x06B8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              EquipmentPickupRange;                             		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TavernEquipmentPickupRange;                       		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuildPhaseEquipmentPickupRange;                   		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinActivationInterval;                            		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSplitscreenHudOverlayDistanceSq;               		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNonSplitscreenHudOverlayDistanceSq;            		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_HeroSelection*                           HeroSelectionUITemplate;                          		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             InvestManaSoundComp;                              		// 0x06D8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTexture2D*                                  RotatingCameraIconTexture;                        		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  HoldingToTalkIconTexture;                         		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ActivateSpectatorModeIconLeft;                    		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ActivateSpectatorModeIconRight;                   		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              WaitingForSpawnUITemplate;                        		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DropManaSound;                                    		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CalloutSound;                                     		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BeepSound;                                        		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   EnemyHealthBarMaterialTemplate;                   		// 0x06FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyHealthBarHideDelay;                          		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnalogMovementSensitivity;                        		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumAnalogMovementPercent;                     		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConsoleCursorTowerPlacementSensitivity;           		// 0x070C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ShoulderCameraTurnScreenPercent;                  		// 0x0710 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TopDownCameraTurnScreenPercent;                   		// 0x0714 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ADunDefPlayerCamera*                         CameraTemplate;                                   		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HotKeyHoldBindTime;                               		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CursorShoulderModeTurnSpeedFactor;                		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraIconMinZoomScale;                           		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraIconMaxZoomScale;                           		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraIconSizeInterpSpeed;                        		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpectatorIconXOffset;                             		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraIconXOffset;                                		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PercentFromBottomForNoShoulderTurn;               		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DroppedEquipmentCheckRadius;                      		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TavernDroppedEquipmentCheckRadius;                		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TopDownAutoPickTargetDotWeight;                   		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MouseEdgeCameraSpinSpeed;                         		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MouseRotateCameraSpinSpeed;                       		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAutoSelectHero : 1;                              		// 0x0750 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bForceSpectatorMode : 1;                          		// 0x0750 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSetShallowOptions : 1;                           		// 0x0750 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasInitialRespawned : 1;                         		// 0x0750 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bDidFirstSpawn : 1;                               		// 0x0750 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDisableStepTowardsTarget : 1;                    		// 0x0750 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bUseFPV : 1;                                      		// 0x0750 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bAllowsForceFeedback : 1;                         		// 0x0750 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bEnteringLockedInputState : 1;                    		// 0x0750 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bInputLockedByAnimation : 1;                      		// 0x0750 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRightStickTurnsCameraScheme : 1;                 		// 0x0750 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bInvertCameraPitch : 1;                           		// 0x0750 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bSwapTriggersAndButtons : 1;                      		// 0x0750 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bForceDrawBlack : 1;                              		// 0x0750 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bDisableCameraShake : 1;                          		// 0x0750 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bTargetingCursorHidden : 1;                       		// 0x0750 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bCurrentlySwappingHero : 1;                       		// 0x0750 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bIgnoredFirstMove : 1;                            		// 0x0750 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bOptionsMeleeHideTargetingReticle : 1;            		// 0x0750 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bOptionsShowEnemySpawnNotifications : 1;          		// 0x0750 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bSpectatorFreeLook : 1;                           		// 0x0750 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bWaitingForHeroInitialization : 1;                		// 0x0750 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bServerRunningRequestActivationCheck : 1;         		// 0x0750 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      UseGamePadControl : 1;                            		// 0x0750 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      DoQuitToMainMenu : 1;                             		// 0x0750 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      ShownHeroSelectionUI : 1;                         		// 0x0750 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bLockedMovementAllowRotation : 1;                 		// 0x0750 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bHasUltimateDefender : 1;                         		// 0x0750 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bHasEternalDefender : 1;                          		// 0x0750 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bWasCameraInShoulderModeUponCombat : 1;           		// 0x0750 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bWasCameraInShoulderModeUponPreviousCombat : 1;   		// 0x0750 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      IgnoreDeathEffectOnce : 1;                        		// 0x0750 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bDontDrawOverlays : 1;                            		// 0x0754 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      IsInForgeUI : 1;                                  		// 0x0754 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      SentInitialHeroData : 1;                          		// 0x0754 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bInTransientJoinOnlineGame : 1;                   		// 0x0754 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bShowingDetailedToolTip : 1;                      		// 0x0754 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDoInitialRespawn : 1;                            		// 0x0754 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bFirePressed : 1;                                 		// 0x0754 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      OldSplitscreenState : 1;                          		// 0x0754 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      InitiatingMute : 1;                               		// 0x0754 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      needToUpdatePrimaryPlayer : 1;                    		// 0x0754 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      tmpRightStickTurnsCameraScheme : 1;               		// 0x0754 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	float                                              SpectatorCameraSwitchInterval;                    		// 0x0758 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoGRItimeOut;                                     		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATradeManager*                               TradeManagerArchetype;                            		// 0x0760 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalFOVScaler;                              		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastSpectatorCameraSwitchTime;                    		// 0x0768 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChaseMouseSensitivityPitch;                       		// 0x076C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChaseMouseSensitivityYaw;                         		// 0x0770 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoTurnAutoAimRange;                             		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MSG_StorageDeviceRemovedTitle;                    		// 0x0778 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_StorageDeviceRemovedDescription;              		// 0x0784 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_WaitingForDLCMasksTitle;                      		// 0x0790 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_WaitingForDLCMasksDescription;                		// 0x079C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_BootedFromGameTitle;                          		// 0x07A8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_BootedFromGameDescription;                    		// 0x07B4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoiningTitle;                                 		// 0x07C0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoiningDescription;                           		// 0x07CC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoinFailedTitle;                              		// 0x07D8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoinFailedDescription1;                       		// 0x07E4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoinFailedDescription2;                       		// 0x07F0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoinFailedDescription3;                       		// 0x07FC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoinFailedNotSameModeDescription;             		// 0x0808 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              LastEnemyHealthBarTargetTime;                     		// 0x0814 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraIconScale;                                  		// 0x0818 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MouseCameraRotationSpeed;                         		// 0x081C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastMatineeSkipTime;                              		// 0x0820 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MyPlayerControllerStartWave;                      		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChaseCameraOffsetType;                            		// 0x0828 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FHighDigitInt                               BankManaNotifyAmountAdded;                        		// 0x082C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FHighDigitInt                               BankManaNotifyTotal;                              		// 0x083C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   EnemyHealthBarMaterialInstance;                   		// 0x084C (0x0004) [0x0000000000000000]              
	class UDunDefUIScene*                              WaitingForSpawnUIInstance;                        		// 0x0850 (0x0004) [0x0000000000000000]              
	float                                              InputAnimationLockTime;                           		// 0x0854 (0x0004) [0x0000000000000000]              
	float                                              EnteredLockedMovementStateTime;                   		// 0x0858 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCalloutSoundTime;                             		// 0x085C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastActivationTime;                               		// 0x0860 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTimeInStepTowards;                            		// 0x0864 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TargetingCursorPosition;                          		// 0x0868 (0x000C) [0x0000000000000000]              
	struct FLinearColor                                TargetingCursorColor;                             		// 0x0874 (0x0010) [0x0000000000000000]              
	float                                              TargetingCursorScale;                             		// 0x0884 (0x0004) [0x0000000000000000]              
	class APawn*                                       OldPawn;                                          		// 0x0888 (0x0004) [0x0000000000000000]              
	struct FHeroNetInfo                                HeroCachedInfo;                                   		// 0x088C (0x0098) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FEquipmentNetInfo >                 EquipmentsCachedInfo;                             		// 0x0924 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     CurrentPawnLocation;                              		// 0x0930 (0x000C) [0x0000000000000000]              
	struct FRotator                                    CurrentPawnRotation;                              		// 0x093C (0x000C) [0x0000000000000000]              
	int                                                Score;                                            		// 0x0948 (0x0004) [0x0000000000000000]              
	float                                              LastDiedTime;                                     		// 0x094C (0x0004) [0x0000000000000000]              
	float                                              LastLookRight;                                    		// 0x0950 (0x0004) [0x0000000000000000]              
	float                                              LastLookUp;                                       		// 0x0954 (0x0004) [0x0000000000000000]              
	class APawn*                                       LastDiedPawn;                                     		// 0x0958 (0x0004) [0x0000000000000000]              
	class USeqAct_Interp*                              PreviousMatineeAction;                            		// 0x095C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PreviousMatineePlayrate;                          		// 0x0960 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRespawnTimeMultiplier;                        		// 0x0964 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRealDeathTime;                                		// 0x0968 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LocalPlayerNum;                                   		// 0x096C (0x0004) [0x0000000000000000]              
	class UDunDefHero*                                 MyHero;                                           		// 0x0970 (0x0004) [0x0000000000000000]              
	class UDunDefToolTipInterface*                     CurrentToolTipActor;                              		// 0x0974 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0978 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class ADunDefPlayerAbility* >              PlayerAbilities;                                  		// 0x097C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ADunDefPlayerAbility*                        CurrentCastingAbility;                            		// 0x0988 (0x0004) [0x0000000000000000]              
	class ADunDefPlayerAbility*                        StartedCastingAbility;                            		// 0x098C (0x0004) [0x0000000000000000]              
	class ADunDefPlayerAbility*                        CurrentControllingAbility;                        		// 0x0990 (0x0004) [0x0000000000000000]              
	class UDunDefToolTipInterface*                     PreviousToolTipActor;                             		// 0x0994 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0998 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FVector                                     CursorResetPosition;                              		// 0x099C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              RotateCameraIconOpacity;                          		// 0x09A8 (0x0004) [0x0000000000000000]              
	float                                              LastEndedMovieTime;                               		// 0x09AC (0x0004) [0x0000000000000000]              
	float                                              LastMovementAnalogPercentage;                     		// 0x09B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFiredTime;                                    		// 0x09B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefPlayer*                               Spectatee;                                        		// 0x09B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefPlayerReplicationInfo*                SpectateePRI;                                     		// 0x09BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentEnemyHealthBarOpacity;                     		// 0x09C0 (0x0004) [0x0000000000000000]              
	float                                              EnemyHealthBarInterpUpSpeed;                      		// 0x09C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyHealthBarInterpDownSpeed;                    		// 0x09C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEnemy*                                CurrentEnemyForHealthbar;                         		// 0x09CC (0x0004) [0x0000000000000000]              
	struct FVector                                     lastValidTargetLocation;                          		// 0x09D0 (0x000C) [0x0000000000000000]              
	float                                              TransientToolTipOffset;                           		// 0x09DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LookDirToReplicate;                               		// 0x09E0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LookTargetToReplicate;                            		// 0x09EC (0x000C) [0x0000000000000000]              
	float                                              LastToolTipActorChangeTime;                       		// 0x09F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayerStatEarnedManaBuffer;                       		// 0x09FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastPlayerStatManaWriteTime;                      		// 0x0A00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastToolTipActorShowDetailsTime;                  		// 0x0A04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PulseTargetingIndicatorTime;                      		// 0x0A08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefTargetableInterface*                  LastTargetingIndicatorTarget;                     		// 0x0A0C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0A10 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FVector                                     PreviousMouseCoords;                              		// 0x0A14 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      leaderboardWrite;                                 		// 0x0A20 (0x0004) [0x0000000000000000]              
	class UDunDefPlayerStats*                          myStats;                                          		// 0x0A24 (0x0004) [0x0000000000000000]              
	int                                                TargetingTeam;                                    		// 0x0A28 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                HotKeySet;                                        		// 0x0A2C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FHighDigitInt                               LastReplicatedBankedMana;                         		// 0x0A30 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastReplicatedBankedManaTime;                     		// 0x0A40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     heldLevelTag;                                     		// 0x0A44 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      heldGameDifficulty;                               		// 0x0A50 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              ToolTipMouseOffsetX;                              		// 0x0A54 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipMouseOffsetY;                              		// 0x0A58 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DesiredLockedMovementAccel;                       		// 0x0A5C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            DisabledAbilities;                                		// 0x0A68 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           suffix4;                                          		// 0x0A74 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    suffixValue4;                                     		// 0x0A80 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           suffix3;                                          		// 0x0A8C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    suffixValue3;                                     		// 0x0A98 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           suffix2;                                          		// 0x0AA4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    suffixValue2;                                     		// 0x0AB0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           suffix1;                                          		// 0x0ABC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    suffixValue1;                                     		// 0x0AC8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      BossTimerValues;                                  		// 0x0AD4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDunDef_SeqAct_ConcatString* >       BossTimerConcats;                                 		// 0x0AE0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FmetPlayers >                       playersToAddToMetList;                            		// 0x0AEC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAdvancedConsoleCommandsSettings*            MyAdvancedConsoleCommandsSettings;                		// 0x0AF8 (0x0004) [0x0000000000000000]              
	struct FPRIRelatedInfo                             priInfo;                                          		// 0x0AFC (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                movieMask;                                        		// 0x0B1C (0x0004) [0x0000000000000000]              
	float                                              overLordCameraMovementSpeed;                      		// 0x0B20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              altOverlovedCameraMult;                           		// 0x0B24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              overLordGamepadMovementSpeed;                     		// 0x0B28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              overlordGamepadZoomScale;                         		// 0x0B2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastRequestedRestartTime;                         		// 0x0B30 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              cursorAccel;                                      		// 0x0B34 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37014 ];

		return pClassPointer;
	};

	void SetGlobalEnemyHealth ( int Health, unsigned long HurtEnemies, unsigned long UpdateEnemyStats, int HurtAmount );
	void EnableBuffDebug ( unsigned long bEnable );
	void SpawnRandomItem ( float Quality, float Multiplier );
	void SkipToWave ( int Wave );
	void ToggleQualityOutline ( );
	void ToggleHideGoodEquipmentOverlay ( );
	void ToggleHideMiniMapBillboards ( );
	void SetHideMiniMapBillboards ( unsigned long Hide );
	void ToggleHideMiniMapTowers ( );
	void ToggleHideMiniMapTowers_prev ( );
	void toggleLootTable ( );
	void toggleItemBeams ( );
	void ServerKillMe ( );
	void KillMe ( );
	float GetDroppedEquipmentCheckRadius ( );
	float GetEquipmentPickupRange ( );
	void SetOwnerNoSee ( unsigned long bOwnerNoSee, unsigned long bOwnerNoSeeWeapon );
	void CheckLobbyAchievements ( );
	void ShowOverlordBounds ( );
	void SetOverlordMinXY ( float MinX, float MinY );
	void SetOverlordMaxXY ( float MaxX, float MaxY );
	void SetOverlordHeight ( float MaxHeight, float MinHeight );
	void RotateCameraRelease ( );
	void RotateCameraPress ( );
	void ReleaseActionWheel ( );
	bool AllowBindingSet ( );
	bool AbilityModifierHeld ( );
	bool UseMouseIntersectionForPlacement ( );
	bool UseTowerPlacementLocation ( );
	void SetTargetingTeam ( int aTeam );
	void DoWeaponSwap ( );
	void ModifyJumpZ ( float* playerJumpZ );
	bool IsForceFeedbackAllowed ( );
	void ClientSetWeaponInstigator ( class ADunDefWeapon* aWeapon, class APawn* anInstigator );
	void ServerRequestWeaponInstigator ( class ADunDefWeapon* aWeapon );
	void ClientExecRPC ( class AActor* twoWayRPCInterfaceActor, struct FName CommandName, struct FName nameParam1, struct FName nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, struct FVector vecParam1, struct FVector VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2 );
	void ServerExecRPC ( class AActor* twoWayRPCInterfaceActor, struct FName CommandName, struct FName nameParam1, struct FName nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, struct FVector vecParam1, struct FVector VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2 );
	bool InFPV ( );
	void InitPlayerReplicationInfo ( );
	void ServerActivateCrystal ( );
	void ResetBossTimers ( );
	bool ValidateStringConcat ( class UDunDef_SeqAct_ConcatString* Node );
	void BossTimerSkip ( );
	void KickAllSplits ( );
	void QuickAddSplits ( );
	void ControlEmulatorPlayer4 ( );
	void ControlEmulatorPlayer3 ( );
	void ControlEmulatorPlayer2 ( );
	void ControlEmulatorPlayer1 ( );
	void ToggleSplitScreen ( );
	void ToggleHysteresis ( );
	void ToggleItemCensor ( );
	void RepairAllTowers ( );
	void UpgradeAllTowers ( int numLevels );
	void DowngradeAllTowers ( int numLevels );
	void ActivateCrystalForAllPlayers ( );
	void ActivateCrystal ( );
	void PrivatelyDropAllMana ( );
	void DropAllMana ( );
	void AddCheats ( );
	void ToggleSpectator ( );
	void UnlockCostume ( class UDunDefHero* ForHeroArchetype, int costumeIndex, class USoundCue* GivenCostumeSound, unsigned long bNotifyUser, unsigned long bIsHeroUnlock );
	void HackLoadingRankedHeroesFailed ( );
	void HackLoadingRankedHeroesComplete ( );
	bool CanAllPlayersPlayOnline ( unsigned long checkPermissions );
	void PlayBeepSound ( );
	void ServerFinalTradeConfirmation ( );
	void ClientRequestFinalTradeConfirmation ( );
	void ShowTradeUI ( class ATradeManager* myTrade, unsigned char ForceSceneStackPriority, unsigned long autoTopSceneStack );
	void ServerCancelTrade ( );
	void ServerRequestInitiateTrade ( class ADunDefPlayerReplicationInfo* withOtherPRI );
	void ClientAddTradeEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo netInfo );
	void ClientRemoveTradeEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo netInfo );
	void ClientUpdateTradeEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo netInfo );
	void ServerAddTradeEquipment ( struct FEquipmentNetInfo netInfo );
	void ServerRemoveTradeEquipment ( struct FEquipmentNetInfo netInfo );
	void ServerSetTradeConfirmation ( unsigned long bConfirm );
	void ServerUpdateTradeMana ( struct FHighDigitInt tradeMana );
	void ServerUpdateTradeEquipment ( struct FEquipmentNetInfo netInfo );
	void GetCurrentToolTipActors ( TArray< class UDunDefToolTipInterface* >* CurrentToolTipActors );
	void SetForceSpecatorMode ( unsigned long bEnable );
	bool AnyLocalPlayerWantsDamageNumbers ( class AWorldInfo* aWorldInfo );
	bool CanInvestMana ( int requiredWavesAfterStart );
	void CleanupPawn ( );
	bool HasRecentlyFired ( float MinTimeSinceLastFiring );
	float GetRespawnTimeMultiplier ( );
	class ULocalPlayer* GetLocalPlayer ( );
	void AdjustSplitScreenName ( struct FString NewName );
	void StartFire ( unsigned char FireModeNum );
	void SetForceCamTarget ( class ACameraActor* camTarget );
	void eventClientWeaponFired ( class ADunDefWeapon* aWeapon, unsigned char FireMode, unsigned long bPlayForceFeedback, class UForceFeedbackWaveform* FFWaveform );
	void eventClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void StartedPlayingMovie ( struct FString MovieName, int AdditionalMovieID );
	bool IsMobile ( );
	void OnDLCRemoved ( );
	void eventClearOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void CheckDLCMasks ( );
	void ShowWaitingForDLCMasksMessage ( );
	void RequestDLCMasks ( unsigned long showMessage );
	void ClientInitCompatibilityChecks ( );
	void GenericBootToMenu ( struct FString Title, struct FString Description );
	void HandleBootedByDLC ( );
	void MobileSetCursorToAutoTarget ( class UCanvas* C );
	void MobileFireReleased ( );
	void MobileFirePressed ( );
	void MobileAltFireReleased ( );
	void MobileAltFirePressed ( );
	void MobileTouchTapped ( );
	void MobileTouchUnHold ( );
	void MobileTouchHold ( );
	void MobileTouchPressed ( );
	void MobileTouchReleased ( );
	void ServerSetUsingGamepadControl ( unsigned long bUseGamepad );
	void SetUsingGamepadControl ( unsigned long bUseGamepad );
	class UDunDefHeroManager* GetHeroManager ( );
	void GiveEquipmentToItemBox ( struct FEquipmentNetInfo theEquipmentInfo, unsigned long bNotifyUser, class USoundCue* GivenEquipmentSound, unsigned long bAutoLockEquipment, unsigned long bForceEquipmentIntoItemBox, unsigned long bOnlyGiveToUniqueProfile );
	void UpdateForOptions ( struct UDunDefHeroManagerNative_FOptionsFixedStruct* newOptions );
	bool IsPlayerOnMuteList ( struct FUniqueNetId PlayerNetId );
	void eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventServerMutePlayer ( struct FUniqueNetId PlayerNetId );
	void ServerInitiateMute ( );
	void UnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void MutePlayer ( struct FUniqueNetId PlayerNetId, unsigned long selfInitiated );
	void eventClientMutePlayer ( struct FUniqueNetId PlayerNetId );
	void ServerRefreshMutingForTravel ( );
	int GetTargetingTeam ( );
	void eventClientWasKicked ( );
	void ClientSetRichPresence ( int presenceId, int missionId );
	int GetNumPlayersWhoPossessedPawns ( );
	bool HasAnyLocalPlayerPossessedPawn ( );
	void SetBankedMana ( struct FHighDigitInt boxInfo, unsigned long bAddFromHeroMana, unsigned long bIgnoreBankLimit );
	struct FHighDigitInt CalculateBankedMana ( struct FHighDigitInt theInfo );
	void ReAdjustBankedMana ( );
	void RemoveBankedMana ( struct FHighDigitInt boxInfo, unsigned long bAddFromHeroMana, unsigned long bIgnoreBankLimit );
	void AddBankedMana ( struct FHighDigitInt boxInfo, unsigned long bAddFromHeroMana, unsigned long bIgnoreBankLimit );
	void NotifyBankMana ( );
	struct FString GetBankedManaString ( );
	int GetBankedMana ( unsigned char* atMaxBank );
	struct FHighDigitInt GetMaxManaItemBox ( );
	struct FHighDigitInt GetBankedManaItemBox ( unsigned char* atMaxBank );
	void NotifyJoiningGameFromInvite ( );
	void NotifyNotEnoughSpaceInInvite ( );
	void NotifyNotAllPlayersCanJoinInvite ( );
	void NotifyInviteFailed ( );
	void NotifyNotSameModeOnInvite ( );
	void ClientNetOpenUIScene ( class UDunDefUIScene* aUIScene, unsigned long bOpenForPlayer, unsigned long bCloseAllOtherScenes, int CustomInitIndex );
	bool CanReload ( );
	int GetNumPlayersWhoHaveSpawned ( );
	void DistributeManaAmongPlayers ( float ManaAmount, int numRecursions, unsigned long bAllowBanking, unsigned long bOnlyPutInBank );
	void ClientAddManaToBank ( float ManaAmount, unsigned long bIgnoreBankLimit );
	void ClientAddManaToBankHDI ( struct FHighDigitInt ManaAmount, unsigned long bIgnoreBankLimit );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	bool ModMapCheck ( class UDunDefOnlineGameSettingsConsole* OnlineGameSettingsConsoleRef );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool IsSameVersion ( class UOnlineGameSettings* gameToCheck );
	bool IsSameMode ( class UOnlineGameSettings* gameToCheck );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate, unsigned long bForcePause );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void TryToAddToMetList ( );
	void ClientAddToRecentPlayersList ( struct FUniqueNetId NetId, struct FString PlayerName );
	bool IsHoldingToTalk ( );
	bool IsPrimaryAuthorityProfile ( );
	bool IsPrimaryProfile ( );
	void ClientDoUnlockAchievment ( unsigned char Achievement );
	void FlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass );
	void ClientWriteMidGameLeaderboardStats ( class UClass* OnlineStatsWriteClass, int CombatTime );
	void CheckBestStats ( int myStatPlayerIndex, int BestTime );
	void ClientBeginStatRecording ( struct FString LevelTag, unsigned char GameDifficulty );
	void CheckUserIDForStats ( );
	void ClientReportGameStat ( int StatClassIndex, int Value, struct FName SplitName );
	void ClientCheckPushToTalk ( );
	void SetStatsReadString ( struct FString LeaderboardName );
	void SetCurrentCampaignTag ( struct FString campaignTag, unsigned long forceSave );
	void SetCurrentDifficulty ( unsigned char difficulty );
	void RetryLeaderboardWrite ( );
	void ServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View );
	void ServerMoveEx ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, struct FVector RemoteLookDir );
	void ServerMoveExWithLook ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, struct FVector RemoteLookDir, struct FVector RemoteLookTarget );
	void DualServerMoveEx ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, struct FVector RemoteLookDir );
	void DualServerMoveExWithLook ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, struct FVector RemoteLookDir, struct FVector RemoteLookTarget );
	void CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void ClientGotoState ( struct FName NewState, struct FName NewLabel );
	void RegisterStatHero ( );
	bool IsInputDisabled ( );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void ServerWantToSkipBuildPhase ( unsigned long WantToSkip );
	void TryAutoCombatCamera ( );
	void ClientEnteredCombatPhase ( );
	void ClientEnteredBuildPhase ( );
	void Server_EnteredCombatPhase ( );
	void Server_EnteredBuildPhase ( );
	void AnimNotify_CurrentAbility_Off ( );
	void AnimNotify_CurrentAbility_On ( );
	void ServerChangeToSmallestTeam ( );
	void ClientOpenUI ( class UDunDefUIScene* UISceneTemplate );
	void eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest );
	void SetDesiredLockedMovementAccel ( struct FVector newAccel );
	void GoingToLockedMovementState ( );
	float PushLockedMovementState ( struct FName AnimationName, float AnimationBlendIn, unsigned long AnimationLooping, float AnimationSpeed, float AnimationBlendOut, float TimeFromEndToUnlockInput, float LockTimeOverride, unsigned long enablePrimaryFire, unsigned long enableAltFire, struct FName StateNameOverride, unsigned long bReplicateAnimation, unsigned long ForcePushState, unsigned long bAllowRotation );
	bool IsInLockedMovementState ( unsigned long AnyLockedInputState, unsigned long enablePrimaryFire, unsigned long enableAltFire, struct FName StateNameOverride, unsigned long testStateStack );
	bool PopLockedMovementState ( unsigned long AnyLockedInputState, unsigned long enablePrimaryFire, unsigned long enableAltFire, struct FName StateNameOverride );
	bool IsLockedMovementState ( );
	void StartCastingAbility ( class ADunDefPlayerAbility* ability );
	bool IsCastingPlayerAbility ( );
	bool IsInCastingState ( );
	void OnEndAbility ( class ADunDefPlayerAbility* ability );
	bool CanUseAbility ( class ADunDefPlayerAbility* ability );
	void RemoveDisabledAbility ( class UClass* removedAbility );
	void AddDisabledAbility ( class UClass* disabledAbility );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum );
	void ShowHeroLevelUp ( );
	int GetHeroMaxHealth ( class APawn* forPawn );
	void ServerApplyHeroModifiers ( class APawn* inPawn, unsigned long onPawnSpawn );
	void ServerApplyUpdatedHeroStats ( struct FHeroNetInfo Info, unsigned long DidLevelUp );
	void NotifyLevelUp ( );
	void ServerUpdateEquipmentName ( int equipmentIndex, struct FString EquipmentName, struct FString creatorName, unsigned long bIsVerified );
	void ServerUpdateHeroName ( struct FString HeroName, unsigned long bIsVerified );
	void ServerItemBoxDrop ( class AActor* forgeActor, struct FEquipmentNetInfo netInfo );
	void ServerAddBuff ( struct FsBuffNetInfo Info );
	void ServerUpdateHeroEquipment ( int equipmentIndex, struct FEquipmentNetInfo Info, unsigned long DoNotApplyStats );
	void ServerRemoveHeroEquipment ( int equipmentIndex, unsigned long DoNotDrop );
	void ServerAddHeroEquipment ( struct FEquipmentNetInfo Info, unsigned char Index, unsigned long bDontApplyUpdatedHeroStats );
	void ServerSetHeroNetInfo ( struct FHeroNetInfo heroInfo );
	void ServerFinishedSendingHeroInitial ( );
	void ServerFinishedSendingHeroSwap ( );
	void ServerAddHeroEquipmentInitial ( struct FEquipmentNetInfo Info, unsigned char Index );
	void NotifyRemovedHeroEquipment ( class UHeroEquipment* Equipment, int equipmentIndex, unsigned long DoNotDrop );
	void NotifyAddedHeroEquipment ( class UHeroEquipment* Equipment );
	void Server_InitializeForHero ( class UDunDefHero* hero );
	void DestroyOldPawn ( );
	void ClientActivateNetworkEvent ( struct FName EventName, int EventCustomID, class AActor* EventInstigator, class AActor* EventOriginator, class AActor* EventActor );
	class ADunDefPlayer* GetPlayerPawnArchetype ( );
	class ADunDefPlayerReplicationInfo* GetDunDefPRI ( );
	class USeqAct_Interp* GetControllingMatinee ( unsigned long bForce );
	void SkippedMatinee ( );
	void SkipMatinee ( );
	bool IsInCinematic ( );
	bool ForceNoBlackBox ( );
	void NotifyHeal ( int healAmount );
	void eventDoNotifyDirectorControl ( unsigned long bNowControlling );
	void ClientNotifyDirectorControl ( unsigned long bNowControlling );
	void eventNotifyDirectorControl ( unsigned long bNowControlling );
	void ResetAllGasTraps ( );
	void ResetAllAbilityCooldowns ( );
	void Server_CancelAllAbilities ( unsigned long bOnlyCancelNonStrategyActions );
	void eventSpawnPlayerCamera ( );
	void SetLookTargetToReplicate ( struct FVector theLookTargetToReplicate );
	void SetRotationToReplicate ( struct FVector NewLookDir );
	bool ShouldTargetActor ( class AActor* Actor );
	void SetTargetingIndicatorPosition ( struct FVector Position );
	bool IsOverGround ( class AActor** targetRef );
	bool AllowTargetUpdating ( );
	void DoPlayerMove ( float DeltaTime, unsigned long bForceMovement, unsigned long bForceNoMouseWorldOrigin );
	bool AllowAcceleration ( );
	float GetPlayerGroundSpeedModifier ( );
	void ServerUpdateBankedMana ( struct FHighDigitInt bankedMana );
	void SetTargetingIndicatorHidden ( );
	void SetTargetingIndicatorNormal ( float DeltaTime );
	void SetTargetingIndicatorOverEnemy ( class UDunDefTargetableInterface* theTarget, float DeltaTime );
	void SendInitialHeroDataToServer ( unsigned long swapHero );
	void TrySendingStats ( );
	void TryRemoteIDRegistration ( );
	void ReceivedPlayerReplicationInfo ( );
	void UpdateGamepadControl ( );
	void PostControllerIdChange ( );
	void PreControllerIdChange ( );
	void eventReceivedPlayer ( );
	void ShowHeroSelectionUI ( unsigned long bForce );
	void ServerRestartPlayer ( );
	void ClientPostLogin ( );
	void Server_PostLogin ( );
	int GetNumLocalPlayerControllers ( );
	void GetPreviousSpectatee ( );
	void GetNextSpectatee ( unsigned long bDontSetCamera );
	void StartSpectatorCamera ( unsigned long bHideHUD, unsigned long bOnlyStartIfInactive );
	void UpdateSpectatorMode ( float DeltaTime, unsigned long bDontHideHud );
	void EndSpectatorMode ( );
	bool IsInSpectatorMode ( );
	void HandleNoRespawn ( );
	void DoCheckRespawn ( unsigned long justAttemptRespawn );
	void LocalAttemptSpawn ( );
	void CheckRespawn ( unsigned long justAttemptRespawn );
	void PrivateSetHero ( class UDunDefHero* hero );
	class UDunDefHero* GetHero ( unsigned long CreateHeroIfNone );
	void Server_DestroyPlayerAbilities ( );
	void Server_CreatePlayerAbilities ( class ADunDefPlayer* ForPlayer );
	class ADunDefPlayerAbility* GetAbilityByName ( struct FName AbilityName );
	class ADunDefPlayerAbility* GetAbilityByClass ( class UClass* AbilityClass );
	void ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType );
	void CreateHUD ( );
	void CheckForPlayerWaiting ( );
	void eventPlayerTick ( float DeltaTime );
	void DropAllEquipment ( );
	void DoRespawnEffect ( );
	void NotifyHealthChange ( );
	void ClientNotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void ClientActivation ( class AActor* activatableActor, int activationType );
	void ServerRequestActivation ( class AActor* activatableActor, int activationType );
	class UDunDefActivatableInterface* FindBestActivatableActor ( unsigned long DontCheckViability, int activationType );
	bool ShouldDrawGameplayCursor ( );
	void DrawHUD ( class AHUD* H );
	bool AllowCameraRotation ( );
	bool IsWithinNonSplitScreenOverlayDist ( struct FVector CamLoc, struct FVector actorLoc );
	void ServerRequestDestroy ( );
	void AddFloatingDamageEntryInvincible ( class AActor* forActor, int DamageAmount, struct FVector Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset );
	void AddFloatingDamageEntry ( class AActor* forActor, int DamageAmount, struct FVector Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset );
	void FinishQuitToMainMenu ( );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	struct FName GetSessionName ( );
	bool CleanupOnlineSubsystemSession ( unsigned long bQuitToMainMenu );
	void QuitToMainMenu ( unsigned long forceImmediateReturn );
	void ClientAddToScore ( int newScore, int Points, unsigned char ScoreTagReason, struct FLinearColor ScoreTagColor, float ScoreTagAdditionalNum, float ScoreTagSecondaryNum, class AActor* ActorArchetype );
	void AddToScore ( int Points, unsigned char ScoreTagReason, struct FLinearColor ScoreTagColor, float ScoreTagAdditionalNum, float ScoreTagSecondaryNum, class AActor* ActorArchetype );
	void ClientTeleported ( struct FVector newPawnLoc, struct FRotator newPawnRot );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void NotifyManaChanged ( unsigned long bJustUpdate );
	void CheckManaPlayerStat ( unsigned long forceFlush );
	float AddManaPower ( float signedManaPower, unsigned long onlyAddTotal, unsigned long forceSubtractionOnLobby, unsigned long bIgnoreBankLimit );
	bool CanAffordMana ( float Amount );
	void ServerCollectManaToken ( class ADunDefManaToken* Token );
	bool CanDoInput ( );
	void CheckForStartWave ( );
	void NoGRICheck ( );
	void eventPostBeginPlay ( );
	void Cleanup ( );
	void ClientAboutToTravel ( );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void SeamlessTravelFrom ( class APlayerController* OldPC );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void ServerSwappedHeroes ( );
	void PawnDied ( class APawn* inPawn );
	void ClientCheckToApplyLocalLevelUps ( );
	void ServerClearAutoAimTarget ( struct FVector LookTarget );
	void ServerSetAutoAimTarget ( class AActor* autoAimTarget );
	void ServerRequestManualReplication ( class AActor* replicator );
	void ClientProcessReplicateEquipmentData ( class AActor* replicator, struct FEquipmentNetInfo equipmentInfo, int AdditionalData1, int AdditionalData2, int AdditionalData3 );
	void ServerRefreshSetupScreen ( );
	void UpdateProgressToServer ( );
	void ServerAddBeaten ( struct FString Beaten, unsigned char difficulty, unsigned long bIsHardcoreMode );
	void ServerAddProgress ( struct FString Progress, unsigned char difficulty );
	void ServerUnregisterRemoteID ( );
	void ClientSetUserNickname ( struct FString NickName );
	void WaitForNickname ( );
	void ClientSetRemoteID ( int remoteID );
	void ServerRegisterRemoteID ( struct FString NickName );
	bool ServerGetUniqueIDToRegister ( );
	void ClientRestart ( class APawn* NewPawn );
	void AcknowledgePossession ( class APawn* P );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void EnterStartState ( );
	void Server_CheckTowerAssociations ( class ADunDefPawn* inPawn );
	void AdjustControlSchemeForOptions ( struct UDunDefHeroManagerNative_FOptionsFixedStruct* theOptions );
	int GetPawnDistance ( );
	void NotifyLeaving ( );
	void DestroyOwnedTowers ( );
	void TransferTowersOwnership ( class APawn* toPawn );
	void ServerExecuteCommand ( struct FName Command, class AActor* ActorRef );
	void UpdateStateFromAdjustment ( struct FName NewState );
	void ClientAddBuffToGame ( class ADunDefPlayerReplicationInfo* remotePRI, struct FsBuffNetInfo BuffInfo );
	void ClientUpdateRemoteHeroEquipment ( class ADunDefPlayerReplicationInfo* remotePRI, unsigned char Index, struct FEquipmentNetInfo netInfo );
	void ClientRemoveRemoteHeroEquipment ( class ADunDefPlayerReplicationInfo* remotePRI, unsigned char Index );
	void ClientAddRemoteHeroEquipment ( class ADunDefPlayerReplicationInfo* remotePRI, struct FEquipmentNetInfo netInfo, unsigned char Index );
	void ClientSetRemoteHeroInfo ( class ADunDefPlayerReplicationInfo* remotePRI, struct FHeroNetInfo netInfo );
	void ActivateHotKey ( int hkIndex );
	void HotKeyTen ( );
	void HotKeyNine ( );
	void HotKeyEight ( );
	void HotKeySeven ( );
	void HotKeySix ( );
	void HotKeyFive ( );
	void HotKeyFour ( );
	void HotKeyThree ( );
	void HotKeyTwo ( );
	void HotKeyOne ( );
	void HotKeyBind ( );
	void HotKeyOff ( );
	void CheckAlternateActivation ( );
	void CheckActivation ( );
	bool IsActionWheelVisible ( );
	void ServerCallOutOff ( );
	void CallOutOff ( );
	void ServerCallOutOn ( struct FVector overrideCalloutLoc, unsigned long bUseOverrideLoc );
	void CallOutOn ( );
	bool UseCalloutOverrideLoc ( );
	struct FVector GetCalloutOverrideLoc ( );
	void ToggleActionWheelExec ( );
	void ZoomCameraOut ( );
	void ZoomCameraIn ( );
	void ServerSetPlacementTowerRangeScaler ( float RangeScale );
	bool CyclePlacementTowerRadius ( );
	void IncreasePlacementTowerRadius ( );
	void DecreasePlacementTowerRadius ( );
	void ShowMyHeroInfo ( unsigned long bForce );
	void CycleZoom ( );
	void DoJump ( );
	bool HasMaxMana ( );
	int RequestAddMana ( int AmountToAdd );
	void RequestSpendMana ( int AmountToSpend );
	void ServerRequestAddMana ( int AmountToAdd );
	void ServerRequestSpendMana ( int AmountToSpend );
	void SetInForgeUI ( unsigned long inForgeUI );
	void ServerSetInForgeUI ( unsigned long inForgeUI );
	void Logout ( );
	bool Login ( int ControllerId, struct FString UserName, struct FString Password );
	void EndedMovie ( );
	void Pause ( unsigned long bForce );
	class ADunDefPlayer* GetNearestPlayerWithinRange ( float Range );
	void ServerDropMana ( int howMuch, unsigned long bNotFromPlayer, unsigned long bDontPlayAnimation, class AActor* fromOtherActor, unsigned long bIsPrivate );
	void DropMana ( float howMuch );
	bool AddBankMana ( float mana, unsigned long bIgnoreBankLimit, unsigned long bAddFromHeroMana );
	void VerifyEquipmentName ( int Index );
	void VerifyHeroName ( );
	void SaveForEveryone ( );
	void SaveHeroes ( );
	float TestWaveStatMultiplier ( int CurrentTestWaveNumber );
	void StopHovering ( );
	void StartHovering ( );
	void JumpReleased ( );
	void JumpPressed ( );
	void KeyboardInputDone ( unsigned long Success );
	bool ForceTargetingCursor ( );
	struct FVector GetPlacingTowerCameraOffset ( );
	class UClass* GetClassFromString ( struct FString ClassName );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefPlayerController::pClassPointer = NULL;

// Class UDKGame.DunDefHero
// 0x0580 (0x05BC - 0x003C)
class UDunDefHero : public UNativeDunDefHero
{
public:
	int                                                HeroAttachmentScaleType;                          		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           DefaultHeroNames;                                 		// 0x0040 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bLockedInDemo : 1;                                		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAltFireAutoTarget : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsMeleeHero : 1;                                 		// 0x004C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDisplayClassNameWhenLocked : 1;                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDisplayClassDescriptionWhenLocked : 1;           		// 0x004C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDisplayRandomHeroNameWhenLocked : 1;             		// 0x004C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPlaySelectionAnims : 1;                          		// 0x004C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bHiddenWhenLocked : 1;                            		// 0x004C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bHiddenInDemo : 1;                                		// 0x004C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bGetActiveEquipmentWeaponInHand : 1;              		// 0x004C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bIsPurchasable : 1;                               		// 0x004C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIncludeInActiveTemplatesList : 1;                		// 0x004C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseLargeDescription : 1;                         		// 0x004C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bOverridePreviewAnimSet : 1;                      		// 0x004C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bIsLocalLoadedHero : 1;                           		// 0x004C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bIsNameOnlineVerified : 1;                        		// 0x004C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bIsNameOnlineRejected : 1;                        		// 0x004C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bHasCompleteArmorSet : 1;                         		// 0x004C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bWantsSecondaryWeaponForComparison : 1;           		// 0x004C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bAlwaysForceMainHandWeap : 1;                     		// 0x004C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	int                                                SkillIndex;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighLevelExpBonusPercent;                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExpBonusPercent;                                  		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MouseChaseCameraOffsetY;                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      StatLevelRequirementOverrides[ 0xB ];             		// 0x0060 (0x000B) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UniqueTemplateHeroID;                             		// 0x006B (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      MyHeroType;                                       		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      bDidRespec;                                       		// 0x006D (0x0001) [0x0000000000000000]              
	unsigned char                                      bGaveExpBonus;                                    		// 0x006E (0x0001) [0x0000000000000000]              
	unsigned char                                      bAllowRename;                                     		// 0x006F (0x0001) [0x0000000000000000]              
	unsigned char                                      SubstituteNameIndex;                              		// 0x0070 (0x0001) [0x0000000000000000]              
	unsigned char                                      HeroWeaponType;                                   		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     String_ApplyRespec;                               		// 0x0074 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     String_NoPointsToRespec;                          		// 0x0080 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     String_NoLevelForExpBonus;                        		// 0x008C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     String_ApplyRename;                               		// 0x0098 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     String_AlreadyGaveExpBonus;                       		// 0x00A4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     String_BoughtRespec;                              		// 0x00B0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     String_BoughtRename;                              		// 0x00BC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     String_BoughtXPBonus;                             		// 0x00C8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     String_AtMaxLevel;                                		// 0x00D4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GivenCostumeString;                               		// 0x00E0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GiveHeroString;                                   		// 0x00EC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	int                                                CostOfRespec;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CostOfRename;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CostOfExpBonus;                                   		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BoughtServiceSound;                               		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   RemovedHeroSelectionSound;                        		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BoughtServiceColor;                               		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      GivenCostumeColor;                                		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentCostumeIndex;                              		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HeroUnlockID;                                     		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    OverridePreviewAnimSet;                           		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroSpeed;                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroSpeed;                           		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroAbilityOne;                   		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_HeroAbilityOne;                    		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroAbilityOne;                      		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_HeroAbilityOne;                      		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroAbilityTwo;                   		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_HeroAbilityTwo;                    		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroAbilityTwo;                      		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_HeroAbilityTwo;                      		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_DefenseHealth;                    		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_DefenseHealth;                     		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_DefenseHealth;                       		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_DefenseHealth;                       		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_DefenseDamage;                    		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_DefenseDamage;                     		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_DefenseDamage;                       		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_DefenseDamage;                       		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_DefenseAttackRate;                		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_DefenseAttackRate;                 		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_DefenseAOE;                       		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_DefenseAOE;                        		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_DefenseAOE;                          		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_DefenseAOE;                          		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroSpeed_Competitive;            		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroSpeed_Competitive;               		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroAbilityOne_Competitive;       		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_HeroAbilityOne_Competitive;        		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroAbilityOne_Competitive;          		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_HeroAbilityOne_Competitive;          		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroAbilityTwo_Competitive;       		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_HeroAbilityTwo_Competitive;        		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroAbilityTwo_Competitive;          		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_HeroAbilityTwo_Competitive;          		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_DefenseHealth_Competitive;        		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_DefenseHealth_Competitive;         		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_DefenseHealth_Competitive;           		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_DefenseHealth_Competitive;           		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_DefenseDamage_Competitive;        		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_DefenseDamage_Competitive;         		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_DefenseDamage_Competitive;           		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_DefenseDamage_Competitive;           		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_DefenseAttackRate_Competitive;    		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_DefenseAttackRate_Competitive;     		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_DefenseAOE_Competitive;           		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_DefenseAOE_Competitive;            		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_DefenseAOE_Competitive;              		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExptFull_DefenseAOE_Competitive;              		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PurchaseURLSteam;                                 		// 0x01E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PurchaseURLGeneral;                               		// 0x01EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            AccessoryTypes;                                   		// 0x01F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefPlayerReplicationInfo*                OwnerPRI;                                         		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FHotKey >                           HotKeys;                                          		// 0x0208 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FHeroCostumeTemplate >              HeroCostumes;                                     		// 0x0214 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     StatNames[ 0xB ];                                 		// 0x0220 (0x0084) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StatDescriptions[ 0xB ];                          		// 0x02A4 (0x0084) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class USurface*                                    StatIcons[ 0xB ];                                 		// 0x0328 (0x002C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USurface*                                    EquipmentStatIcons[ 0xB ];                        		// 0x0354 (0x002C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ADunDefPlayer*                               PlayerTemplate;                                   		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UActionWheel*                                ActionWheelTemplate;                              		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefPlayerAbility*                        WeaponAbilityTemplate;                            		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ADunDefPlayerAbility* >              PlayerAbilityTemplates;                           		// 0x038C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ADunDefPlayerAbility* >              AdditionalAbilityTemplates;                       		// 0x0398 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UActionWheelEntry* >                 AdditionalActionWheelEntries;                     		// 0x03A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefPlayer*                               PlayerTemplate_Competitive;                       		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UActionWheel*                                ActionWheelTemplate_Competitive;                  		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefPlayerAbility*                        WeaponAbilityTemplate_Competitive;                		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ADunDefPlayerAbility* >              PlayerAbilityTemplates_Competitive;               		// 0x03BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ADunDefPlayerAbility* >              AdditionalAbilityTemplates_Competitive;           		// 0x03C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UActionWheelEntry* >                 AdditionalActionWheelEntries_Competitive;         		// 0x03D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     HeroClassDisplayName;                             		// 0x03E0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HeroClassDescription;                             		// 0x03EC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class ADunDefWeapon*                               HeroDefaultWeaponTemplate;                        		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_HeroInfo*                                HeroInfoUITemplate;                               		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ClassNameColor;                                   		// 0x0400 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   HeroIconMaterial;                                 		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          ColorableMiniMapIconMat;                          		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    TalkingFrame;                                     		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    TalkingIcon;                                      		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroTalkingSize;                                  		// 0x0420 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingFrameSize;                                 		// 0x0424 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingIconSize;                                  		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingIconOffsetX;                               		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingIconOffsetY;                               		// 0x0430 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingNameTextSize;                              		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingNameTextOffsetX;                           		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingNameTextOffsetY;                           		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingYOffset;                                   		// 0x0440 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingYPadding;                                  		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingXPadding;                                  		// 0x0448 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TalkingScale;                                     		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       TalkingNameTextFont;                              		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  TinyIcon;                                         		// 0x0454 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     TinyIconPath;                                     		// 0x0458 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            MyHeroTypes;                                      		// 0x0464 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              StatBoostCapInitial_HeroDamage;                   		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpFull_HeroDamage;                           		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_HeroDamage;                        		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroDamage;                       		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroDamage;                          		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroDefenseAttackRateLinearFactor;                		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroDefenseAttackRateExponentialFactor;           		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroHealthExponentialFactor;                      		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroHealthLinearFactor;                           		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroHealthExponentialFactor_Competitive;          		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroHealthLinearFactor_Competitive;               		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumDamageResistance;                          		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatBoostCapInitial_HeroDamage_Competitive;       		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpFull_HeroDamage_Competitive;               		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_HeroDamage_Competitive;            		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroDamage_Competitive;           		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroDamage_Competitive;              		// 0x04B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroDefenseAttackRateLinearFactor_Competitive;    		// 0x04B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroDefenseAttackRateExponentialFactor_Competitive;		// 0x04B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GameplayInstanceID;                               		// 0x04BC (0x0004) [0x0000000000000000]              
	int                                                HeroHealthModifier;                               		// 0x04C0 (0x0004) [0x0000000000000000]              
	int                                                HeroSpeedModifier;                                		// 0x04C4 (0x0004) [0x0000000000000000]              
	int                                                HeroDamageModifier;                               		// 0x04C8 (0x0004) [0x0000000000000000]              
	int                                                HeroCastingModifier;                              		// 0x04CC (0x0004) [0x0000000000000000]              
	int                                                HeroAbilityOneModifier;                           		// 0x04D0 (0x0004) [0x0000000000000000]              
	int                                                HeroAbilityTwoModifier;                           		// 0x04D4 (0x0004) [0x0000000000000000]              
	int                                                HeroDefenseHealthModifier;                        		// 0x04D8 (0x0004) [0x0000000000000000]              
	int                                                HeroDefenseAttackRateModifier;                    		// 0x04DC (0x0004) [0x0000000000000000]              
	int                                                HeroDefenseDamageModifier;                        		// 0x04E0 (0x0004) [0x0000000000000000]              
	int                                                HeroDefenseAreaOfEffectModifier;                  		// 0x04E4 (0x0004) [0x0000000000000000]              
	int                                                HeroLevel;                                        		// 0x04E8 (0x0004) [0x0000000000000000]              
	int                                                HeroLevelCap;                                     		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HeroLevelCapDemo;                                 		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HeroExperience;                                   		// 0x04F4 (0x0004) [0x0000000000000000]              
	int                                                ManaPower;                                        		// 0x04F8 (0x0004) [0x0000000000000000]              
	int                                                LastPawnHealth;                                   		// 0x04FC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MyHeroIconMatInst;                                		// 0x0500 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MyTalkingHeroIconMatInst;                         		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MyTalkingIconMatInst;                             		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   ColorableMiniMapIconMatInst;                      		// 0x050C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GUID1;                                            		// 0x0510 (0x0004) [0x0000000000000000]              
	int                                                GUID2;                                            		// 0x0514 (0x0004) [0x0000000000000000]              
	int                                                GUID3;                                            		// 0x0518 (0x0004) [0x0000000000000000]              
	int                                                GUID4;                                            		// 0x051C (0x0004) [0x0000000000000000]              
	struct FString                                     HeroName;                                         		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FHeroColorTemplate >                colorTemplates;                                   		// 0x052C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                color1;                                           		// 0x0538 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                color2;                                           		// 0x0548 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                color3;                                           		// 0x0558 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UPlayer*                                     ActivePlayer;                                     		// 0x0568 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UHeroEquipment* >                    HeroEquipments;                                   		// 0x056C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ADunDefTower* >                      HeroTowers;                                       		// 0x0578 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UHeroEquipment*                              HeroWeaponEquipment;                              		// 0x0584 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            HeroWeaponTypes;                                  		// 0x0588 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UDunDefHero*                                 BasedOnHeroTemplate;                              		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                UserID;                                           		// 0x0598 (0x0004) [0x0000000000000000]              
	struct FColor                                      DeadTalkerColor;                                  		// 0x059C (0x0004) [0x0000000000000000]              
	struct FString                                     TowerHeroInfoString;                              		// 0x05A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< unsigned char >                            AllowedDualEquipmentTypes;                        		// 0x05AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefEmitterSpawnable*                     activeCosmeticSetEffect;                          		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37038 ];

		return pClassPointer;
	};

	void UpdateBuffValues ( );
	TArray< class ADunDefTower* > GetHeroTowerArchetypes ( );
	void OnTowerDestroyed ( class ADunDefTower* Tower );
	void OnTowerCreated ( class ADunDefTower* Tower );
	bool CheckHeroForCosmeticSet ( class ACosmeticSetBonus* theBonus );
	void SetCosmeticSetBonus ( class ACosmeticSetBonus* theBonus );
	void CheckForCosmeticSet ( );
	bool GetEquipmentOverrideStatValue ( unsigned char levelUpValue, int* OverridenValue, int* doesEquipmentModify );
	void DetachAllEquipments ( );
	void AttachAllEquipments ( );
	void ReattachAllEquipments ( );
	void SetOwnerNoSee ( class ADunDefPlayer* aPlayer, unsigned long ownerNoSee, unsigned long ownerNoSeeWeapon );
	struct FString GetTowerHeroInfoLabelString ( );
	bool AllowForSelection ( class ULocalPlayer* ForPlayer );
	struct FString GetGivenHeroMessage ( );
	struct FString GetGivenCostumeMessage ( int costumeIndex );
	bool IsHeroUnlocked ( class ULocalPlayer* ForPlayer, int* lockedByDemo );
	bool IsCostumeUnlocked ( class ULocalPlayer* ForPlayer, int costumeIndex );
	int GetNextUnlockedCostumeIndex ( class ULocalPlayer* ForPlayer, int CurrentIndex );
	int GetNumberOfUnlockedCostumes ( class ULocalPlayer* ForPlayer );
	class USoundCue* GetRemovedHeroSelectionSound ( int CostumeIndexOverride );
	class UAnimSet* GetCharacterAnimSet ( int CostumeIndexOverride );
	class ADunDefPlayer* GetPlayerTemplate ( int CostumeIndexOverride, unsigned long bForceNoCompetitive );
	class UMaterialInterface* GetHeroIconMaterial ( int CostumeIndexOverride );
	class UMaterialInterface* GetColorableMiniMapIconMat ( int CostumeIndexOverride );
	class USkeletalMesh* GetCharacterMesh ( int CostumeIndexOverride );
	bool AtMaxExperience ( );
	void CleanUpActionWheel ( );
	void ResetForNewMap ( );
	float GetRespawnTimeMultiplier ( );
	void TransferAllEquipmentToItemBox ( );
	void ResetNameVerification ( );
	int GetCostOfRespec ( );
	int GetCostOfExpBonus ( );
	int GetCostOfRename ( );
	void SetName ( struct FString NewName );
	bool AllowRenameHero ( int bankedMana, struct FString* resultString );
	bool AllowExpBonus ( int bankedMana, struct FString* resultString );
	bool AllowRespec ( int bankedMana, struct FString* resultString );
	bool DoRename ( );
	bool DoExpBonus ( );
	bool DoRespec ( unsigned long bDontChargeOrSave );
	class ADunDefPlayerController* GetPC ( );
	struct FString GetSafeHeroName ( );
	struct FString GetLeaderboardName ( );
	struct FString GetSubstituteHeroName ( );
	void LocalCustomNameRejected ( );
	void LocalCustomNameVerified ( );
	struct FString GetCustomName ( );
	bool DoesCustomNameNeedVerification ( );
	bool IsAuthority ( );
	void NotifyHero_WeaponDidDamage ( class ADunDefPlayer* fromPlayer, class UDunDefTargetableInterface* aTarget, int Damage, struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType );
	void NotifyHero_AnimNotifyEquipmentAttachment ( int NotifyID, class USkeletalMeshComponent* equipmentSkelComp );
	void NotifyHero_PawnDied ( );
	void NotifyHero_PawnJumped ( );
	void NotifyHero_PawnAttacked ( int FireMode );
	void NotifyHero_PawnTookDamage ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void MultiCastHeroEvent ( struct FName EventName, class UHeroEquipment* forEquipment, struct FName nameParam1, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1 );
	void ExecHeroEvent ( int equpmentIndex, struct FName EventName, struct FName nameParam1, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1 );
	int GetManaPower ( );
	int GetEquipmentComparisonIndex ( class UHeroEquipment* anotherEquipment );
	void DrawTalker ( class UCanvas* C, int Count, float Scale, float talkerOpacity );
	bool MeetsHeroLevelRequirement ( unsigned char statType );
	class ADunDefPlayerAbility* GetPlayerAbilityForStat ( unsigned char statType );
	struct FString GetPlayerName ( unsigned long withHeroName, unsigned long heroNameTwoLines );
	struct FString GetHeroNameWithLevel ( );
	struct FsHeroGUID GetGUID ( );
	bool MatchesNetGUID ( struct FHeroNetInfo* netInfo );
	bool MatchesGUID ( int newGUID1, int newGUID2, int newGUID3, int newGUID4 );
	class ADunDefPlayer* GetPlayerPawn ( unsigned long bForceLookup );
	class ADunDefPlayerReplicationInfo* GetOwningPRI ( );
	class UPlayer* GetActivePlayer ( );
	bool IsLocalLoadedHero ( );
	bool IsMyGameplayHero ( class ADunDefPlayerController* forPlayerController );
	bool IsMyHero ( class ADunDefPlayerController* forPlayerController );
	void CheckPointAllocations ( );
	int GetStatPointsFromLevelUps ( int NumLevelUps, int overrideHeroLevel );
	bool AllowPickupWeaponType ( unsigned char weaponType );
	bool AllowEquipmentPickup ( class UHeroEquipment* Equipment, int* reasonForDenial );
	class UHeroEquipment* GetHeroOffHandWeaponEquipment ( );
	class UHeroEquipment* GetHeroWeaponEquipment ( );
	class ADunDefWeapon* GetHeroWeaponTemplate ( class UHeroEquipment** equipmentRef );
	int GetTotalDamageResistance ( class UClass* DamageType, int* AnyNegativeResistances );
	void AdjustDamage ( class ADunDefPlayer* ForPlayer, class UClass* DamageType, int* inDamage, struct FVector* Momentum );
	bool IsCarryingHeroWeapon ( );
	class UHeroEquipment* GetActiveEquipmentOfType ( int EquipmentType, unsigned long bFindSecondary, unsigned long bCheckForComparison );
	class UHeroEquipment* GetEquipmentOfType ( int EquipmentType, unsigned long bFindSecondary, unsigned long bCheckForComparison );
	void ForceRemoveEquipmentByIndex ( int Index );
	void RemoveEquipmentByIndex ( int Index, unsigned long DoNotDrop );
	int GetEquipmentIndex ( class UHeroEquipment* Equipment );
	void eventRemoveEquipment ( class UHeroEquipmentNative* equipmentNative, unsigned long DoNotDrop );
	void AddEquipment ( class UHeroEquipment* Equipment, unsigned long TransferFromItemBox, int atIndex );
	bool ShouldDropMainHandWeapon ( );
	float GetStatModifier ( class UObject* forActor, unsigned char levelUpValue );
	float GetPlayerGravityMultiplier ( );
	float GetPlayerSpeedMultiplier ( );
	int GetTotalEquipmentStatValue ( unsigned char levelUpValue, int* doesEquipmentModify );
	int GetEquipmentStatValue ( unsigned char statType );
	bool CanLevelUpStat ( unsigned char levelUpValue, int NumAdditionalPoints );
	void SetStatValue ( unsigned char levelUpValue, int NewValue, unsigned long addValue );
	int GetStatValue ( unsigned char levelUpValue, unsigned long onlyBaseHeroValue, unsigned long onlyEquipmentValue, int* doesEquipmentModify );
	struct FHeroColorTemplate GetRandomColors ( );
	void SetColorTemplate ( struct FHeroColorTemplate* colorTemp );
	void SetRandomColors ( );
	void SetColors ( struct FLinearColor C1, struct FLinearColor c2, struct FLinearColor C3 );
	struct FString GetStatDescription ( unsigned char levelUpValue );
	class USurface* GetStatIcon ( unsigned char levelUpValue, unsigned long bIsForEquipment );
	struct FString GetStatName ( unsigned char levelUpValue );
	float GetTimeToLevelUp ( );
	int GetManaRequiredForPreviousLevelUp ( );
	int GetManaRequiredForLevelUp ( );
	int GetMaxManaPower ( );
	float GetExperiencePercent ( );
	int GetExpRequiredForPreviousLevel ( );
	int GetExpRequiredForNextLevel ( int levelTest );
	int GetNumLevelUpsAvailable ( );
	void DoLevelUp ( int NumLevelsToAdd, unsigned long dontSaveHero );
	bool HeroLevelUp ( );
	bool ReachedLevelCap ( );
	int GetLevelCap ( );
	bool CanHeroLevelUp ( int levelTest );
	void AddExperience ( int experience );
	void UpdateHeroIconMat ( );
	void InitFromSaveInfo ( struct FHeroSaveInfo Info );
	struct FHeroSaveInfo GetSaveInfo ( );
	void GenerateGUID ( );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	void ReceivedPlayerActor ( class ADunDefPlayer* Player );
	void Updated ( );
	bool CalcToTheLimit ( );
	bool CalcHasCompleteArmorSet ( );
	void ShutDown ( unsigned long isDestruction );
	void NetApplyUpdatedHeroStats ( struct FHeroNetInfo Info );
	void InitFromNetInfo ( struct FHeroNetInfo Info );
	struct FHeroNetInfo GetNetInfo ( );
	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
	bool IsRootEntry ( );
	int GetFolderID ( );
	bool GetEntryEnabled ( class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject );
	void GetDataProps ( int dataSetType, struct FDataEntryProps* dProps );
	struct FString GetDataString ( int dataSetType );
	class UDunDefHero* GetCurrentHeroTemplate ( );
};

UClass* UDunDefHero::pClassPointer = NULL;

// Class UDKGame.DunDefGameReplicationInfo
// 0x0464 (0x0720 - 0x02BC)
class ADunDefGameReplicationInfo : public ANativeDunDefGameReplicationInfo
{
public:
	unsigned long                                      bVerticalMover_TowerCacheDirty : 1;               		// 0x02BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      AllowFriendlyFire : 1;                            		// 0x02BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDontHurtRespawningPlayers : 1;                   		// 0x02BC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsInCombatPhase : 1;                              		// 0x02BC (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      IsInfiniteWaveMode : 1;                           		// 0x02BC (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bUseBuildTimerOnInsane : 1;                       		// 0x02BC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsCompetitive : 1;                               		// 0x02BC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDisableMiniMapEnemyIcons : 1;                    		// 0x02BC (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      IsMixMode : 1;                                    		// 0x02BC (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      bOverridePlayerAbilityStatus : 1;                 		// 0x02BC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRespawnInHardcoreMode : 1;                       		// 0x02BC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPrintGlobalDeathMessages : 1;                    		// 0x02BC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bPreventDetonatingEnemyTraps : 1;                 		// 0x02BC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bNextLevelIsRestartLevel : 1;                     		// 0x02BC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bGiveAwardScores : 1;                             		// 0x02BC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bDoLevelVictory : 1;                              		// 0x02BC (0x0004) [0x0000000000000020] [0x00008000] ( CPF_Net )
	unsigned long                                      UseBuildTimer : 1;                                		// 0x02BC (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      bDisableEnemyInvincibility : 1;                   		// 0x02BC (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bAllowRespawns : 1;                               		// 0x02BC (0x0004) [0x0000000000000020] [0x00040000] ( CPF_Net )
	unsigned long                                      bValidForRTSAward : 1;                            		// 0x02BC (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bDisablePhaseShift : 1;                           		// 0x02BC (0x0004) [0x0000000000000020] [0x00100000] ( CPF_Net )
	unsigned long                                      bCheckForTokensAtMaxMana : 1;                     		// 0x02BC (0x0004) [0x0000000000000020] [0x00200000] ( CPF_Net )
	unsigned long                                      bAllowFreeLookSpectator : 1;                      		// 0x02BC (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bSetTowerUnitCosts : 1;                           		// 0x02BC (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bAllowClientsToProceedToNextLevel : 1;            		// 0x02BC (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bLimitTowerProjectileDistances : 1;               		// 0x02BC (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      bLimitProjectileDistancesUsePlayerRangeMultiplier : 1;		// 0x02BC (0x0004) [0x0000000000000020] [0x04000000] ( CPF_Net )
	unsigned long                                      bUseCompetitivePlayerMiniMapIcons : 1;            		// 0x02BC (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bHideForgeMiniMapInCombatPhase : 1;               		// 0x02BC (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bTriggerPRIEvents : 1;                            		// 0x02BC (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bForceSpeedyBuild : 1;                            		// 0x02BC (0x0004) [0x0000000000000020] [0x40000000] ( CPF_Net )
	unsigned long                                      bUseCompetitiveTargets : 1;                       		// 0x02BC (0x0004) [0x0000000000000020] [0x80000000] ( CPF_Net )
	unsigned long                                      bDisableFamiliarAbilities : 1;                    		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bIsAFKShopMode : 1;                               		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bNonAFKShopExpired : 1;                           		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bAllowPlayerSpawns : 1;                           		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bPreventTowersFromTargetingPlayers : 1;           		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsGameOver : 1;                                  		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bDisableTowerPlacementAndRepair : 1;              		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bDisableWeaponry : 1;                             		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      EnemyWaveEntriesSetupInProgress : 1;              		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bNoElementalEnemies : 1;                          		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bDisableInvisibility : 1;                         		// 0x02C0 (0x0004) [0x0000000000000020] [0x00000400] ( CPF_Net )
	unsigned long                                      bDisableInvincibilityAbilities : 1;               		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDisableManaBombForAssault : 1;                   		// 0x02C0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bDisableWheelOfFortuna : 1;                       		// 0x02C0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bDisableProtonBlast : 1;                          		// 0x02C0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bDisableOvercharge : 1;                           		// 0x02C0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bDisableHeroBoost : 1;                            		// 0x02C0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bDisableTowerBoost : 1;                           		// 0x02C0 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bDisableBloodRage : 1;                            		// 0x02C0 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bDisablePiercingShot : 1;                         		// 0x02C0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bDisableCircularSlice : 1;                        		// 0x02C0 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bDisableFairy : 1;                                		// 0x02C0 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bDisableRemoteBoost : 1;                          		// 0x02C0 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bDisableEnemyDrain : 1;                           		// 0x02C0 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bDisableInstantUpgrade : 1;                       		// 0x02C0 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bDisableMoveTower : 1;                            		// 0x02C0 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bDisableSlamDash : 1;                             		// 0x02C0 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bDisableSiphonStance : 1;                         		// 0x02C0 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bDisableHawkStance : 1;                           		// 0x02C0 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bDisableLightningStance : 1;                      		// 0x02C0 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bUseDamageMult : 1;                               		// 0x02C0 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bDisablePetHealing : 1;                           		// 0x02C0 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bLimitPetHealing : 1;                             		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLimitProjectilesDistance : 1;                    		// 0x02C4 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bDisableEnemyInitialInvincibility : 1;            		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      stoppedCollectingStats : 1;                       		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      PrevInCombatPhase : 1;                            		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceDrawEnemyTowerMiniMapIcons : 1;             		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsPureStrategy : 1;                              		// 0x02C4 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bUseMapInfoObjectiveText : 1;                     		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bFinishedWaveScaling : 1;                         		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      IsLobbyLevel : 1;                                 		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      IsGameplayLevel : 1;                              		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      SendingStats : 1;                                 		// 0x02C4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bWantToSave : 1;                                  		// 0x02C4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bWasDestroyed : 1;                                		// 0x02C4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bForceBuildTimer : 1;                             		// 0x02C4 (0x0004) [0x0000000000000020] [0x00004000] ( CPF_Net )
	unsigned long                                      bDisableTowerAbilities : 1;                       		// 0x02C4 (0x0004) [0x0000000000000020] [0x00008000] ( CPF_Net )
	unsigned long                                      bAllowSpawnInCombatPhase : 1;                     		// 0x02C4 (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      bLevelStartedWithBuildTimer : 1;                  		// 0x02C4 (0x0004) [0x0000000000000020] [0x00020000] ( CPF_Net )
	unsigned long                                      bForceAllowEnemyInvincibility : 1;                		// 0x02C4 (0x0004) [0x0000000000000020] [0x00040000] ( CPF_Net )
	unsigned long                                      bIsGameActive : 1;                                		// 0x02C4 (0x0004) [0x0000000000000020] [0x00080000] ( CPF_Net )
	unsigned long                                      bPreventRemoteActivateCrystal : 1;                		// 0x02C4 (0x0004) [0x0000000000000020] [0x00100000] ( CPF_Net )
	unsigned long                                      bAllowNonOwnerItemPickups : 1;                    		// 0x02C4 (0x0004) [0x0000000000000020] [0x00200000] ( CPF_Net )
	unsigned long                                      bSimulateNightmareMode : 1;                       		// 0x02C4 (0x0004) [0x0000000000002020] [0x00400000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsHardcoreMode : 1;                              		// 0x02C4 (0x0004) [0x0000000000002020] [0x00800000] ( CPF_Net | CPF_Transient )
	unsigned long                                      UseTBRTimer : 1;                                  		// 0x02C4 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bIsSpecialMission : 1;                            		// 0x02C4 (0x0004) [0x0000000000002020] [0x02000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsRestrictedDifficultyMission : 1;               		// 0x02C4 (0x0004) [0x0000000000002020] [0x04000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDropEquipmentUponPlayerDeath : 1;                		// 0x02C4 (0x0004) [0x0000000000000020] [0x08000000] ( CPF_Net )
	unsigned long                                      LockTavernItemDrops : 1;                          		// 0x02C4 (0x0004) [0x0000000000000020] [0x10000000] ( CPF_Net )
	unsigned long                                      LockTavernDefenses : 1;                           		// 0x02C4 (0x0004) [0x0000000000000020] [0x20000000] ( CPF_Net )
	unsigned long                                      bForceHostSkip : 1;                               		// 0x02C4 (0x0004) [0x0000000000000000] [0x40000000] 
	TArray< struct FString >                           ScoreAwardPreStrings;                             		// 0x02C8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ScoreAwardPostStrings;                            		// 0x02D4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	TArray< float >                                    ScoreAwardSpeed;                                  		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    DifficultyEquipmentRandomizerAdditions;           		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    MapAdditiveDroppedEquipmentQualityDifficultyMultipliers;		// 0x02F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    DifficultyEquipmentRandomizerMultipliers;         		// 0x0304 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    DifficultyEquipmentRandomizerNegativeWaveWeighting;		// 0x0310 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    DifficultyEquipmentRandomizerAbsoluteMultiplier;  		// 0x031C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FWaveBonusChecks                            CurrentWaveBonusChecks;                           		// 0x0328 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           MajorNotificationLabels;                          		// 0x0350 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GameOverDescriptionReasons;                       		// 0x035C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      GameOverDescriptionColors;                        		// 0x0368 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SpectatorWaitString;                              		// 0x0374 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	class UUI_PauseMenu*                               PauseMenuUITemplate;                              		// 0x0380 (0x0004) [0x0000000000000000]              
	class UUI_PauseMenu*                               PauseMenuUITemplateLobby16Player;                 		// 0x0384 (0x0004) [0x0000000000000000]              
	int                                                waveNumber;                                       		// 0x0388 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                FinalWaveNumber;                                  		// 0x038C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentTowerUnits;                                		// 0x0390 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxTowerUnits;                                    		// 0x0394 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentAltTowerUnits;                             		// 0x0398 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CurrentGameDifficulty;                            		// 0x039C (0x0001) [0x0000000000000020]              ( CPF_Net )
	class ADunDefMiniMap*                              CurrentMiniMap;                                   		// 0x03A0 (0x0004) [0x0000000000000000]              
	float                                              ForceMaxBuildTime;                                		// 0x03A4 (0x0004) [0x0000000000000000]              
	float                                              LevelVictoryMusicDelay;                           		// 0x03A8 (0x0004) [0x0000000000000000]              
	float                                              CompetitiveFloatingNameDistanceMultiplier;        		// 0x03AC (0x0004) [0x0000000000000000]              
	float                                              WeaponProjectileSpeedBonusMultiplier;             		// 0x03B0 (0x0004) [0x0000000000000000]              
	float                                              GlobalTowerUnitLimitMultiplier;                   		// 0x03B4 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeCrystalCoreHealthMultiplier;         		// 0x03B8 (0x0004) [0x0000000000000000]              
	float                                              NightmareModePhysicalTowerHealthMultiplier;       		// 0x03BC (0x0004) [0x0000000000000000]              
	float                                              NightmareModePlayerHealthMultiplier;              		// 0x03C0 (0x0004) [0x0000000000000000]              
	float                                              NightmareModePhysicalTowerDamageMultiplier;       		// 0x03C4 (0x0004) [0x0000000000000000]              
	float                                              NightmarePlayerDamageResistanceMultiplier;        		// 0x03C8 (0x0004) [0x0000000000000000]              
	float                                              NightmareModePlayerReceiveDamageMultiplier;       		// 0x03CC (0x0004) [0x0000000000000000]              
	float                                              NightmareModeHeroDamageMultiplier;                		// 0x03D0 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeEnemySpeedMultiplier;                		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeEnemyDamageMultiplier;               		// 0x03D8 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeEnemyHealthMultiplier;               		// 0x03DC (0x0004) [0x0000000000000000]              
	float                                              NightmareModeStrengthDrainDamageLerp;             		// 0x03E0 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeAuraRangeMultiplier;                 		// 0x03E4 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeTrapRangeMultiplier;                 		// 0x03E8 (0x0004) [0x0000000000000000]              
	float                                              NightmareModePlayerHealCostMultiplier;            		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              NightmareModeWeaponProjectileSpeedBonusMultiplier;		// 0x03F0 (0x0004) [0x0000000000000000]              
	int                                                NumberOfEmitterSpawnable;                         		// 0x03F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WavesPlayed;                                      		// 0x03F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayerHealthMultiplier;                           		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              EnemyLifeSpanMultiplier;                          		// 0x0400 (0x0004) [0x0000000000000000]              
	float                                              PlayerHealCostMultiplier;                         		// 0x0404 (0x0004) [0x0000000000000000]              
	int                                                MaxNumberOfEmitterSpawnable;                      		// 0x0408 (0x0004) [0x0000000000000000]              
	float                                              EnemyNetUpdateFrequencyMultiplier;                		// 0x040C (0x0004) [0x0000000000000000]              
	float                                              NightmareMinimumEquipmentDropQualityMultiplier;   		// 0x0410 (0x0004) [0x0000000000000000]              
	float                                              DeathSpectatorActivateInterval;                   		// 0x0414 (0x0004) [0x0000000000000000]              
	float                                              PlayerKnockbackMomentumMultiplier;                		// 0x0418 (0x0004) [0x0000000000000000]              
	float                                              NightmareRespawnTimeMultiplier;                   		// 0x041C (0x0004) [0x0000000000000000]              
	float                                              RespawnTimeMultiplier;                            		// 0x0420 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              GlobalTrapDetonationResetTimeMultiplier;          		// 0x0424 (0x0004) [0x0000000000000000]              
	float                                              PlayerElementalWeaponDamageMultiplier;            		// 0x0428 (0x0004) [0x0000000000000000]              
	float                                              PlayerSpawnImmunityTime;                          		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              GlobalAuraRangeMultiplier;                        		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              GlobalTrapRangeMultiplier;                        		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              HardcoreScoreBonusMultiplier;                     		// 0x0438 (0x0004) [0x0000000000000000]              
	float                                              NonAFKShopExpireTime;                             		// 0x043C (0x0004) [0x0000000000000000]              
	float                                              LobbyForceAFKShopTime;                            		// 0x0440 (0x0004) [0x0000000000000000]              
	struct FColor                                      DamageTextNormalShadowColor;                      		// 0x0444 (0x0004) [0x0000000000000000]              
	struct FColor                                      DamageTextEnemyShadowColor;                       		// 0x0448 (0x0004) [0x0000000000000000]              
	class USeqVar_Float*                               SurvivalEnemyNumbers;                             		// 0x044C (0x0004) [0x0000000000000000]              
	class USeqVar_Float*                               SurvivalEnemyNumbersIncreasePerWaveVar;           		// 0x0450 (0x0004) [0x0000000000000000]              
	class USeqVar_Float*                               SurvivalEnemyGroupsIncreasePerWaveVar;            		// 0x0454 (0x0004) [0x0000000000000000]              
	class USeqVar_Float*                               SurvivalEnemyGroupsVar;                           		// 0x0458 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   InvincibleHitSound;                               		// 0x045C (0x0004) [0x0000000000000000]              
	float                                              LastWaveSetupTime;                                		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CampaignEntryTag;                                 		// 0x0464 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                CoreHealWaveInterval;                             		// 0x0470 (0x0004) [0x0000000000000000]              
	int                                                IntervalForInfiniteWaveShopRoll;                  		// 0x0474 (0x0004) [0x0000000000000000]              
	float                                              PlayerRespawnTime;                                		// 0x0478 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LimitProjectilesDistanceAmount;                   		// 0x047C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              MaxEnemySpeedMultiplier;                          		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              LimitPetHealingAmount;                            		// 0x0484 (0x0004) [0x0000000000000000]              
	TArray< float >                                    PlayerRespawnTimes;                               		// 0x0488 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BuildPhaseRespawnTime;                            		// 0x0494 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              JumpZMultiplier;                                  		// 0x0498 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              PostVictorySellTowerDelay;                        		// 0x049C (0x0004) [0x0000000000000000]              
	float                                              MaxFloatingDamageViewRange;                       		// 0x04A0 (0x0004) [0x0000000000000000]              
	float                                              GlobalPhysicalTowerDamageMultiplier;              		// 0x04A4 (0x0004) [0x0000000000000000]              
	TArray< float >                                    MaxFloatingDamageViewRanges;                      		// 0x04A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PlayerDamageResistanceMultiplier;                 		// 0x04B4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     PureStrategyModeString;                           		// 0x04B8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SurvivalModeString;                               		// 0x04C4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MixModeString;                                    		// 0x04D0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AFKShopPreDescription;                            		// 0x04DC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionObjectiveText;                             		// 0x04E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LobbyLevelNameDescription;                        		// 0x04F4 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct FString                                     MissionObjectiveTextSeqVarPath;                   		// 0x0500 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct FLinearColor                                MissionObjectiveColor;                            		// 0x050C (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FLinearColor                                SpecialMissionObjectiveColor;                     		// 0x051C (0x0010) [0x0000000000000000]              
	int                                                OriginalFinalWaveNumber;                          		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SurvivalEnemyNumbersOriginalValue;                		// 0x0530 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SurvivalEnemyNumbersIncreasePerWaveOriginalValue; 		// 0x0534 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SurvivalEnemyGroupsOriginalValue;                 		// 0x0538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SurvivalEnemyGroupsIncreasePerWaveOriginalValue;  		// 0x053C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DifficultyWaveScoreMultipliers[ 0x5 ];            		// 0x0540 (0x0014) [0x0000000000000000]              
	float                                              DifficultyTimeBonusScoreMultipliers[ 0x5 ];       		// 0x0554 (0x0014) [0x0000000000000000]              
	struct FString                                     statsWaitTitle;                                   		// 0x0568 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     statsWaitText;                                    		// 0x0574 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              GamePlayerDamageMultiplier;                       		// 0x0580 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UUI_GameStats*                               GameStatsUITemplate;                              		// 0x0584 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   LevelVictoryMusic;                                		// 0x0588 (0x0004) [0x0000000000000000]              
	float                                              GameStatsDelay;                                   		// 0x058C (0x0004) [0x0000000000000000]              
	float                                              statReceiveProgress;                              		// 0x0590 (0x0004) [0x0000000000000000]              
	int                                                TheStartWave;                                     		// 0x0594 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PhaseCycleID;                                     		// 0x0598 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GameplayInstanceID;                               		// 0x059C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                missionSwitch;                                    		// 0x05A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SurvivalMaximumWaveGroups;                        		// 0x05A4 (0x0004) [0x0000000000000000]              
	int                                                GRIHostRandomID;                                  		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              LastCombatBeginTime;                              		// 0x05AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              totalCombatTime;                                  		// 0x05B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TotalBuildTime;                                   		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumActivePlayersForLatestWave;                    		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastItemDropQuality;                              		// 0x05BC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              LastItemDropExtraRarity;                          		// 0x05C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              LastPlayerJoinedTime;                             		// 0x05C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ADunDefTower* >                      TowerUpdate;                                      		// 0x05C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                TowerIterator;                                    		// 0x05D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TowerUpdatesPerFrame;                             		// 0x05D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrevNumActivePlayers;                             		// 0x05DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxRestrictedMissionDifficulty;                   		// 0x05E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxRestrictedMissionDifficultyHardcore;           		// 0x05E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefUIScene*                              GlobalHUDUITemplate;                              		// 0x05E8 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  HardcoreModeMissionNameIcon;                      		// 0x05EC (0x0004) [0x0000000000000000]              
	struct FExpensiveFunctionRegister                  ExpensiveFunctions[ 0x5 ];                        		// 0x05F0 (0x0050) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FHeroAwardStatInfo >                heroStatAwards;                                   		// 0x0640 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UDunDefGameStats*                            statsSystem;                                      		// 0x064C (0x0004) [0x0000000000000000]              
	TArray< struct FplayerStatsEntry >                 playerStats;                                      		// 0x0650 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FdamageTypeCount >                  gunSlingerCount;                                  		// 0x065C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FdamageTypeCount >                  strategistCount;                                  		// 0x0668 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FStatSendingQueueEntry >            statSendQueue;                                    		// 0x0674 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              GlobalAuraHealthMultiplier;                       		// 0x0680 (0x0004) [0x0000000000000000]              
	float                                              GlobalAuraDamageMultiplier;                       		// 0x0684 (0x0004) [0x0000000000000000]              
	float                                              GlobalAuraStrengthDrainMultiplier;                		// 0x0688 (0x0004) [0x0000000000000000]              
	float                                              GlobalTrapHealthMultiplier;                       		// 0x068C (0x0004) [0x0000000000000000]              
	float                                              GlobalTrapDamageMultiplier;                       		// 0x0690 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeAuraHealthMultiplier;                		// 0x0694 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeAuraDamageMultiplier;                		// 0x0698 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeStrengthDrainMultiplier;             		// 0x069C (0x0004) [0x0000000000000000]              
	float                                              NightmareModeTrapHealthMultiplier;                		// 0x06A0 (0x0004) [0x0000000000000000]              
	float                                              NightmareModeTrapDamageMultiplier;                		// 0x06A4 (0x0004) [0x0000000000000000]              
	float                                              MaxOverlordHeight;                                		// 0x06A8 (0x0004) [0x0000000000000000]              
	float                                              MinOverlordHeight;                                		// 0x06AC (0x0004) [0x0000000000000000]              
	struct FVector2D                                   MaxOverlordXYBounds;                              		// 0x06B0 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MinOverlodYXBounds;                               		// 0x06B8 (0x0008) [0x0000000000000000]              
	struct FHighDigitInt                               totalWaveItemRating;                              		// 0x06C0 (0x0010) [0x0000000000000000]              
	struct FHighDigitInt                               totalWaveArmourRating;                            		// 0x06D0 (0x0010) [0x0000000000000000]              
	int                                                totalWaveItems;                                   		// 0x06E0 (0x0004) [0x0000000000000000]              
	int                                                totalWaveArmours;                                 		// 0x06E4 (0x0004) [0x0000000000000000]              
	int                                                totalItemNumUps;                                  		// 0x06E8 (0x0004) [0x0000000000000000]              
	int                                                totalArmourNumUps;                                		// 0x06EC (0x0004) [0x0000000000000000]              
	TArray< int >                                      DroppedEquipmentQualityCount;                     		// 0x06F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                Myth;                                             		// 0x06FC (0x0004) [0x0000000000000000]              
	int                                                Trans;                                            		// 0x0700 (0x0004) [0x0000000000000000]              
	int                                                Sup;                                              		// 0x0704 (0x0004) [0x0000000000000000]              
	int                                                Ult;                                              		// 0x0708 (0x0004) [0x0000000000000000]              
	int                                                Ultninetythree;                                   		// 0x070C (0x0004) [0x0000000000000000]              
	int                                                Ultplus;                                          		// 0x0710 (0x0004) [0x0000000000000000]              
	int                                                Ultplusplus;                                      		// 0x0714 (0x0004) [0x0000000000000000]              
	int                                                TotalNumber;                                      		// 0x0718 (0x0004) [0x0000000000000000]              
	class ADunDefBuffManager*                          BuffManager;                                      		// 0x071C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37046 ];

		return pClassPointer;
	};

	void RemoveBuffFromGame ( class UDunDefBuff* Buff );
	void AddBuffToGame ( class UDunDefBuff* Buff );
	int eventGetMaxPlayers ( );
	bool eventIsAtLobbyLevel ( );
	int eventGetFinalWaveNumber ( );
	int eventGetWaveNumber ( );
	bool eventIsInHardCoreMode ( );
	void AnalyticsReport ( unsigned long waveVictory );
	void EnemyDied ( class ADunDefEnemy* anEnemy, class AActor* lastDamageCauser );
	void GetOverLordXYBounds ( struct FVector2D* MaxXYBounds, struct FVector2D* MinXYBounds );
	void GetMaxMinOverlordHeight ( float* theMaxValue, float* theMinValue );
	void ForceAFKShop ( );
	void SetAFKShopMode ( unsigned long bDoAFKShopMode );
	bool AllowActivatingCrystal ( );
	bool AllowPlayerSpawn ( class ADunDefPlayerController* PC );
	void DrawExtraEnemyMinimapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap, class ADunDefEnemy* Enemy );
	float GetWeaponProjectileSpeedBonusMultiplier ( class ADunDefWeapon* aWeapon );
	float GetTrapRangeMultiplier ( class ADunDefTower_DetonationType* aTrap );
	float GetAuraRangeMultiplier ( class ADunDefTower_Aura* anAura );
	float GetEnemyLifeSpanMultiplier ( class ADunDefEnemy* anEnemy );
	float GetPlayerHealCostMultiplier ( class ADunDefPlayer* aPlayer );
	float GetPlayerHealthMultiplier ( class ADunDefPlayer* aPlayer );
	float GetMinimumEqulityDropQualityMultiplier ( );
	float GetTowerHealthMultiplier ( class ADunDefTower* aTower );
	float GetTrapDamageMultiplier ( class ADunDefTower_DetonationType* aTrap );
	float GetTrapHealthMultiplier ( class ADunDefTower_DetonationType* aTrap );
	float GetStrengthDrainAuraMultiplier ( class ADunDefTower_AuraStrengthDrain* anAura );
	float GetAuraDamageMultiplier ( class ADunDefTower_Aura* anAura );
	float GetAuraHealthMultiplier ( class ADunDefTower_Aura* anAura );
	float GetGlobalPhysicalTowerDamageMultiplier ( class ADunDefTower* aTower );
	float GetPlayerDamageResistanceMultiplier ( );
	float GetEnemySpeedMultiplier ( class ADunDefEnemy* anEnemy );
	float GetEnemyHealthMultiplier ( class ADunDefEnemy* anEnemy );
	float GetEnemyDamageMultiplier ( class ADunDefEnemy* anEnemy );
	float GetPlayerDamageMultiplier ( class ADunDefPlayer* aPlayer );
	float GetJumpZMultiplier ( class ADunDefPawn* aPawn );
	void ModifyCustomColors ( class ADunDefPlayerController* aController, class ADunDefPlayer* aPlayer );
	void ExtraDrawHUDInterface ( class ADunDefHUD* H, class UDunDefHUDInterface* hudint );
	void CustomUpdatePlayerScoreLabel ( class ULocalPlayer* ForPlayer, class UUILabel_ScoreIndicator* ScoreLabel );
	float ModifyPlayerAirSpeed ( class ADunDefPlayer* aPlayer, float theAirSpeed );
	float ModifyPlayerGroundSpeed ( class ADunDefPlayer* aPlayer, float theGroundSpeed );
	struct FColor GetGameOverLabelColor ( );
	struct FColor GetVictoryLabelColor ( );
	struct FString GetGameOverLabelString ( class APlayerReplicationInfo* myPlayer );
	struct FString GetVictoryLabelString ( class APlayerReplicationInfo* myPlayer );
	bool OverrideEndGameLabel ( );
	void DrawnMiniMap ( class ADunDefMiniMap* aMiniMap, class UCanvas* Canvas );
	void GetTeamIcon ( int TeamIndex, class USurface** theTeamIcon, struct FColor* theTeamColor );
	bool IsTeamCompetitive ( );
	bool AllowChatBetween ( class APlayerReplicationInfo* myPlayer, class APlayerReplicationInfo* TheirPlayer );
	void DrawExtraPlayerFloatingHUD ( class ADunDefPlayer* aPlayer, class ADunDefHUD* H );
	bool AllowedToTeleport ( class APawn* Teleportee );
	float GetExtraKnockbackMultiplier ( class AActor* act );
	bool DoDropEquipmentUponPlayerDeath ( );
	bool DoUseScoreLabel ( );
	bool UseScoreLabel ( );
	float GetCastRateMultiplier ( class ADunDefPlayerAbility* ability );
	unsigned char GetPlayerAbilityStatusOverride ( class ADunDefPlayerAbility* ability );
	bool UsePlayerAbilityStatusOverride ( class ADunDefPlayerAbility* ability );
	void AddGRIActionWheelEntries ( class UActionWheel* aWheel, TArray< class UActionWheelEntry* >* TempWheelEntries );
	void Server_AddGRIHeroAbilities ( class ADunDefPlayerController* PC );
	float GetProjectileLimitDistance ( class AActor* anInstigator, float originalLimit );
	bool IsDisplayingLoadingScreen ( );
	class ADunDefPlayerReplicationInfo* GetWinningPRI ( );
	bool AllowDeathSpectatorMode ( class ADunDefPlayerController* PC );
	bool CanDropBankedMana ( );
	bool AllowPlayerDamage ( class ADunDefPlayer* aPlayer );
	bool StaticIsCompetitive ( );
	bool IsCompetitive ( );
	bool DestroyTowerOnOwnerLeft ( class ADunDefTower* aTower );
	bool AllowEquipmentDrops ( class ADunDefPlayerController* PC );
	bool IsNonLobbyBuildPhase ( );
	bool IsGameplayFinished ( );
	bool IsTheGameplayFinished ( );
	bool AtCapacity ( );
	bool AllowSplitscreenJoin ( );
	bool IsInCinematic ( );
	struct FString GetLevelFriendlyName ( );
	struct FString eventGetLevelFriendlyNameWithoutFormatting ( );
	bool CheckDLCCompatibility ( struct FCampaignLevelEntry forLevel, TArray< class APlayerReplicationInfo* >* playersWithoutLevel );
	bool AreDLCMasksUpToDate ( );
	void ResetForNewMap ( unsigned long bForceDestroyGRI, unsigned long bIsLoadingLevel );
	bool CanBankManaOnExit ( );
	bool IsInGameplayLevel ( );
	bool IsInLobbyLevel ( );
	void QueueStatsSending ( class ADunDefPlayerController* PC, int statPlayerIndex );
	float GetScoreMultiplier ( );
	struct FString GetGameOverString ( int GameOverType, int gameOverNumberAppend );
	void SetStatReceiveProgress ( float newPercent );
	struct FString GetScoreAwardMultiplierString ( unsigned char scoreAwardType, float firstNumParam, float secondNumParam, class AActor* ActorArchetype, int Count );
	struct FString GetScoreAwardString ( unsigned char scoreAwardType, float firstNumParam, float secondNumParam, class AActor* ActorArchetype );
	float GetScoreAwardSpeed ( unsigned char scoreAwardType );
	void AwardWaveCompletion ( int theWaveNumber );
	float GetTimeBonusSecondsInterval ( );
	void AddStrategistCount ( int statPlayerIndex );
	void AddGunslingerCount ( int statPlayerIndex );
	void UsedTowerToHurt ( class ADunDefPlayerController* PC );
	void UsedWeaponToHurt ( class ADunDefPlayerController* PC );
	void PlayerTookDamage ( class ADunDefPlayerController* PC );
	void ResetWaveBonusChecks ( );
	void ViewportTick ( float DeltaTime );
	void PlayerStoppedTalking ( struct FUniqueNetId PlayerNetId );
	void PlayerStartedTalking ( struct FUniqueNetId PlayerNetId );
	void VoiceDeviceAdded ( );
	bool AllowLevelUps ( );
	bool DontUseMana ( );
	struct FString GetHostsName ( );
	struct FString GetSpectatorWaitString ( );
	bool IsLevelVictory ( );
	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
	void ActivateCustomEvent ( struct FName EventName, int CustomEventID, class AActor* EventOriginator, class AActor* EventInstigator, class AActor* EventActor, TArray< int >* ActivateIndices );
	void SetMissionObjective ( class UDunDef_SeqVar_LocalizedString* missionObjectiveStringVar );
	float GetPlayerRespawnTime ( class ADunDefPlayerController* PC );
	bool DoUseFamiliarAbilities ( class UHeroEquipment_Familiar* aFamiliar );
	bool WeaponsEnabled ( );
	void SetDisableWeaponry ( unsigned long val );
	void SetDisableTowerPlacementAndRepair ( unsigned long val );
	bool DidAnyoneLocalPossessPawns ( );
	class UUI_GameStats* GetStatsScene ( );
	void ShowStatsScene ( );
	void DoGameOver ( );
	class ADunDefCustomNode* FindCustomNodeWithinRange ( int CustomData, struct FVector aLocation, float Range, unsigned long Randomize );
	class ADunDefCustomNode* FindCustomNode ( int CustomData, unsigned long Randomize );
	class ADunDefGameReplicationInfo* GetGRI ( );
	void HealAllPlayers ( );
	void SellAllTowers ( );
	void RefreshLeaderboardSign ( );
	void UpdateTowerIter ( );
	bool CanTowerUpdate ( class ADunDefTower* InTower );
	void RemoveTowerForCanUpdate ( class ADunDefTower* InTower );
	void AddTowerForCanUpdate ( class ADunDefTower* InTower );
	void UpdateFunctionExpense ( int FunctionType );
	bool RequestExpensiveFunction ( class UObject* InActor, int FunctionType );
	void SetLastItemDropValues ( float theLastDropQuality, float theLastExtraRarity );
	void SetupLeaderBoardTimer ( );
	void SetupVictoryShopEquipments ( );
	void DoLevelVictory ( );
	void PlayLevelVictoryMusic ( );
	int GetNumAlivePlayers ( );
	bool StaticCanEnterSpectatorMode ( class ADunDefPlayerController* thePlayerController );
	bool CanEnterSpectatorMode ( class ADunDefPlayerController* thePlayerController );
	bool StaticCanRespawnPlayer ( class ADunDefPlayerController* thePlayerController );
	bool GetIsInCombatPhase ( );
	bool CanRespawnPlayer ( class ADunDefPlayerController* thePlayerController );
	bool DoUseBuildTimer ( );
	void RefreshBuildSkips ( );
	int GetNumPlayersWantingToSkipBuildPhase ( int* NumPlayersWantingToSkip, int* NumberOfPlayers );
	int GetGameDifficultyAsInt ( unsigned long bClampToInsane );
	bool ShouldDisableInput ( class APlayerController* PC, unsigned long bCountAnyLockingUIOwner );
	void CheckBadCollisions ( class AStaticMeshActorBase* A );
	void CheckStaticMeshesForBadCollision ( );
	void SendStats ( );
	void StopCollectingStats ( );
	void ReportAwards ( );
	bool ShouldShowAwards ( );
	void CalculateAwards ( );
	void PruneFirstWaveAwards ( unsigned char theAward, int StartWave );
	int CountAwards ( int heroIndex, unsigned char award );
	void CheckAwards ( );
	void AddPlayerAwardStats ( int statPlayerIndex );
	bool ReadToShowStats ( );
	bool ReadyToSendStats ( );
	void SendAllPlayerStats ( );
	void CreateLobbyEquipment ( );
	void eventPostBeginPlay ( );
	void ShopExpire ( );
	void eventDestroyed ( );
	void DoTravelVisuals ( unsigned long GameplayLevel );
	bool CanPlaceTowerUnitCost ( int Cost, class ADunDefPlayerController* ForPlayer, class ADunDefTower* Tower );
	void RemovedTower ( class ADunDefTower* Tower );
	int GetMaxTowerUnits ( class ADunDefPlayerReplicationInfo* ddPRI );
	int GetAltCurrentTowerUnits ( class ADunDefPlayerReplicationInfo* ddPRI );
	int GetCurrentTowerUnits ( class ADunDefPlayerReplicationInfo* ddPRI );
	void AddedTower ( class ADunDefTower* Tower );
	void LoadMission ( class UCampaignLevelEntryObject* missionObject );
	void LoadLevel ( struct FString LevelName, unsigned long GameplayLevel, unsigned long IsMissionLoad );
	void UpdateRichPresence ( int presenceId, int missionId );
	void ClearTalkingDelegates ( );
	void ClientEndGame ( );
	class UDunDefViewportClient* GetViewportClient ( );
	void Pause ( class ULocalPlayer* ownedByLocalPlayer, unsigned long bForce );
	void MulticastFunctionActorParam ( class AActor* act, struct FName FunctionName, class AActor* actorParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, int OverrideQueueLimit );
	void MulticastFunctionNameParam ( class AActor* act, struct FName FunctionName, struct FName nameParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, int OverrideQueueLimit );
	void MulticastFunctionByteParam ( class AActor* act, struct FName FunctionName, unsigned char byteParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, int OverrideQueueLimit );
	void MulticastFunctionFloatParam ( class AActor* act, struct FName FunctionName, float FloatParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, int OverrideQueueLimit );
	void MulticastFunctionVectorAndByteParams ( class AActor* act, struct FName FunctionName, unsigned char byteParam, struct FVector vectorParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, unsigned long isUnreliable, int OverrideQueueLimit );
	void MulticastFunctionVectorParam ( class AActor* act, struct FName FunctionName, struct FVector vectorParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, unsigned long isUnreliable, int OverrideQueueLimit );
	void MulticastFunctionNoParams ( class AActor* act, struct FName FunctionName, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, unsigned long isUnreliable, int OverrideQueueLimit );
	void MulticastFunction ( class AActor* act, struct FName FunctionName, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, unsigned long onlyFunction, unsigned long onlyFloatParam, unsigned long onlyVectorParam, unsigned long onlyNameParam, unsigned long onlyActorParam, unsigned long onlyVectorAndByte, unsigned char byteParam, unsigned long isUnreliable, unsigned long onlyByteParam, class UObject* objectParam1, int OverrideQueueLimit );
	bool ShouldGameplayDrawCursor ( );
	void AddCustomFloatingText ( struct FString theText, struct FVector Position, int InitialOffset, float tLifeSpan, float tDisplayScale, unsigned long bOverrideColor, struct FLinearColor dColor );
	void AddFloatingDamageEntryInvincible ( class AActor* forActor, int DamageAmount, struct FVector Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset );
	void AddFloatingDamageEntry ( class AActor* forActor, int DamageAmount, struct FVector Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset );
	void Server_AddFloatingDamageEntry ( class AActor* forActor, int DamageAmount, struct FVector Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset, unsigned long bIsInvincible, unsigned long bDontReplicate );
	void DrawTalkers ( class UCanvas* C );
	void eventPostRender ( class UCanvas* C );
	void UpdateGameOver ( );
	void eventTick ( float DeltaTime );
	struct FString GetSkipBuildPhaseString ( );
	void RefreshBillboards ( );
	void RefreshEnemyWaveEntries ( );
	void LogEquipmentStats ( );
	void ShutdownAllTrapFX ( );
	void BeganCombatPhase ( );
	void EndedCombatPhase ( );
	void SetInCombatPhase ( unsigned long inCombatPhase );
	void NetworkedHUDMessage ( struct FString theString, struct FLinearColor aColor, int FontSize, float TimeToDisplay, int ForTeam );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void SetWaveNumber ( int theWaveNumber );
	void SetAllowNonOwnerItemPickups ( unsigned long allowNonOwnerItemPickups );
	void eventReplicatedEvent ( struct FName VarName );
	class ADunDefPlayerController* FindPCByStatName ( struct FString playerStatName );
	bool FindRemoteUserID ( int remoteID );
	void UnpackPlayerStats ( TArray< int > packedUpStats );
	void SendStatsInfo ( TArray< struct FplayerStatsEntry > infoToSend );
	TArray< int > PreparePlayerStats ( );
	void RemovePlayerStats ( int remoteID );
	void ClientRegisterProjectileKillAtIndex ( class ADunDefProjectile* InProjectile, unsigned char ReplicatedIndex );
	unsigned char ServerGetProjectileKillIndex ( );
	void ClientProjectileDeath ( unsigned char KillArrayIndex );
	struct FString ClientGetPlayerStatName ( int remoteUserID, unsigned long trueRemote );
	void ClientAddPlayerStats ( int remoteUserID, struct FString PlayerName, unsigned long trueRemote, unsigned long ignore, unsigned long Host, int statPlayerIndex );
	void AddPlayerStats ( class UDunDefPlayerStats* statsToAdd, struct FString PlayerName, int remoteUserID, int arraySize, TArray< int > newBestOfStats, int statPlayerIndex );
};

UClass* ADunDefGameReplicationInfo::pClassPointer = NULL;

// Class UDKGame.DunDefHUD
// 0x00AC (0x09F8 - 0x094C)
class ADunDefHUD : public ANativeDunDefHUD
{
public:
	struct FColor                                      BlackColor;                                       		// 0x094C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                BlackLinearColor;                                 		// 0x0950 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UUI_PlayerHUD*                               PlayerHUDSceneTemplate;                           		// 0x0960 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_PlayerHUD*                               PlayerHUDSceneTemplateLobby;                      		// 0x0964 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_PlayerHUD*                               PlayerHUDSceneTemplateGamepad;                    		// 0x0968 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationTextScale;                              		// 0x096C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationIconScale;                              		// 0x0970 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_PlayerHUD*                               PlayerHUDScene;                                   		// 0x0974 (0x0004) [0x0000000000000000]              
	struct FVector                                     MouseProjectionDirection;                         		// 0x0978 (0x000C) [0x0000000000000000]              
	struct FVector                                     MouseProjectionOrigin;                            		// 0x0984 (0x000C) [0x0000000000000000]              
	struct FLinearColor                                DeathStringColor;                                 		// 0x0990 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ReachedLevelCapMessageString;                     		// 0x09A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ReachedDemoLevelCapMessageString;                 		// 0x09AC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      ReachedLevelCapMessageColor;                      		// 0x09B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MsgPlayerTextColor;                               		// 0x09BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FColor >                            MsgPlayerNameColors;                              		// 0x09C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PrimaryActivationKeybind;                         		// 0x09CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AlternateActivationKeybind;                       		// 0x09D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FColor                                      PrimaryActivationColor;                           		// 0x09E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      SecondaryActivationColor;                         		// 0x09E8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bForceMobileAutoAimTarget : 1;                    		// 0x09EC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UDunDefHero*                                 LastActionWheelHero;                              		// 0x09F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UActionWheel*                                MyActionWheel;                                    		// 0x09F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37079 ];

		return pClassPointer;
	};

	void DrawChatMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY, float Scale, float Opacity );
	void Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime );
	float GetHUDCanvasScale ( );
	float DrawKeyBind ( struct FString KeyBindName, unsigned long Center, float XPos, float YPos, float IconScale, float TextScale, float Opacity, unsigned long bDontActuallyDraw );
	void DrawActivationNotification ( float PosX, float PosY, unsigned long doCenter, unsigned long DrawPrimaryActivation, struct FString ActivationString, struct FColor ActivationStringColor, unsigned long DrawAltActivation, struct FString AltActivationString, struct FColor AltActivationStringColor, float Opacity, unsigned long bDontDrawPrimaryIcon, unsigned long bDontDrawSecondaryIcon );
	class UFont* GetFontSizeIndex ( int FontSize );
	void SetMobileTouchCoordinates ( struct FVector pos );
	void TurnOffSpectatorMode ( );
	void UpdateForSpectactorCamera ( float DeltaTime, unsigned long bDontHideHud );
	void DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY, float Scale );
	void eventPostRender ( );
	struct FVector GetMouseCoordinatesVec ( );
	void SetAbsoluteMouseCoordinates ( struct FVector2D coords );
	void SetMouseCoordinates ( int X, int Y );
	struct FVector2D GetScreenCenter ( );
	struct FVector2D GetMouseCoordinates ( unsigned long bIgnoreScreenSplit );
	void eventDestroyed ( );
	void ToggleHUD ( );
	void SetHUDHidden ( unsigned long Hide, unsigned long onlyHideUIScene );
	void AddToScore ( int TotalScore, int AmountToAdd, unsigned char ScoreTagReason, struct FLinearColor ScoreTagColor, float ScoreTagAdditionalNum, float ScoreTagSecondaryNum, class AActor* ActorArchetype );
	float GetHUDAspectRatio ( );
	bool IsOnScreen ( struct FVector2D ScreenPos, class AHUD* InHud );
	bool IsOnTopOfCanvas ( struct FVector2D ScreenPos, float percentFromEdge );
	bool IsOnBottomOfCanvas ( struct FVector2D ScreenPos, float percentFromEdge );
	bool IsOnRightOfCanvas ( struct FVector2D ScreenPos, float percentFromEdge );
	bool IsOnLeftOfCanvas ( struct FVector2D ScreenPos, float percentFromEdge );
	void NotifyLevelUp ( );
	void UpdateNotificationColor ( struct FLinearColor NewColor, float sizeScalar, unsigned long bDontUseSizeScalar );
	void ShowMajorNotificationLabelCompleted ( );
	void ShowMajorNotificationLabel ( struct FString LabelText, struct FLinearColor LabelColor, float LabelScale, float LabelTimer, unsigned long bForce );
	void ShowProgressBar ( float Percent, struct FLinearColor ProgressBarColor, unsigned long bPlayCompletedAnimation );
	void NotifyExperienceChange ( );
	void NotifyHealthChange ( );
	void NotifyUpdateManaPower ( );
	void ResetValues ( );
	void NotifyDied ( );
	void OpenActionWheelByEntryName ( struct FName EntrytoOpen );
	void ActionWheelSetHotKey ( int hkIndex );
	void ActionWheelUpdateInput ( float DeltaTime );
	void ActionWheelProcessBack ( );
	void ActionWheelProcessSelection ( );
	bool ActionWheelIsVisible ( );
	void ActionWheelToggle ( unsigned long ForceOff );
	void DrawHUD ( );
	void InitActionWheel ( );
	void UpdateForOptions ( struct UDunDefHeroManagerNative_FOptionsFixedStruct* newOptions );
	void eventPostBeginPlay ( );
};

UClass* ADunDefHUD::pClassPointer = NULL;

// Class UDKGame.DunDefUIScene
// 0x0090 (0x063C - 0x05AC)
class UDunDefUIScene : public UDunDefNativeUIScene
{
public:
	TArray< struct FDunDefKeyBindings >                gamepadKeyBindings;                               		// 0x05AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             MoveAllowedKeyNames;                              		// 0x05B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIScreenObject*                             AutoFocusControl;                                 		// 0x05C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDunDefUIAnimation >                DefaultAnimationSequences;                        		// 0x05C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       UIAnimSequence_OpenScene;                         		// 0x05D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UIAnimSequence_OpenScene_Replicated;              		// 0x05DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UIAnimSequence_CloseScene;                        		// 0x05E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ReplicateUI : 1;                                  		// 0x05EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      CloseOnPlayerTakeDamage : 1;                      		// 0x05EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawCursorParticles : 1;                         		// 0x05EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bExemptFromDunDefAutoClose : 1;                   		// 0x05EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bClosedByPauseMenu : 1;                           		// 0x05EC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAutoFocusControl : 1;                            		// 0x05EC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIsMultiplayerUI : 1;                             		// 0x05EC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bIgnoreDunDefUISceneKeyInterception : 1;          		// 0x05EC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowVisibilityToggleInWaitingMode : 1;          		// 0x05EC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowFastTransitions : 1;                        		// 0x05EC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bIsTopLevelScene : 1;                             		// 0x05EC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      HasBeenHidden : 1;                                		// 0x05EC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bFirstInputTick : 1;                              		// 0x05EC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bSetKeyboardDelegate : 1;                         		// 0x05EC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      OldSceneNeverFocus : 1;                           		// 0x05EC (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      HasLoadedSequences : 1;                           		// 0x05EC (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	int                                                CustomValueForKismet;                             		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneCloseAnimationForceLength;                   		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      ConsolePointerFocusForceFeedbackWaveForm;         		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIEditBox*                                  keyboardEditBox;                                  		// 0x05FC (0x0004) [0x0000000000000000]              
	unsigned char                                      LastSplitType;                                    		// 0x0600 (0x0001) [0x0000000000000000]              
	unsigned char                                      PreviousInputMode;                                		// 0x0601 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UUIObject*                                   LastFocusedControl;                               		// 0x0604 (0x0004) [0x0000000000000000]              
	float                                              MyUIScalePercent;                                 		// 0x0608 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      MyAssociatedActor;                                		// 0x060C (0x0004) [0x0000000000000000]              
	TArray< struct FToolTipInfo >                      ToolTipInfos;                                     		// 0x0610 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                topToolTipIndex;                                  		// 0x061C (0x0004) [0x0000000000000000]              
	float                                              SceneCloserTimer;                                 		// 0x0620 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SceneHiderTimer;                                  		// 0x0624 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefUIReplicationInfo*                    MyReplicationInfo;                                		// 0x0628 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefSceneClient*                          mySceneClient;                                    		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIScriptWidget_Button*                      ActiveDraggeable;                                 		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DragStartTime;                                    		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ClickCount;                                       		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37083 ];

		return pClassPointer;
	};

	void CinematicCompleted ( );
	bool UseFastMenuTransitions ( );
	bool AllowOverlays ( );
	void CloseByPauseMenu ( );
	bool eventAllowInputAlias ( struct FName InputKeyName, struct FName InputAliasName );
	void SetCustomValueForKismet ( int CustomValue );
	int FirstSignedInController ( unsigned long requiresLive );
	bool AnyoneSignedIn ( unsigned long requiresLive, unsigned long requiresPrimary );
	bool CheckLogin ( int ControllerId, unsigned long prompt, unsigned long requiresLive );
	bool HasAcceptedSignInPrompt ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void CustomInit ( int CustomInitIndex );
	void eventOnWidgetClicked ( class UUIObject* Widget );
	void SetGamepadBindingHandleInputEnabled ( class UUIObject* boundObject, unsigned long bSetEnabled );
	void SetGamepadBindingsEnabled ( unsigned long EnableOnlyThese, TArray< class UUIObject* >* BoundObjects );
	void ForceClickWidget ( class UUIScreenObject* Widget, int PlayerIndex, int ControllerId, unsigned long bSetWidgetFocus, unsigned long bDontResetFocus );
	bool OnInterceptedInputKey ( struct FInputEventParameters* EventParms );
	void NotifyLevelVictory ( );
	void NotifyGameOver ( );
	class ADunDefPlayer* GetOwnerPawn ( );
	class UDunDefHero* GetOwnerHero ( );
	void OnLabelChange ( class UUILabel* Sender, struct FString OldText, struct FString NewText );
	void SetupLabelDelegates ( );
	bool IsInParty ( );
	void NotifyPhaseChange ( unsigned long IsCombatPhase );
	void NotifyPlayerLeft ( class APlayerReplicationInfo* PRI );
	void NotifyLocalPlayerRemoved ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyLocalPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyPlayerJoined ( class APlayerReplicationInfo* PRI );
	bool ShowUIKeyboard ( class UUIEditBox* EditBoxToSet, struct FString TitleText, struct FString DescriptionText, struct FString DefaultText, unsigned long shouldValidate, int MaxLength, unsigned long allowSpaces );
	void KeyboardInputRejected ( struct FString Result );
	void KeyboardInputDone ( unsigned long Success );
	void eventEditBoxPopUpCompleted ( struct FString EditBoxResult );
	void EvaluateKeyboardInput ( struct FString* keyboardResult );
	void PostInitialSceneUpdate ( );
	void KillToolTip ( class UToolTipInterface* Child );
	void NotifyActiveToolTip ( class UToolTipInterface* Child );
	void InitializeToolTip ( int toolTipIndex, class UToolTipInterface* Target, unsigned long bExisting );
	class UUILabel_ToolTip* FindLabelToolTip ( class UUIObject* Search );
	void DrawToolTip ( int toolTipIndex, float XPos, float YPos, class UUIScreenObject* whoFor );
	bool SupportsDraggedOntoItem ( class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn );
	void NotifyDraggedEvent ( class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn );
	void NotifyEquipmentChanged ( );
	void NotifyManaChanged ( );
	void NotifyPlayerTakeHit ( );
	void ClearPlayerControllerInputs ( class ULocalPlayer* LP, unsigned long bForceFlushInput );
	void HideScene ( struct FName HideAnimation );
	void UnhideScene ( struct FName AlternateOpeningAnimation );
	bool IsPaused ( );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void ExecReplicatedUIMessage ( struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void InitReplicationInfo ( );
	void eventSceneDeactivated ( );
	void CloseWithoutAnimation ( );
	struct FName GetOpenAnimation ( );
	struct FName GetCloseAnimation ( );
	void CloseWithAnimation ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	float GetViewportYScaleTo768 ( );
	float GetViewportXScaleTo1024 ( );
	class UDunDefViewportClient* GetViewportClient ( );
	float GetFinalOpacity ( class UUIScreenObject* Object );
	void CheckUnusedFocus ( );
	void Update ( float DeltaTime );
	struct FVector2D GetToolTipPositioning ( class UUIObject* toolTipOwner, class UUIObject* toolTipObject, unsigned char Horizontal, unsigned char Vertical, float XOffset, float YOffset, struct FVector Scale );
	void DoHideScene ( );
	bool eventIsGamepadOwned ( );
	bool UseGamePadControl ( );
	bool IsTopLevelScene ( );
	void GiveFocusToAnyChild ( );
	bool FollowMouse ( );
	void RepositionToolTip ( class UUIObject* ToolTip, float XPos, float YPos );
	float DunDefGetSequenceLength ( struct FName DunDefUIAnimSeqName );
	void LoadSequences ( );
	void UpdateImagesMaterial ( class UMaterialInstanceConstant* MIC, TArray< class UUIImage* >* UIImages );
	bool AllowGlobalVisibilityToggling ( );
	void eventPostRender ( class UCanvas* C );
	void RenderGamepadKey ( class UCanvas* C, class UUIObject* Object, float X1, float Y1, float X2, float Y2 );
	void UpdateGamePadBindings ( );
	void eventOnPostEditChange ( struct FName PropertyChanged );
	void SetUIScalePercent ( float scalePercent );
	void eventSceneActivated ( unsigned long bInitialActivation );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool ReleaseInputKey ( struct FName ofKey );
	class ADunDefGameReplicationInfo* GetGRI ( );
	class UDunDefHeroManager* GetTheHeroManager ( );
	class UDunDefViewportClient* GetVPClient ( );
};

UClass* UDunDefUIScene::pClassPointer = NULL;

// Class UDKGame.UI_PlayerHUD
// 0x018C (0x07C8 - 0x063C)
class UUI_PlayerHUD : public UDunDefUIScene
{
public:
	class UUIImage_HealthBar*                          HealthBar;                                        		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage_HealthBar*                          ManaBar;                                          		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage_ProgressBar*                        ProgressBar;                                      		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage_HealthBar*                          ExperienceBar;                                    		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage_HealthBar*                          AmmoBar;                                          		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUILabel* >                          MajorNotificationLabels;                          		// 0x0650 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUILabel_ScoreIndicator*                     ScoreLabel;                                       		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    LevelLabel;                                       		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LevelString;                                      		// 0x0664 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       LevelUpNotAvailableAnimation;                     		// 0x0670 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelUpAvailableAnimation;                        		// 0x0678 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    ActionWheelOpenTexture;                           		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    ActionWheelCloseTexture;                          		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NotificationSizeScalarLerpSpeed;                  		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BuildPhaseActiveAnimation;                        		// 0x068C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CombatPhaseActiveAnimation;                       		// 0x0694 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DiedAnimation;                                    		// 0x069C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RespawnedAnimation;                               		// 0x06A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BuildPhaseReadyLabel;                             		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                BuildPhaseReadyColor;                             		// 0x06B0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                BuildPhaseNotReadyColor;                          		// 0x06C0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                BankedManaColor;                                  		// 0x06D0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     BuildPhaseReadyString;                            		// 0x06E0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuildPhaseNotReadyString;                         		// 0x06EC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UObject* >                           AdditionalResources;                              		// 0x06F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIScriptWidget_Button*                      DDMobile_ActionWheelButton;                       		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DDMobile_MenuButton;                              		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DDMobile_CameraLeftButton;                        		// 0x070C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DDMobile_CameraRightButton;                       		// 0x0710 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DDMobile_MiniMapButton;                           		// 0x0714 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DDMobile_FireButton;                              		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DDMobile_AltFireButton;                           		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DDMobile_AltActivationButton;                     		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DDMobile_ShowInventoryButton;                     		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundLevelUpAvailable;                            		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LevelUpAvailableMessageString;                    		// 0x072C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      LevelUpAvailableMessageColor;                     		// 0x0738 (0x0004) [0x0000000000000000]              
	class UUILabel*                                    RespawnTimerLabel;                                		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Mobile_MaxQuickReleaseTime;                       		// 0x0740 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Mobile_MinHoldTime;                               		// 0x0744 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bAllowAllMobileKeys : 1;                          		// 0x0748 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bPlayedDeathAnimation : 1;                        		// 0x0748 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ShowingBuildPhasePanel : 1;                       		// 0x0748 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      ShowingLevelUp : 1;                               		// 0x0748 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTriggeredAltFirePress : 1;                       		// 0x0748 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bTriggeredFirePress : 1;                          		// 0x0748 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      ProgressBarShown : 1;                             		// 0x0748 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      HasDisplayedMissionObjective : 1;                 		// 0x0748 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      HealthBlipFadingIn : 1;                           		// 0x0748 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bIsStatusPanelHidden : 1;                         		// 0x0748 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bTouchIsDown : 1;                                 		// 0x0748 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bActivatedMobileTouchHold : 1;                    		// 0x0748 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bSetBuildPhaseReadyLabel : 1;                     		// 0x0748 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	struct FString                                     AddedBankManaString;                              		// 0x074C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BankedManaString;                                 		// 0x0758 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FLinearColor                                AddedBankManaColor;                               		// 0x0764 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastMajorNotificationLabelIndex;                  		// 0x0774 (0x0004) [0x0000000000000000]              
	int                                                LastMajorNotificationLabelHiddenIndex;            		// 0x0778 (0x0004) [0x0000000000000000]              
	class ADunDefPlayerController*                     MyPC;                                             		// 0x077C (0x0004) [0x0000000000000000]              
	struct FLinearColor                                LastOriginalNotificationColor;                    		// 0x0780 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LastDisplayedLabelText;                           		// 0x0790 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurrentOverlayHealthPercent;                      		// 0x079C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OverlayTargetHealthPercent;                       		// 0x07A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialEffect*                             LowHealthOverlayEffect;                           		// 0x07A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialEffect*                             HealthBlipOverlayEffect;                          		// 0x07A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentHealthBlipAmount;                          		// 0x07AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentHealthBlipFadeOutSpeed;                    		// 0x07B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastLabelTimer;                                   		// 0x07B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MissionObjectiveTimer;                            		// 0x07B8 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   MobileTouchCoordinates;                           		// 0x07BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTouchPressTime;                               		// 0x07C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37082 ];

		return pClassPointer;
	};

	void NotifyLevelVictory ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void SetMobileTouchCoordinates ( struct FVector pos );
	void UpdateMobileTouchCoordinates ( );
	bool IsMobile ( );
	void ShowStatusPanel ( );
	void HideStatusPanel ( );
	void eventUpdate ( float DeltaTime );
	void UpdateMobileInput ( float DeltaTime );
	void DisplayMissionObjective ( );
	void UpdateMissionObjectiveTimer ( float DeltaTime );
	void TurnOffSpectatorMode ( );
	void UpdateForSpectactorCamera ( float DeltaTime, unsigned long bDontHideHud );
	void NotifyAddedBankedMana ( struct FHighDigitInt howMuch, struct FHighDigitInt total );
	void AddToScore ( int TotalScore, int AmountToAdd, unsigned char ScoreTagReason, struct FLinearColor ScoreTagColor, float ScoreTagAdditionalNum, float ScoreTagSecondaryNum, class AActor* ActorArchetype );
	void NotifyExperienceChange ( unsigned long DontPlayAnimation );
	void CheckHeroCanLevelUp ( unsigned long DontPlayAnimation );
	void NotifyNameChange ( );
	void NotifyLevelUp ( unsigned long DontPlayAnimation );
	class UDunDefHero* GetHero ( );
	void NotifyHealthChange ( unsigned long DontPlayAnimation );
	void RefreshPostEffectBinding ( );
	void NotifyLocalPlayerRemoved ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyLocalPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void eventNotifyUpdateManaPower ( unsigned long DontPlayAnimation );
	void eventSceneDeactivated ( );
	void UpdateLowHealthEffect ( unsigned long DontPlayAnimation );
	void RefreshBuildPhaseValue ( );
	void ResetValues ( );
	void eventInitHUDUI ( class ADunDefPlayerController* forPC );
	void ShowMajorNotificationLabelCompleted ( unsigned long bResetColor );
	void UpdateNotificationColor ( struct FLinearColor NewColor, float sizeScalar, unsigned long bDontUseSizeScalar );
	void ShowMajorNotificationLabel ( struct FString LabelText, struct FLinearColor LabelColor, float LabelScale, float LabelTimer, unsigned long bForce );
	void ShowProgressBar ( float Percent, struct FLinearColor ProgressBarColor, unsigned long bPlayCompletedAnimation );
};

UClass* UUI_PlayerHUD::pClassPointer = NULL;

// Class UDKGame.Main
// 0x019C (0x0548 - 0x03AC)
class AMain : public ANativeMain
{
public:
	TArray< struct FMapPrefixDefinition >              MapPrefixes;                                      		// 0x03AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultGameplayLevel;                             		// 0x03B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultGameplayLevelRanked;                       		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultMenuLevel;                                 		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      AllowFriendlyFire : 1;                            		// 0x03DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseMobileCompatibility : 1;                      		// 0x03DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      DisablePlayerInput : 1;                           		// 0x03DC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoSpawnNotifications : 1;                        		// 0x03DC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      BossMode : 1;                                     		// 0x03DC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bRandomSpawnPoints : 1;                           		// 0x03DC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bRandomWithoutReplacementSpawnPoints : 1;         		// 0x03DC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bRandomExcludeLastSpawnPoint : 1;                 		// 0x03DC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAllTowersAffectTowerUnits : 1;                   		// 0x03DC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDropManaUponDeath : 1;                           		// 0x03DC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bDisableItemDrops : 1;                            		// 0x03DC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bAllowMobilePlayers : 1;                          		// 0x03DC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bEnablePostMissionCinematic : 1;                  		// 0x03DC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bIsLoggingIn : 1;                                 		// 0x03DC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bGiveEquipmentRewardsOnFirstWave : 1;             		// 0x03DC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bForceEnemyTargetingTeams : 1;                    		// 0x03DC (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCrystalCoreInvincible : 1;                       		// 0x03DC (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bTowersInvincible : 1;                            		// 0x03DC (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bDisableWaveScalingForNumPlayers : 1;             		// 0x03DC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bDisableAddingXP : 1;                             		// 0x03DC (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      DefaultCombatPhase : 1;                           		// 0x03DC (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      UseAlternateStartTransformation : 1;              		// 0x03DC (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      SwappingPlayerControllers : 1;                    		// 0x03DC (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bPlayersAreInvincible : 1;                        		// 0x03DC (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bIgnoreEnemyStuckChecks : 1;                      		// 0x03DC (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bTutorialMode : 1;                                		// 0x03DC (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bScaleBossHealths : 1;                            		// 0x03DC (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bForcePause : 1;                                  		// 0x03DC (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      reCheckForExcessLoot : 1;                         		// 0x03DC (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bSurvivalTimeLimitMap : 1;                        		// 0x03DC (0x0004) [0x0000000000000000] [0x20000000] 
	float                                              JumpZMultiplier;                                  		// 0x03E0 (0x0004) [0x0000000000000000]              
	float                                              GlobalEnemyHealthMultiplier;                      		// 0x03E4 (0x0004) [0x0000000000000000]              
	float                                              GlobalEnemyDamageMultiplier;                      		// 0x03E8 (0x0004) [0x0000000000000000]              
	float                                              GlobalTowerHealthMultiplier;                      		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              GlobalTowerDamageMultiplier;                      		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              GlobalEquipmentQualityMultiplier;                 		// 0x03F4 (0x0004) [0x0000000000000000]              
	float                                              MaxNumberOfEnemiesMultiplier;                     		// 0x03F8 (0x0004) [0x0000000000000000]              
	float                                              MaxNumberOfEnemiesMobileMultiplier;               		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              GlobalPhysicalTowerHealthMultiplier;              		// 0x0400 (0x0004) [0x0000000000000000]              
	TArray< float >                                    DjinnMaxSurvivalMultipliers;                      		// 0x0404 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    DjinnNumMultipliers;                              		// 0x0410 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    SharkenNumMultipliers;                            		// 0x041C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    CopterNumMultipliers;                             		// 0x0428 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerControllerArchetypeName;                    		// 0x0434 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                StartWave;                                        		// 0x0440 (0x0004) [0x0000000000000000]              
	float                                              EquipmentQualityOverlayMultiplier;                		// 0x0444 (0x0004) [0x0000000000000000]              
	float                                              CrystalCoreHealthMultiplier;                      		// 0x0448 (0x0004) [0x0000000000000000]              
	class UUI_KillCount*                               CurrentKillCountUI;                               		// 0x044C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerStart*                                LastSpawnPoint;                                   		// 0x0450 (0x0004) [0x0000000000000000]              
	class APlayerController*                           PlayerControllerArchetype;                        		// 0x0454 (0x0004) [0x0000000000000000]              
	class UUI_GlobalHUD*                               GlobalHUDUITemplate;                              		// 0x0458 (0x0004) [0x0000000000000000]              
	class UUI_GlobalHUD*                               GlobalHUDUIInstance;                              		// 0x045C (0x0004) [0x0000000000000000]              
	class UUI_LoadingScreen*                           LoadingScreenUITemplate;                          		// 0x0460 (0x0004) [0x0000000000000000]              
	class UPostProcessChain*                           DefaultPostProcessing;                            		// 0x0464 (0x0004) [0x0000000000000000]              
	class UPostProcessChain*                           DefaultMobilePreviewPostProcessing;               		// 0x0468 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   GameOverMusic;                                    		// 0x046C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class APlayerStart* >                      UsedPlayerStarts;                                 		// 0x0470 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumberOfManaTokens;                               		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      MaxNumberOfManaTokens;                            		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentNumberOfEnemies;                           		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumberOfLivingEnemies;                            		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      MaximumNumberOfEnemies;                           		// 0x0494 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumberOfDroppedEquipment;                         		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumberOfDroppedMana;                              		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxNumberOfDroppedMana;                           		// 0x04A8 (0x0004) [0x0000000000000000]              
	int                                                NightmareAdditionalMaxEnemies;                    		// 0x04AC (0x0004) [0x0000000000000000]              
	int                                                MaxNumberOfDroppedManaOnline;                     		// 0x04B0 (0x0004) [0x0000000000000000]              
	int                                                DunDefMaxPlayers;                                 		// 0x04B4 (0x0004) [0x0000000000000000]              
	int                                                TheGameOverDescriptionReason;                     		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GameOverTimer;                                    		// 0x04BC (0x0004) [0x0000000000000000]              
	float                                              EnemyLifeSpanMultiplier;                          		// 0x04C0 (0x0004) [0x0000000000000000]              
	float                                              PlayerNetUpdateFrequency;                         		// 0x04C4 (0x0004) [0x0000000000000000]              
	class UDunDefHeroOverrideList*                     HeroOverrideList;                                 		// 0x04C8 (0x0004) [0x0000000000000000]              
	TArray< struct FEnemyWaveEntry >                   RegisteredEnemyWaveEntries;                       		// 0x04CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UDunDef_SeqAct_EnemyWaveSpawner* >   EnemyWaveSpawnersToTick;                          		// 0x04D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     AlternateStartLocation;                           		// 0x04E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    AlternateStartRotation;                           		// 0x04F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PlayerString;                                     		// 0x04FC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              GlobalEnemyDifficultyOffset;                      		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      PureStrategyGameInfo;                             		// 0x050C (0x0004) [0x0000000000000000]              
	TArray< float >                                    DroppedEquipmentNumPlayersMultiplier;             		// 0x0510 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    NumberOfNightmareOgreMultipliers;                 		// 0x051C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ManaTokensDestroyedThisTick;                      		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAntiCheat*                                  AC;                                               		// 0x052C (0x0004) [0x0000000000000000]              
	unsigned char                                      TutorialFlags[ 0xA ];                             		// 0x0530 (0x000A) [0x0000000000000000]              
	TArray< class UClass* >                            StatsWriteClasses;                                		// 0x053C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37134 ];

		return pClassPointer;
	};

	void EnemyDied ( class ADunDefEnemy* anEnemy );
	void AddWaveSpawnerToTick ( class UDunDef_SeqAct_EnemyWaveSpawner* aSpawner );
	class ADunDefEnemy* WaveSpawnerCreateEnemy ( class UDunDef_SeqAct_EnemyWaveSpawner* aSpawner, class ADunDefEnemy* EnemyTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void CloseKillCountUI ( class UUI_KillCount* aKillCountUI );
	void OpenedKillCountUI ( class UUI_KillCount* aKillCountUI );
	float GetCrystalCoreHealthMultiplier ( class ADunDefCrystalCore* aCore );
	float GetGlobalPhysicalTowerHealthMultiplier ( class ADunDefTower* aTower );
	void AdjustPawnDamage ( class ADunDefPawn* forPawn, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum );
	void AdjustDTDamage ( class ADunDefDamageableTarget* forDT, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum );
	void PlayerReplicationInfoInitialized ( class ADunDefPlayerController* PC );
	bool AllowCheats ( class APlayerController* P );
	class APlayerController* GetPlayerEnemyKillStat ( class APlayerController* Killer );
	float GetTreasureManaDropMultiplier ( );
	class ADunDefEnemy* GetRandomEnemyTemplate ( class UDunDef_SeqVar_EnemyWaveEntries* entriesVar );
	void ModifyEnemyWaveEntries ( class UDunDef_SeqVar_EnemyWaveEntries* entriesVar );
	int GetEnemyTargetingTeam ( class ADunDefEnemy* theEnemy );
	void PawnPossessedBy ( class ADunDefPawn* P, class AController* C, unsigned long bVehicleTransition );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void SetStatsWriteClass ( );
	void Heartbeat ( );
	void eventTick ( float DeltaTime );
	float GetPlayerCorpseLifespan ( class ADunDefPlayer* tPlayer );
	bool GetTutorialFlag ( unsigned char flagType );
	void ClearTutorialFlags ( );
	void SetTutorialFlag ( unsigned char flagType, unsigned long Value );
	bool IsTutorialMode ( );
	bool ShouldSpawnAtStartSpot ( class AController* Player );
	void ProceedToNextCampaignLevel ( );
	int GetRegisteredWaveEntriesKillCount ( );
	class AMain* GetMain ( );
	bool IsUnderEnemyCap ( int NumEnemies, float CheckPercentageOfEnemyCapFree );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	int StartWithMana ( class ADunDefPlayerController* PC );
	int AddManaAfterRespawn ( class ADunDefPlayerController* PC );
	bool IsCompetitiveGameType ( );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	struct FString eventGetDefaultGameClassPath ( struct FString MapName, struct FString Options, struct FString Portal );
	void RemoveExcessItems ( int excess );
	void CheckForExcessiveDroppedEquipment ( unsigned long NotRateTimerCallback );
	void UpdateGlobalHeroModifiers ( class ADunDefPlayerController* thePC );
	int GetPlayerIndex ( class ULocalPlayer* LP );
	void SendPlayerStats ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	class ADunDefPlayerController* GetPrimaryLocalPlayerController ( );
	void PlayerConsoleCommand ( struct FString Command );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	void GenericPlayerInitialization ( class AController* C );
	void StartHumans ( );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void GetPlayerControllers ( TArray< class APlayerController* >* PlayerControllers );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void eventPostSeamlessTravel ( );
	void UpdateMapName ( );
	struct FString GetOnlineSessionName ( );
	void PrintToConsole ( struct FString Text );
	class UEngine* GetEngine ( );
	class UDunDefViewportClient* GetViewportClient ( );
	int GetNumAlivePlayers ( );
	void SpawnedEnemy ( class ADunDefEnemy* anEnemy );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void Logout ( class AController* Exiting );
	void ResolveSplitScreenNames ( class ADunDefPlayerController* inPC );
	void DoPlayerLeaving ( class ADunDefPlayerController* PC, unsigned long bForceLocal );
	void SetFinalWaveNumber ( int theFinalWaveNumber );
	void SetWaveNumber ( int theWaveNumber );
	bool IsGameplayLevel ( );
	bool IsInCinematic ( );
	void UsedSpotForPlayer ( class ANavigationPoint* StartSpot );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	unsigned char GetPlayerTeamForStart ( class AController* Player, unsigned char InTeam );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	void DoWaveSkipping ( unsigned long bAllowArbritraryWaveSkipping );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	void DisplaySaveNotification ( );
	void DelayedShowSaveNotification ( float DelayTime );
	void HandleCheater ( );
	void RunAntiCheat ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void ShowGameOver ( int gameOverDescriptionReason );
	int GetNumLocalPlayers ( );
	int GetMaximumNumberOfEnemies ( );
	int GetMaximumNumberOfManaTokens ( );
	void NeedToSpawnManaTokens ( int howMany );
};

UClass* AMain::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility
// 0x0208 (0x0428 - 0x0220)
class ADunDefPlayerAbility : public ADunDefPlayerAbilityNative
{
public:
	class ADunDefPlayerController*                     ReplicatedOwner;                                  		// 0x0220 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ADunDefPlayer*                               ReplicatedInstigator;                             		// 0x0224 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FColor                                      AbilityStatusColors[ 0x8 ];                       		// 0x0228 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      AbilityColorRecentActivationSuccessful;           		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      AbilityColorRecentActivationFailed;               		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UniqueAbilityName;                                		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DescriptiveName;                                  		// 0x0258 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       CastingStateNamePC;                               		// 0x0264 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CastingStateNameAbility;                          		// 0x026C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BaseOnInstigator : 1;                             		// 0x0274 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRequiresInvisibility : 1;                        		// 0x0274 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceInfiniteBuildPhaseEvenWithTimer : 1;        		// 0x0274 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      BaseOnInstigatorMesh : 1;                         		// 0x0274 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDisableInPureStrategy : 1;                       		// 0x0274 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDoesUnlockPreStringUseSpace : 1;                 		// 0x0274 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      IsATowerBuildingAbility : 1;                      		// 0x0274 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bHideActionWheelUponActivation : 1;               		// 0x0274 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bRequiresWalking : 1;                             		// 0x0274 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIgnorePureStratDisabling : 1;                    		// 0x0274 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bInitialCooldownOnCreation : 1;                   		// 0x0274 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSimulateLocally : 1;                             		// 0x0274 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bPlayFullBodyAnimation : 1;                       		// 0x0274 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bInvincibleAbility : 1;                           		// 0x0274 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bInvincibleWhileCasting : 1;                      		// 0x0274 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bIgnoreMomentumWhileCasting : 1;                  		// 0x0274 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bSetAsOverlordCastingAbility : 1;                 		// 0x0274 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bForceDisableAbilitiesInOverlord : 1;             		// 0x0274 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bIgnoreLevelVictoryCancel : 1;                    		// 0x0274 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      InitializedForOwner : 1;                          		// 0x0274 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bWaitingOnFullBodyAnimation : 1;                  		// 0x0274 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bWasUnderRequiredLevel : 1;                       		// 0x0274 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bWasCoolingDown : 1;                              		// 0x0274 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bForceAllowInBuildPhase : 1;                      		// 0x0274 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bRemoveBuffsOnDeactivate : 1;                     		// 0x0274 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bRemoveBuffsOnCompletion : 1;                     		// 0x0274 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bPressAndHoldAbility : 1;                         		// 0x0274 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bUseManaAttractionMultiplier : 1;                 		// 0x0274 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bOnlyExtendManaAttractionRadiusWhileCasting : 1;  		// 0x0274 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	struct FName                                       BaseOnInstigatorMeshAttachName;                   		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BaseLocOffset;                                    		// 0x0280 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PlacingTowerCameraOffset;                         		// 0x028C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    BaseRotOffset;                                    		// 0x0298 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                NotificationColor;                                		// 0x02A4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundActivationConfirmation;                      		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundActivationFailure;                           		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCancel;                                      		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CoolDownFinished;                                 		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCancelDueToMana;                             		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationInterval;                               		// 0x02C8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              MinimumReactivationInterval;                      		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LobbyActivationInterval;                          		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RequiredHeroLevel;                                		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AssociatedHeroStat;                               		// 0x02D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationFailureString_HeroLevel;                		// 0x02DC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureString_Mana;                     		// 0x02E8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureString_Physics;                  		// 0x02F4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureString_Cooldown;                 		// 0x0300 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationManaString;                             		// 0x030C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationSecondsString;                          		// 0x0318 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationSecondString;                           		// 0x0324 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureStringEnd;                       		// 0x0330 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureString_NotApplicable;            		// 0x033C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CancelledDueToManaString;                         		// 0x0348 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AbilityUnlockedMessagePreString;                  		// 0x0354 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AbilityUnlockedMessageString;                     		// 0x0360 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      AbilityUnlockedMessageColor;                      		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AbilityUnlockedSound;                             		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumRefireTime;                                		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastingCharacterAnimationBlendInTime;             		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastingCharacterAnimationBlendOutTime;            		// 0x037C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastRateHeroHeroStatExponent;                     		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeFromEndToFinishFullBodyAnimation;             		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ProgressBarColor;                                 		// 0x0388 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastingColorFlashIntensity;                       		// 0x0398 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastingColorFlashSpeed;                           		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ColorFlashingBasePercent;                         		// 0x03A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastingColorFlashPower;                           		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SizeFlashingPower;                                		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SizeFlashingSpeed;                                		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SizeFlashingPercent;                              		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CancelOverrideAnimName;                           		// 0x03B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PlacementLocation;                                		// 0x03BC (0x000C) [0x0000000000000000]              
	class UActionWheelEntry*                           MyActionWheelEntry;                               		// 0x03C8 (0x0004) [0x0000000000000000]              
	float                                              LastActivationTime;                               		// 0x03CC (0x0004) [0x0000000000000000]              
	float                                              LastSuccessfulActivationTime;                     		// 0x03D0 (0x0004) [0x0000000000000000]              
	float                                              LastCompletionTime;                               		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              LastFailedActivationTime;                         		// 0x03D8 (0x0004) [0x0000000000000000]              
	float                                              LastUnprocessedRequestActivationTime;             		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FlashingCounter;                                  		// 0x03E0 (0x0004) [0x0000000000000000]              
	TArray< class UDunDefBuff* >                       BuffToApplyToInstigatorOnActivate;                		// 0x03E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDunDefBuff* >                       BuffToApplyToInstigatorOnDeactivate;              		// 0x03F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStatObject*                                 AbilityStatModifierTemplate;                      		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UDunDefBuff* >                       ActiveBuffs;                                      		// 0x0400 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UIActorModifierInterface* >          currentAbilityStatModifiers;                      		// 0x040C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UStatObject*                                 AbilityStatModifier;                              		// 0x0418 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIActorModifierInterface*                    MyActorStatModifier;                              		// 0x041C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0420 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              ManaAttractionRadiusMultiplier;                   		// 0x0424 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37168 ];

		return pClassPointer;
	};

	void UpdateBuffValues ( );
	void RemoveAbilityStatModifier ( class UIActorModifierInterface* oldModifier );
	void AddAbilityStatModifier ( class UIActorModifierInterface* newModifier );
	class UIActorModifierInterface* GetStatModifierObject ( );
	float GetStatValueByTag ( float initalValue, struct FString StatTag, class UIActorModifierInterface* TagActor, unsigned char statType, unsigned long bBaseValueOnly );
	void InitalizeActorStats ( class UIActorModifierInterface* ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly );
	bool IsAbilityActive ( );
	bool AllowMoveWhileCasting ( );
	void CyclePlacementTowerRadius ( );
	void IncreasePlacementTowerRadius ( );
	void DecreasePlacementTowerRadius ( );
	struct FVector GetPlacingTowerCameraOffset ( );
	bool ConsumesInputWhenActive ( );
	void OverridePlayerGroundSpeed ( float* PlayerGroundSpeed );
	bool IsInInfiniteBuildPhase ( unsigned long ignoreLobby );
	bool HidesActionWheelUponActivation ( );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum );
	bool MeetsHeroLevelRequirement ( );
	void AnimNotify_CurrentAbility_Off ( );
	void AnimNotify_CurrentAbility_On ( );
	float GetPlayerDamageResistanceMultiplier ( );
	float GetPlayerAttackDamageMultiplier ( );
	float GetPlayerGroundSpeedMultiplier ( );
	float GetCastRateMultiplier ( );
	void PlayCancelNoManaSound ( );
	void HandleAltCancellation ( );
	void HandleAltConfirmation ( );
	void HandleConfirmation ( );
	void HandleCursorInput ( struct FVector addDir );
	struct FString GetDescriptiveName ( );
	bool IsCasting ( );
	void PlayCancelAnimation ( );
	void StopLoopingAnims ( );
	struct FName GetCastingCancelAnimationOverride ( );
	class ADunDefEmitterSpawnable* GetCastingWeaponEmitter ( );
	class ADunDefEmitterSpawnable* GetCastingCharacterEmitter ( );
	struct FName GetCastingCharacterAnimation ( );
	class ADunDefHUD* GetHUD ( );
	struct FName GetCastingStateNameAbility ( );
	struct FName GetCastingStateNamePC ( );
	void OnInstigatorTeleport ( class USeqAct_Teleport* Action );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool AllowCastingCancelOnDamage ( );
	void OnActivate ( );
	void ClientOnActivate ( );
	void ReduceCoolDown ( float reduceBy );
	void CompletedAbility ( );
	void ClientCompletedAbility ( );
	bool CanAffordAbility ( );
	void RemoveActiveBuffs ( );
	void CancelAbility ( );
	void ClientCancelAbility ( );
	bool IsAuthority ( );
	bool IsLocal ( );
	float GetManaTokenAttractionRangeMultiplier ( );
	struct FColor GetColorForStatus ( unsigned char Status, int* ForceDisplayAbilityName );
	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
	bool AllowUsageDuringCastingStates ( );
	void LocalNotifyUnlock ( );
	void NotifyLocalLevelUp ( );
	void ModifyJumpZ ( float* playerJumpZ );
	int GetDisplayCost ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
	class ADunDefPlayer* GetPlayer ( );
	class ADunDefPlayerController* GetPC ( );
	void ServerCancel ( );
	void ServerActivate ( );
	bool RequestCancellation ( unsigned long bForce );
	struct FString GetActivationFailureString ( unsigned char Status, unsigned long ShortString );
	void SpawnBuffs ( );
	bool RequestActivation ( unsigned long bHeld );
	bool AbilityReleased ( );
	bool AbilityPressed ( );
	float GetCooldownStartTime ( );
	float GetActivationIntervalRemaining ( );
	void InitializeForPlayer ( class ADunDefPlayer* myPlayer );
	void InitializeForController ( class ADunDefPlayerController* PC );
	bool NotifyActivated ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	void eventDestroyed ( );
	class ADunDefGameReplicationInfo* GetGRI ( );
	bool AllowHeroGUID ( int GUID1, int GUID2, int GUID3, int GUID4 );
	void ScaleForHeroModifiers ( unsigned long IsFirstTime );
	bool DrawCastingHUD ( class ADunDefHUD* H );
};

UClass* ADunDefPlayerAbility::pClassPointer = NULL;

// Class UDKGame.DunDefPawn
// 0x0294 (0x0800 - 0x056C)
class ADunDefPawn : public AUDKGamePawn
{
public:
	TArray< struct FName >                             CustomAnimNodeNames;                              		// 0x056C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       CustomAnimBlenderName;                            		// 0x0578 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeBlend*                              CustomAnimBlender;                                		// 0x0580 (0x0004) [0x0000000000000000]              
	int                                                LastCustomAnimNodePlayIndex;                      		// 0x0584 (0x0004) [0x0000000000000000]              
	struct FName                                       AnimJump;                                         		// 0x0588 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             HurtAnimations;                                   		// 0x0590 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       DeathAnimation;                                   		// 0x059C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TurnDirectionBlenderName;                         		// 0x05A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageFlashingScalarParamName;                    		// 0x05AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetingLocationOffset;                          		// 0x05B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastHurtAnimation;                                		// 0x05C0 (0x0004) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x05C4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ADunDefEmitterSpawnable*                     SmallHurtEffectTemplate;                          		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     LargeHurtEffectTemplate;                          		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     CharacterLoopingEmitter;                          		// 0x05D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class USoundCue* >                         HurtSounds;                                       		// 0x05D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USoundCue* >                         DeathSounds;                                      		// 0x05E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USoundCue* >                         FootSteps;                                        		// 0x05EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIsTargetable : 1;                                		// 0x05F8 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bAllowMageHealing : 1;                            		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableMyDroppedManaAttraction : 1;              		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTearOffOnDeath : 1;                              		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAllowHarpoonPassThrough : 1;                     		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bReplicateDeathSound : 1;                         		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowPawnBoosting : 1;                           		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowNegativeStatusAffect : 1;                   		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      GiveScoreDuringBossFight : 1;                     		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDestroyAllManaTokensBeforeDrop : 1;              		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDroppingTokensOverLimit : 1;                     		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      GiveScoreToAllPlayers : 1;                        		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDoDamageFlashing : 1;                            		// 0x05F8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      ZeroVelocityOnDeath : 1;                          		// 0x05F8 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bWantFallingPhysicsOnDeath : 1;                   		// 0x05F8 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bZeroCollisionOnDeath : 1;                        		// 0x05F8 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bDropManaDisableMassiveTokenOnNormalDif : 1;      		// 0x05F8 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bScaleManaByPlayers : 1;                          		// 0x05F8 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bAllowOtherAnimationsAfterDeath : 1;              		// 0x05F8 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCantUseHeroAbilities : 1;                        		// 0x05F8 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bEnraged : 1;                                     		// 0x05F8 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bDidSetPlayerTargetableStatus : 1;                		// 0x05F8 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bCanBePlayerEnemy : 1;                            		// 0x05F8 (0x0004) [0x0000000000002020] [0x00400000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIgnoreTargetingOnSpawnIn : 1;                    		// 0x05F8 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bAllowSuction : 1;                                		// 0x05F8 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bChainIgnore : 1;                                 		// 0x05F8 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bIsWebbed : 1;                                    		// 0x05F8 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	int                                                ScoreWorth;                                       		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerTargetingDesirability;                      		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TowerTargetingDesirability;                       		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFloatingDamage;                                		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HurtAnimBlendTimeIn;                              		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageFlashingDuration;                           		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageFlashingFadeExponent;                       		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            SmallManaTokenTemplate;                           		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            MinorManaTokenTemplate;                           		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            LargeManaTokenTemplate;                           		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            SuperManaTokenTemplate;                           		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            DuperManaTokenTemplate;                           		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            MassiveManaTokenTemplate;                         		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumSmallManaTokens;                               		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumMinorManaTokens;                               		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumLargeManaTokens;                               		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumSuperManaTokens;                               		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumDuperManaTokens;                               		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumMassiveManaTokens;                             		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaTokenImpulseMagnitude;                        		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaTokenTorqueMagnitude;                         		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HurtLocationBoundsMultiplier;                     		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HurtLocationBoundsAddition;                       		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ManaTokenImpulseUpOffset;                         		// 0x0658 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RootSocket;                                       		// 0x0664 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnsnareMovementSpeedMultiplierExponent;           		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnsnareAnimSpeedMultiplierExponent;               		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageFlashingIntensity;                          		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetingAttackRangeOffset;                       		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyTargetingDesirability;                       		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    PlayerManaScales;                                 		// 0x0680 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      DamageMatInstanceIndices;                         		// 0x068C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         MyDamageMatInstances;                             		// 0x0698 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             FootBoneNames;                                    		// 0x06A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PawnDamageResistanceModifier;                     		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastFlashingDamageTime;                           		// 0x06B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastPlayHurtDamageCauser;                         		// 0x06B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastPlayHurtTime;                                 		// 0x06BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDarknessTime;                                 		// 0x06C0 (0x0004) [0x0000000000000000]              
	float                                              LastTakeDamageTime;                               		// 0x06C4 (0x0004) [0x0000000000000000]              
	float                                              LastFloatingTakeDamageTime;                       		// 0x06C8 (0x0004) [0x0000000000000000]              
	int                                                NumVeryRecentDamages;                             		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageMultiplierAdditional;                       		// 0x06D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< unsigned char >                            IsPlayingUninterruptableAnimation;                		// 0x06D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastSpikyBlockadeDamageTime;                      		// 0x06E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHurtEffectTime;                               		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTookDamageTime;                               		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DiedTime;                                         		// 0x06EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   OverridePawnFootStepSound;                        		// 0x06F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             OverridePawnFootStepParticle;                     		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      DiedFromDamageType;                               		// 0x06F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAuraEffect                                 AuraEffects[ 0xA ];                               		// 0x06FC (0x0050) [0x0000000000000000]              
	class UParticleSystemComponent*                    AuraPSC[ 0xA ];                                   		// 0x074C (0x0028) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class ADunDefTower_Aura* >                 MyAffectingAuras;                                 		// 0x0774 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       AuraEffectSocket;                                 		// 0x0780 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AuraEffectScale;                                  		// 0x0788 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalAuraEffectScale;                            		// 0x078C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimSpeedMultiplier;                              		// 0x0790 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              DamageMultiplierStrengthDrain;                    		// 0x0794 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      KillerProjectileIndex;                            		// 0x0798 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentStatusEffect;                              		// 0x0799 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FLinearColor                                HealDamageTextColor;                              		// 0x079C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightningTowerDamagePercent;                      		// 0x07AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnDrainDamageMultiplier;                        		// 0x07B0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              PawnDrainDamageResistanceMultiplier;              		// 0x07B4 (0x0004) [0x0000000000000000]              
	TArray< class UPawnBoosterInterface* >             PawnBoosters;                                     		// 0x07B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UPawnBoosterInterface* >             PawnDeBoosters;                                   		// 0x07C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ADunDefTower_ChainLightning* >       ChainingTowers;                                   		// 0x07D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     LastBumpLocation;                                 		// 0x07DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                TicksStuckInAnotherActor;                         		// 0x07E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MinTicksStuckBeforeUncolliding;                   		// 0x07EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FsLastDamageInfo                            LastDamageInfo;                                   		// 0x07F0 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37195 ];

		return pClassPointer;
	};

	void GetBuffedStatValue ( unsigned char levelUpValue, unsigned long bAdditivePass, float* buffVal );
	bool HasStatusEffect ( unsigned char StatusToCheck );
	void RemoveStatusEffect ( unsigned char Status );
	void AddStatusEffect ( unsigned char Status );
	void AdjustDealtDamage ( class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum );
	void OnBuffRemoved ( class UObject* BuffRemoved );
	void OnBuffAdded ( class UObject* BuffAdded );
	void ReportBuffRemoved ( class UDunDefBuff* BuffRemoved );
	void ReportBuffAdded ( class UDunDefBuff* BuffAdded );
	void ReportActorDealtDamage ( int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage );
	void ReportTookDamage ( int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage );
	void ReportHealedActor ( int healedAmount, class AActor* healed );
	void ReportKilledActor ( class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem );
	float GetLightningTowerDamagePercent ( );
	void setIsWebbed ( unsigned long isWebbed );
	bool isWebbed ( );
	bool GetChainIgnore ( );
	void SetChainIgnore ( unsigned long ignore );
	bool IsBeingChainedBy ( class ADunDefTower_ChainLightning* Tower );
	void RemoveFromChainingTowers ( class ADunDefTower_ChainLightning* Tower );
	void AddToChainingTowers ( class ADunDefTower_ChainLightning* Tower );
	bool AllowSuction ( );
	struct FVector GetLocation ( );
	void WeaponSet ( class AWeapon* NewWeapon );
	struct FVector GetEffectSocketPosition ( );
	struct FName GetEffectsSocketName ( );
	bool AllowsBoosting ( class UPawnBoosterInterface* aBooster );
	bool AllowNegativeStatusAffecting ( );
	float GetBoostAmount ( unsigned char boostType );
	class UPawnBoosterInterface* GetPawnDeBooster ( unsigned char boostType, float* boostValue );
	void RemovePawnDeBooster ( class UPawnBoosterInterface* aBooster, int indexOverride );
	void AddPawnDeBooster ( class UPawnBoosterInterface* aBooster );
	class UPawnBoosterInterface* GetPawnBooster ( unsigned char boostType, float* boostValue );
	void RemoveAllPawnBoosters ( );
	void RemovePawnBooster ( class UPawnBoosterInterface* aBooster, int indexOverride );
	void AddPawnBooster ( class UPawnBoosterInterface* aBooster );
	bool ForceMoveActor ( class AActor* Mover, struct FVector NewLoc );
	class UPrimitiveComponent* GetOverrideTargetComponent ( );
	void SetupDamageFlashing ( );
	void UpdateDamageFlashing ( );
	void LocalTookDamage ( int DamageAmount, struct FVector atPosition, class UClass* fromDamageType );
	bool AllowEnemyDrain ( );
	void SetExtraMovementMult ( float newMult );
	void SetPawnDrainResistanceMult ( float newMult );
	void SetPawnDrainDmgMult ( float newMult );
	void SetWeaponSpeedMultiplier ( float newMult );
	bool AllowDarknessIgnorance ( );
	bool AllowMageHealing ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool AllowTrapSpringing ( class ADunDefTower_DetonationType* trap );
	void JumpOffPawn ( );
	void eventBaseChange ( );
	void HealPctOfMaxHealth ( float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers );
	int GetHealth ( unsigned long bGetMax );
	float GetMass ( );
	void DoCrushed ( class AActor* Victim );
	void CrushedBy ( class APawn* OtherPawn );
	void SetEnraged ( unsigned long bActive );
	int GetScoreWorth ( );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum );
	float GetPawnDamageResistanceModifier ( );
	float GetPawnDamageModifier ( unsigned long bDontIncludeAbilities );
	void StopAuraEffects ( );
	void PSCFinished ( class UParticleSystemComponent* PSystem );
	class UParticleSystemComponent* SpawnAttachParticleEffect ( class UParticleSystem* particleEffect );
	void RemoveAllAuraEffects ( );
	void HandleAuraEffects ( );
	bool AllowEnrage ( );
	bool AllowEnsnare ( );
	void RemoveAuraEffect ( class ADunDefTower_Aura* AuraInstance );
	void AddAuraEffect ( class ADunDefTower_Aura* AuraInstance );
	bool IsFirstAuraOfType ( class ADunDefTower_Aura* AuraInstance );
	int GetNumberOfAurasOfType ( class ADunDefTower_Aura* AuraInstance );
	int GetNumberOfAurasOfClass ( class UClass* AuraClass );
	void HandleDamageTypeEffects ( class UClass* ForDamageType, struct FVector HitLocation );
	void eventAnimNotify_ResetWeaponSwingDamage ( );
	void eventAnimNotify_StopWeaponSwingDamage ( );
	void eventAnimNotify_StartWeaponSwingDamage ( );
	void eventEncroachedBy ( class AActor* Other );
	void AddToScore ( int Points, struct FString ScoreTagReason, struct FLinearColor ScoreTagColor );
	void PlayJumpAnimation ( );
	bool AllowJump ( );
	bool DoJump ( unsigned long bUpdating );
	float GetJumpZ ( );
	float GetHealthPercent ( );
	class ADunDefGameReplicationInfo* GetGRI ( );
	void TakeFallingDamage ( );
	class AInventory* eventCreateInventoryFromTemplate ( class AActor* InventoryActorTemplate, unsigned long bDoNotActivate );
	class AActor* eventNetSpawnLocalActor ( class AActor* ActorTemplate, class AActor* theOwner, struct FVector Position, struct FRotator Orientation, float ScaleFactor, struct FName SpawnFromSocket, unsigned long AttachToSocket, unsigned long AttachToActor, unsigned long DontReplicate );
	void eventDestroyed ( );
	void SetPlayerTargetableStatus ( );
	bool GetCanBePlayerEnemy ( );
	void eventPostBeginPlay ( );
	bool StopCustomAnim ( float blendTimeOut, struct FName CustomAnimationToStop, unsigned long bReplicate, unsigned long bForceReplication );
	float PlayCustomAnim ( struct FName inAnim, float blendTimeIn, unsigned long Looping, float Speed, float BlendOutTime, unsigned long bOverride, unsigned long Replicate, unsigned long bUninterruptable, unsigned long bReplicateToOwners );
	float GetAnimSpeedMultiplier ( );
	void eventPauseAnimationAfterDeath ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	bool IsDead ( );
	void PlayDeathHurtEffect ( class UClass* DamageType, struct FVector HitLocation );
	struct FString GetDescriptiveName ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	int GetScoreSwitch ( );
	void SpawnManaTokens ( class ADunDefPawn* theInstigator, class AActor* fromActor, class ADunDefPlayer* InitialAttractor, unsigned long bIsPrivate );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void PlayHurtEffect ( class UClass* DamageType, struct FVector HitLocation );
	void ClientTakeDamage ( int DamageAmount, class APawn* InstigatorPawn, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	bool IsCurrentlyPlayingHurtAnimation ( );
	void PlayHurtSound ( class UClass* DamageType, struct FVector HitLocation );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	struct FVector GetHurtLocation ( struct FVector HitLocation );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void ShowHealingFloatingNumbers ( int howMuch );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	bool ShouldPlayHurtAnimation ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, int* Result );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void PlayShootAnimation ( unsigned long isBigShoot, unsigned long Replicate, unsigned long bDontPlayAnim );
	struct FVector GetAimAtLocation ( unsigned long LeadTarget, float LeadTargetProjectileSpeed, struct FVector LeadTargetProjectileSpawnLocation, class AActor* AimAtTargetOverride, unsigned long bDontCheckTargetingDesirability );
	void eventPlayFootStepSound ( int FootDown );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void StopCharacterLoopingEmitter ( );
	void SpawnCharacterNonLoopingEmitter ( class ADunDefEmitterSpawnable* Template, unsigned long bAttachToSocket, struct FName SocketName );
	void StartCharacterLoopingEmitter ( class ADunDefEmitterSpawnable* Template );
	void OnDestroy_RemoveFromTargetableList ( );
	void OnPostBeginPlay_AddToTargetableList ( );
	void UnregisterAttacker ( class ADunDefEnemyController* forController );
	void RegisterAttacker ( class ADunDefEnemyController* forController );
	struct FVector GetInterpolatedTargetingLocation ( class AActor* RequestedBy );
	struct FVector GetTargetingLocation ( class AActor* RequestedBy );
	float GetAttackRangeOffset ( );
	bool IgnoreFriendlyFireDamage ( class UDunDefTargetableInterface* instigatorActor, class AController* OptionalController );
	int GetTargetingTeam ( );
	bool ForceFriendlyFire ( class AActor* Target );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefPawn::pClassPointer = NULL;

// Class UDKGame.DunDefPlayer
// 0x0580 (0x0D80 - 0x0800)
class ADunDefPlayer : public ADunDefPawn
{
public:
	struct FLinearColor                                BlackColor;                                       		// 0x0800 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                HealthyColor;                                     		// 0x0810 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UnhealthyColor;                                   		// 0x0820 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FOverlayEffectEntry >               OverlayEffectEntries;                             		// 0x0830 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurrentOverlayEffectOpacity;                      		// 0x083C (0x0004) [0x0000000000000000]              
	struct FLinearColor                                CurrentOverlayEffectColor;                        		// 0x0840 (0x0010) [0x0000000000000000]              
	float                                              OverlayEffectOpacityInterpSpeed;                  		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationInterpSpeed;                              		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChaseCamRotationInterpSpeed;                      		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerInvisTargetableMaximumRange;                		// 0x085C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LookAtSkelControlName;                            		// 0x0860 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAutoAimRange;                                  		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAutoAimDot;                                    		// 0x086C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoAimDotWeight;                                 		// 0x0870 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaTokenAttractionRadius;                        		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LobbyManaTokenAttractionRadius;                   		// 0x0878 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareModePlayerHealthMultiplier;              		// 0x087C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveStartAnimBlendTime;                           		// 0x0880 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaTokenCollectionRadius;                        		// 0x0884 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemoteManaTokenCollectionRadius;                  		// 0x0888 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HoverInterval;                                    		// 0x088C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InversePlayerSkelLookAtYawMultiplier;             		// 0x0890 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InversePlayerSkelLookAtPitchMultiplier;           		// 0x0894 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaTokenAttractionForce;                         		// 0x0898 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCompetitiveFloatingNameDistance;               		// 0x089C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoPickTargetDotWeight;                          		// 0x08A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbsoluteMaxAutoAimRange;                          		// 0x08A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CostOfRepairMaxHealthMultiplier;                  		// 0x08A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CostOfRepairMaxManaMultiplier;                    		// 0x08AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroTalkingSize;                                  		// 0x08B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MyHeroTalkingOffset;                              		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GameLimitProjectilesRangeMultiplier;              		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageResistanceMomentumReductionExponent;        		// 0x08BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InfiniteBuildPhaseSpeedMultiplier;                		// 0x08C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FloatingNameOffset;                               		// 0x08C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CostOfTotalRepair;                                		// 0x08D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfHealRepairTimeExponent;                       		// 0x08D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOfTotalRepair;                                		// 0x08D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootAnimation;                                   		// 0x08DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BigShootAnimation;                                		// 0x08E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RespawnAnimation;                                 		// 0x08EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DetonateTrapsAnimation;                           		// 0x08F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SellTowerAnimation;                               		// 0x08FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PickupItemAnimation;                              		// 0x0904 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ReloadAnimation;                                  		// 0x090C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CallOutAnimation;                                 		// 0x0914 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TowerPlacingAnimation;                            		// 0x091C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelUpAnimation;                                 		// 0x0924 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlagAttachmentSocket;                             		// 0x092C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InversePlayerSkelLookAtControllerName;            		// 0x0934 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     RespawnEffect;                                    		// 0x093C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     DestroyedEffect;                                  		// 0x0940 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   LandedSound;                                      		// 0x0944 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PlayerSpawnYell;                                  		// 0x0948 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxZVelocityForLandedSound;                       		// 0x094C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseCorrectSkelControlAxes : 1;                    		// 0x0950 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseNegativeRollAndPositiveLookAxes : 1;           		// 0x0950 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      UseAltIncorrectSkelControlAxes : 1;               		// 0x0950 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAllowHover : 1;                                  		// 0x0950 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDoesShootAnimOverride : 1;                       		// 0x0950 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIsHostPlayer : 1;                                		// 0x0950 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsPureStrategy : 1;                              		// 0x0950 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisableJumpAnimation : 1;                        		// 0x0950 (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisableSkelControl : 1;                          		// 0x0950 (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisableMeleeAttacking : 1;                       		// 0x0950 (0x0004) [0x0000000000002020] [0x00000200] ( CPF_Net | CPF_Transient )
	unsigned long                                      bBlockedLastHit : 1;                              		// 0x0950 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bCleaningUpPlayer : 1;                            		// 0x0950 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bPlayedDestroyedEffect : 1;                       		// 0x0950 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bWantsHovering : 1;                               		// 0x0950 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bCanHover : 1;                                    		// 0x0950 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bIsHovering : 1;                                  		// 0x0950 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bAllowCollectingOwnTokens : 1;                    		// 0x0950 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bSupportsWeaponSwap : 1;                          		// 0x0950 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      DoRespawn : 1;                                    		// 0x0950 (0x0004) [0x0000000000000020] [0x00040000] ( CPF_Net )
	unsigned long                                      bDisableJump : 1;                                 		// 0x0950 (0x0004) [0x0000000000000021] [0x00080000] ( CPF_Edit | CPF_Net )
	unsigned long                                      bPlayedRespawnEffect : 1;                         		// 0x0950 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bCallingOut : 1;                                  		// 0x0950 (0x0004) [0x0000000000000020] [0x00200000] ( CPF_Net )
	unsigned long                                      bForceWeaponSpellEffectSocket : 1;                		// 0x0950 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bWantsHitInfo : 1;                                		// 0x0950 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bShowWeapons : 1;                                 		// 0x0950 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bUseOverrideCalloutLoc : 1;                       		// 0x0950 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bAllowOverlordPickup : 1;                         		// 0x0950 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	float                                              PlayerGroundSpeed;                                		// 0x0954 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UFont*                                       FloatingPlayerNameFont;                           		// 0x0958 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatingPlayerNameScale;                          		// 0x095C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelectHeroMeshScale;                              		// 0x0960 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SelectHeroTranslationOffset;                      		// 0x0964 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefHUD*                                  HudTemplate;                                      		// 0x0970 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           HUDDeathStrings;                                  		// 0x0974 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      DiedMessageColor;                                 		// 0x0980 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroCastingRate;                  		// 0x0984 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_HeroCastingRate;                   		// 0x0988 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroCastingRate;                     		// 0x098C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpFull_HeroCastingRate;                      		// 0x0990 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultInitial_HeroCastingRate_Competitive;      		// 0x0994 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpInitial_HeroCastingRate_Competitive;       		// 0x0998 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatMultFull_HeroCastingRate_Competitive;         		// 0x099C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatExpFull_HeroCastingRate_Competitive;          		// 0x09A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationString;                                 		// 0x09A4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      ActivationStringColor;                            		// 0x09B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      AltActivationStringColor;                         		// 0x09B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      CallOutArrowColor;                                		// 0x09B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      MidLowHealthHurtForceFeedbackWaveForm;            		// 0x09BC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UForceFeedbackWaveform*                      LowLowHealthHurtForceFeedbackWaveForm;            		// 0x09C0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              MidLowHealthFFThresholdPercent;                   		// 0x09C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LowLowHealthFFThresholdPercent;                   		// 0x09C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MidLowHealthFFInterval;                           		// 0x09CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LowLowHealthFFInterval;                           		// 0x09D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastLowHealthFFTime;                              		// 0x09D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      autoAimTarget;                                    		// 0x09D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USkelControlSingleBone*                      PlayerSkelControlLookAt;                          		// 0x09DC (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      InversePlayerSkelControlLookAt;                   		// 0x09E0 (0x0004) [0x0000000000000000]              
	struct FName                                       TowerSummonInProgressAnimation;                   		// 0x09E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SpellCompleteAnimation;                           		// 0x09EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RepairingTowerAnimation;                          		// 0x09F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UpgradingTowerAnimation;                          		// 0x09FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HealSelfAnimation;                                		// 0x0A04 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MagicStaffUpgradeAnimation;                       		// 0x0A0C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WaveStartAnimation;                               		// 0x0A14 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WaveVictoryAnimation;                             		// 0x0A1C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GameOverAnimation;                                		// 0x0A24 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LowHealthBlenderName;                             		// 0x0A2C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LowHealthBlenderPercentThreshold;                 		// 0x0A34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StaffKnockBackAnimation;                          		// 0x0A38 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MinStaffKnockbackChargeAnimation;                 		// 0x0A40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MaxStaffKnockbackChargeAnimation;                 		// 0x0A48 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MinStaffChargeAnimation;                          		// 0x0A50 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MaxStaffChargeAnimation;                          		// 0x0A58 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxMeshPitchMag;                                  		// 0x0A60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxMeshYawMag;                                    		// 0x0A64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     InitiateTradeString;                              		// 0x0A68 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ViewTradeString;                                  		// 0x0A74 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantTradeString;                                  		// 0x0A80 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              BigShootAnimBlendInTime;                          		// 0x0A8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShootAnimBlendInTime;                             		// 0x0A90 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShootAnimBlendOutTime;                            		// 0x0A94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShootAnimSpeed;                                   		// 0x0A98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraPlayerDamageMultiplier;                      		// 0x0A9C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerWeaponDamageMultiplier;                     		// 0x0AA0 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            IsPlayingUninterruptableUpperBodyAnimation;       		// 0x0AA4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             UpperBodyCustomAnimNodeNames;                     		// 0x0AB0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       UpperBodyCustomAnimBlenderName;                   		// 0x0ABC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeBlend*                              UpperBodyCustomAnimBlender;                       		// 0x0AC4 (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              LowHealthBlender;                                 		// 0x0AC8 (0x0004) [0x0000000000000000]              
	int                                                LastUpperBodyCustomAnimNodePlayIndex;             		// 0x0ACC (0x0004) [0x0000000000000000]              
	class ADunDefEmitterSpawnable*                     LevelUpCompleteEmitterTemplate;                   		// 0x0AD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     HealSelfEmitterTemplate;                          		// 0x0AD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    CallOutParticle;                                  		// 0x0AD8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FLinearColor                                TargetingParticleNormalColor;                     		// 0x0ADC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TargetingParticleEnemyColor;                      		// 0x0AEC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TargetingParticleNewEnemyColor;                   		// 0x0AFC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                MiniMapIconDeadColor;                             		// 0x0B0C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                MiniMapIconLiveColor;                             		// 0x0B1C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TargetingCursorMaterial;                          		// 0x0B2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseTargetingCursorScaleMin;                      		// 0x0B30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseTargetingCursorScaleMax;                      		// 0x0B34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseTargetingCursorScaleDistance;                 		// 0x0B38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetingCursorScaleDistanceExponent;             		// 0x0B3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseTargetingCursorSize;                          		// 0x0B40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetingIndicatorEnemyScale;                     		// 0x0B44 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetingIndicatorNormalScale;                    		// 0x0B48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetingIndicatorScaleSpeed;                     		// 0x0B4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                LocalPlayerMaterialOverrides;                     		// 0x0B50 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              StepTowardsTargetGroundSpeed;                     		// 0x0B5C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StepTowardsTargetAccelRate;                       		// 0x0B60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MiniMapIconTexture;                               		// 0x0B64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSize;                                  		// 0x0B68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterMiniMapIconSize;                         		// 0x0B6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MiniMapSelectedIconTexture;                       		// 0x0B70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconMyPlayerColor;                         		// 0x0B74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconFriendlyPlayerColor;                   		// 0x0B78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconEnemyPlayerColor;                      		// 0x0B7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSelectionFlashSpeed;                   		// 0x0B80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     HealthString;                                     		// 0x0B84 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     manaString;                                       		// 0x0B90 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      ToolTipHealthColor;                               		// 0x0B9C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipManaColor;                                 		// 0x0BA0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CallOutExpirationTime;                            		// 0x0BA4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CallOutLocationOffset;                            		// 0x0BA8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FPVCameraOffset;                                  		// 0x0BB4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PlayerSpawnLocationOffset;                        		// 0x0BC0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CallOutArrow;                                     		// 0x0BCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CallOutOffScreenFrame;                            		// 0x0BD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CallOutOnScreenFrame;                             		// 0x0BD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CallOutFlashColor;                                		// 0x0BD8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              CallOutArrowScale;                                		// 0x0BE8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CalloutArrowOffset;                               		// 0x0BEC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CallOutOffScreenFrameScale;                       		// 0x0BF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CallOutOnScreenFrameScale;                        		// 0x0BF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CallOutMiniMapScale;                              		// 0x0BF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InverseSkelLookAtPitchClampMax;                   		// 0x0BFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InverseSkelLookAtPitchClampMin;                   		// 0x0C00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepairIncrementFloat;                             		// 0x0C04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedRespawnAnimationTime;                       		// 0x0C08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartHoveringFlyingTime;                          		// 0x0C0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartHoveringLocationZ;                           		// 0x0C10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StartRepairHealth;                                		// 0x0C14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ForcedMaxHealth;                                  		// 0x0C18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TargetingTeam;                                    		// 0x0C1C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FRotator                                    OldRotation;                                      		// 0x0C20 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RemoteLookDir;                                    		// 0x0C2C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   TargetingCursorMaterialInstance;                  		// 0x0C38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MyTargetLocation;                                 		// 0x0C3C (0x000C) [0x0000000000000000]              
	struct FVector                                     ReplicatedTargetLocation;                         		// 0x0C48 (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                RepHealthMax;                                     		// 0x0C54 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedJumpZ;                                  		// 0x0C58 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     MyTargetOffset;                                   		// 0x0C5C (0x000C) [0x0000000000000000]              
	float                                              LastTargetLocationUpdate;                         		// 0x0C68 (0x0004) [0x0000000000000000]              
	struct FCustomColorContainer                       customColors;                                     		// 0x0C6C (0x0038) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      LastSentAutoAimTarget;                            		// 0x0CA4 (0x0004) [0x0000000000000000]              
	class AActor*                                      StepTowardsTarget;                                		// 0x0CA8 (0x0004) [0x0000000000000000]              
	float                                              LastStepTowardsTargetTime;                        		// 0x0CAC (0x0004) [0x0000000000000000]              
	int                                                ManaPower;                                        		// 0x0CB0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxManaPower;                                     		// 0x0CB4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FHighDigitInt                               bankedMana;                                       		// 0x0CB8 (0x0010) [0x0000000000000020]              ( CPF_Net )
	float                                              MinFallingTimeForAirJump;                         		// 0x0CC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastLocation;                                     		// 0x0CCC (0x000C) [0x0000000000000000]              
	float                                              DistanceTravelled;                                		// 0x0CD8 (0x0004) [0x0000000000000000]              
	int                                                HeroBoostHealAmount;                              		// 0x0CDC (0x0004) [0x0000000000000000]              
	float                                              HeroBoostSpeedMultiplier;                         		// 0x0CE0 (0x0004) [0x0000000000000000]              
	float                                              LastServerTargetLocationUpdate;                   		// 0x0CE4 (0x0004) [0x0000000000000000]              
	class AController*                                 MyCachedController;                               		// 0x0CE8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastTargetRotation;                               		// 0x0CEC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CallOutHoldPosition;                              		// 0x0CF8 (0x000C) [0x0000000000000000]              
	float                                              CallOutExpirationTimer;                           		// 0x0D04 (0x0004) [0x0000000000000000]              
	float                                              LastCallOutActivationTime;                        		// 0x0D08 (0x0004) [0x0000000000000000]              
	float                                              CallOutOpacity;                                   		// 0x0D0C (0x0004) [0x0000000000000000]              
	float                                              CallOutOnScreenSize;                              		// 0x0D10 (0x0004) [0x0000000000000000]              
	float                                              CallOutOffScreenSize;                             		// 0x0D14 (0x0004) [0x0000000000000000]              
	float                                              CallOutOffScreenTotalScale;                       		// 0x0D18 (0x0004) [0x0000000000000000]              
	float                                              LastTimeInWalkingState;                           		// 0x0D1C (0x0004) [0x0000000000000000]              
	class UDunDefHero*                                 MyPlayerHero;                                     		// 0x0D20 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFont*                                       MiniMapNameFont;                                  		// 0x0D24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ToggleAbilityTurnOnSoundOverride;                 		// 0x0D28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PersonalMaxTowerUnits;                            		// 0x0D2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ForceWeaponSpellEffectSocketName;                 		// 0x0D30 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMeleeSwingInfo >                   MeleeSwingInfoMultipliers;                        		// 0x0D38 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       CastingCancelAnimName;                            		// 0x0D44 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ADunDefPlayerAbility* >              PlayerAbilities;                                  		// 0x0D4C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ADunDefPlayerAbility* >              LocallySimulatedPlayerAbilities;                  		// 0x0D58 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     CalloutOverrideLoc;                               		// 0x0D64 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHoverUpdateTime;                              		// 0x0D70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UDunDefBuff* >                       DefaultBuffsToSpawn;                              		// 0x0D74 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37194 ];

		return pClassPointer;
	};

	class ADunDefPlayerReplicationInfo* GetPRI ( );
	float GetStatModifier ( class UObject* forActor, unsigned char levelUpValue );
	void OnBuffRemoved ( class UObject* BuffRemoved );
	void OnBuffAdded ( class UObject* BuffAdded );
	struct FName StaticGetOverrideSocketName ( class UDunDefHero* aHero );
	bool AllowDropPickups ( );
	struct FName GetCastingCancelAnimation ( );
	class ADunDefEmitterSpawnable* GetSellTowerEmitter ( );
	class ADunDefEmitterSpawnable* GetTrapDetonationEmitter ( );
	class ADunDefEmitterSpawnable* GetUpgradingWeaponEmitter ( );
	class ADunDefEmitterSpawnable* GetWeaponRepairEmitter ( );
	class ADunDefEmitterSpawnable* GetHealingWeaponEmitter ( );
	class ADunDefEmitterSpawnable* GetSummoningTowerEmitter ( );
	void StopSpellEmitter ( );
	void StartSpellEmitter ( class ADunDefEmitterSpawnable* Template, unsigned long DontSetAsPrimaryEffect, unsigned long IsSpawnEffect, unsigned long bForceSpawnOnWeapon );
	struct FString GetReloadString ( );
	float GetReloadPercent ( );
	int GetMaxAmmo ( );
	int GetAmmo ( );
	float GetAmmoPercent ( );
	bool GetAmmoBarColors ( struct FLinearColor* BarColor, struct FLinearColor* TextColor );
	bool UsesAmmoBar ( );
	float GetPetHealingAmount ( );
	bool LimitPetHealing ( class UHeroEquipment_Familiar* askingFamiliar );
	bool AllowPetHealing ( class UHeroEquipment_Familiar* askingFamiliar );
	bool AllowFairy ( class UHeroEquipment_Familiar* askingFamiliar );
	bool AllowFamiliarAbilities ( class UHeroEquipment_Familiar* askingFamiliar );
	bool AllowEquipmentAttachment ( );
	void Teleported ( );
	void SetOwnerNoSee ( unsigned long ownerNoSee, unsigned long ownerNoSeeWeapon );
	void UsedAbility ( class ADunDefPlayerAbility* ability );
	bool AllowNegativeStatusAffecting ( );
	bool ShouldOverrideWeaponElementalEffects ( class ADunDefWeapon* weaponCheck );
	bool AutoActivateSecondaryWeapon ( );
	bool ForceUseInstigatorForMuzzle ( );
	bool ShouldDisplayWeapons ( );
	float GetJumpZ ( );
	void DoWeaponSwap ( unsigned long bForceSwap );
	struct FName GetOffHandSocketName ( );
	void GivePlayerHitInfo ( class AActor* HitActor, int dealtDamage, unsigned long bAllowMomentumOverride, struct FVector* appliedMomentum );
	bool ForceWeaponActivationOverride ( );
	struct FName GetOverrideSocketName ( class ADunDefWeapon* theWeapon );
	class ADunDefWeapon* SwapOffHandWeaponFor ( class ADunDefWeapon* weaponTemplate, class UHeroEquipment* equipmentRef );
	bool GetMeleeSwingInfoOverride ( class ADunDefWeapon_MeleeSword* overrideForWeap, int* currentMeleeSwingIndex, struct FMeleeSwingInfo* OverrideInfo );
	bool OverrideMeleeSwingInfo ( class ADunDefWeapon_MeleeSword* askingWeapon );
	bool AllowDualWeapon ( );
	void Pause ( );
	struct FString GetAltActivationString ( class ADunDefPlayerReplicationInfo* requestingPRI, unsigned char* bDontDrawActivationIcon );
	void eventDoPlayerYell ( );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void PlayerChangedTeam ( );
	bool GetCanBePlayerEnemy ( );
	bool ShouldBlockPlayerAim ( class APlayerController* PC );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	class ADunDefPlayerAbility* GetAbilityByClass ( class UClass* PlayerAbilityClass );
	void Notify_WeaponDidDamage ( class UDunDefTargetableInterface* aTarget, int Damage, struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType );
	void AnimNotify_EquipmentAttachment ( int NotifyID, class USkeletalMeshComponent* equipmentSkelComp );
	void WeaponAttacked ( class ADunDefWeapon* theWeapon, int FireMode );
	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	void DrawCallOutIcon ( class ADunDefHUD* H, class ADunDefMiniMap* useMiniMap, class UCanvas* miniMapCanvas );
	void CallOutOff ( );
	void CallOutOn ( );
	void CallOutOnLoc ( struct FVector overrideCalloutLoc, unsigned long bUseOverrideLoc );
	void ServerCallOutOff ( );
	void ServerCallOutOn ( struct FVector overrideCalloutLoc, unsigned long bUseOverrideLoc );
	void ServerSetTapToJumpLocation ( struct FVector JumpLoc );
	bool CanReload ( );
	void eventDoKnockback ( );
	struct FName GetReloadAnimation ( class ADunDefWeapon* tWeapon );
	void NotifyTeamChanged ( );
	class AController* GetTrueController ( );
	void CleaningUpPlayer ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	float GetActivationOffset ( );
	float GetActivationWeighting ( );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	class UDunDefHero* GetHero ( );
	bool AllowJump ( );
	bool DoJump ( unsigned long bUpdating );
	void SetMaxHealth ( int newMaxHealth, unsigned long bSetHealthToMaxHealth );
	void ClientSetupColors ( );
	void SetMyCustomColors ( class ADunDefPlayerController* aController, class UDunDefHero* usingHero );
	void RemoveOverlayEffect ( class AActor* fromActor );
	void AddOverlayEffect ( class AActor* fromActor, struct FLinearColor EffectColor );
	void UpdateOverlayEffect ( float DeltaTime );
	void SetCustomColors ( class USkeletalMeshComponent* onMesh, struct FLinearColor C1, struct FLinearColor c2, struct FLinearColor C3 );
	void SetupColorizedMICs ( class USkeletalMeshComponent* onMesh, TArray< class UMaterialInterface* > Materials );
	void CrushedBy ( class APawn* OtherPawn );
	int GetScoreWorth ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void UnPossessed ( );
	void AnimNotify_CurrentAbility_Off ( );
	void AnimNotify_CurrentAbility_On ( );
	float GetPawnDamageResistanceModifier ( );
	float GetPawnDamageModifier ( unsigned long bDontIncludeAbilities );
	float AbilitiesOverrideGroundSpeed ( float GroundSpeedToModify );
	float GetPlayerGroundSpeedModifier ( );
	float GetAirSpeed ( );
	float GetGroundSpeed ( unsigned long bJustBaseCalculation, unsigned long bJustDefaultBaseCalculation, float LerpFromDefaultBaseCalculation );
	void ServerChoseStepTowardsTarget ( class AActor* Target );
	void ClientDoStepTowardsTarget ( );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void PlayGameOverAnimation ( );
	float QueueWaveVictoryAnimation ( float Delay );
	void PlayWaveVictoryAnimation ( );
	void PlayWaveStartAnimation ( );
	void PlayPickupItemAnimation ( );
	bool AddHealth ( int howMuch, unsigned long bDontDisplayFloatingNumber );
	float IncrementRepair ( float CurrentMana, float DeltaTime );
	float GetCurrentRepairPercentage ( );
	void StartRepair ( );
	float GetTimeToRepair ( );
	float GetCostOfTotalRepair ( );
	float GetCostToRepair ( );
	bool NeedsRepair ( );
	void PlayJumpAnimation ( );
	void SetRespawnOff ( );
	float PlayRespawnEffect ( );
	void PlayDestroyedEffect ( );
	void TryTokenCollection ( class ADunDefManaToken* Token );
	float GetManaTokenCollectionRadiusSq ( );
	void CheckForTokens ( );
	float GetManaTokenAttractionRadius ( );
	bool HasMaxManaPower ( );
	void eventTick ( float DeltaTime );
	void UpdateHovering ( );
	void StopHovering ( );
	void StartHovering ( );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void SetLookTarget ( struct FVector TargetLoc, class AActor* theLookAtTarget, unsigned long DontSetAutoAimTarget );
	struct FVector GetAimAtLocation ( unsigned long bLeadTarget, float LeadTargetProjectileSpeed, struct FVector LeadTargetProjectileSpawnLocation, class AActor* AimAtTargetOverride, unsigned long bDontCheckTargetingDesirability );
	class AActor* GetAutoAimTarget ( float maximumRange, float minDotOveride );
	void PlayShootAnimation_Float ( float FloatValue, unsigned long Replicate );
	struct FName GetShootAnim ( );
	void PlayShootAnimation ( unsigned long isBigShoot, unsigned long Replicate, unsigned long bDontPlayAnim );
	void UpdateRotation ( float DeltaTime, struct FVector Direction, unsigned long invalidTargetLocation, unsigned long bIsInChaseCam );
	class ADunDefWeapon* SwapWeaponFor ( class ADunDefWeapon* weaponTemplate, class UHeroEquipment* equipmentRef );
	void ThrowWeaponOnDeath ( );
	void EnableLocalAccelerationBlender ( );
	void eventPostBeginPlay ( );
	void eventDestroyed ( );
	bool StopCustomAnim ( float blendTimeOut, struct FName CustomAnimationToStop, unsigned long bReplicate, unsigned long bForceReplication );
	void StopLoopingAnimations ( );
	void StartLoopingAnimation ( struct FName AnimName );
	float PlayCustomAnimUpperBody ( struct FName inAnim, float blendTimeIn, unsigned long Looping, float Speed, float BlendOutTime, unsigned long bOverride, unsigned long Replicate, unsigned long bUninterruptable, unsigned long bDoWeaponFiredEffect, float OverrideNotificationWeight );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	void DrawFloatingTalker ( class AHUD* H, struct FVector WorldLoc, float theScale, float theOpacity );
	bool DrawMyHUD ( class ADunDefHUD* H );
	bool HasLightningStance ( );
	struct FLinearColor GetHealthColor ( );
	struct FString GetDescriwptiveName ( );
	bool OnlyDrawHUDForOwner ( );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	int GetTargetingTeam ( );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefPlayer::pClassPointer = NULL;

// Class UDKGame.IActorModifierInterface
// 0x0000 (0x003C - 0x003C)
class UIActorModifierInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37244 ];

		return pClassPointer;
	};

	class UIActorModifierInterface* GetStatModifierObject ( );
	float GetStatValueByTag ( float initalValue, struct FString StatTag, class UIActorModifierInterface* TagActor, unsigned char statType, unsigned long bBaseValueOnly );
	void InitalizeActorStats ( class UIActorModifierInterface* ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly );
};

UClass* UIActorModifierInterface::pClassPointer = NULL;

// Class UDKGame.DunDefWeapon
// 0x01DE (0x04EA - 0x030C)
class ADunDefWeapon : public AWeapon
{
public:
	class ADunDefProjectile*                           ProjectileTemplate;                               		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ADunDefProjectile* >                 ExtraProjectileTemplates;                         		// 0x0310 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       WeaponAttachmentSocketName;                       		// 0x031C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x0324 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeaponMuzzleSocketName;                           		// 0x0330 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     RepairingTowerWeaponEmitterTemplate;              		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     UpgradingTowerWeaponEmitterTemplate;              		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     HealingSelfWeaponEmitterTemplate;                 		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     SummoningTowerWeaponEmitterTemplate;              		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ChoosingPlaceTowerWeaponEmitterTemplate;          		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ChoosingRepairTowerWeaponEmitterTemplate;         		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ChoosingSellTowerWeaponEmitterTemplate;           		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     DetonatingTrapsEmitterTemplate;                   		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     SellTowerEmitterTemplate;                         		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ManaBombCastingEmitterTemplate;                   		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BaseDamage;                                       		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStepTowardsRange;                              		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ElementalEffectAttachmentSockets;                 		// 0x0368 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UParticleSystemComponent* >          ElementalEffectParticleComponents;                		// 0x0374 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              TheElementalEffectMinScale;                       		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TheElementalEffectMaxScale;                       		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TheElementalEffectMaxScaleDamageAmount;           		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TheElementalEffectScaleExponent;                  		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastFireTimeInterval;                             		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     MuzzleFlashEmitterTemplate;                       		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaselineQualityComparisonTypeDamage;              		// 0x0398 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementalEffectScale;                             		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USoundCue* >                         AttackSounds;                                     		// 0x03A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaxShootOffsetYawArc;                             		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileSpeedBonusMultiplier;                   		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileSpeedAddition;                          		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponDamageMultiplier;                           		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseAdditionalProjectileDamage : 1;               		// 0x03BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseInstigatorSocketForMuzzle : 1;                		// 0x03BC (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bSetLightToWeaponColor : 1;                       		// 0x03BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoForceFeedbackOnAttack : 1;                     		// 0x03BC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseAltDamageForProjectileBaseDamage : 1;         		// 0x03BC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSetLightToWeaponColorSecondary : 1;              		// 0x03BC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPlayShootAnimation : 1;                          		// 0x03BC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseBigShootAnimation : 1;                        		// 0x03BC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bSpawnMuzzleFlashOnShootAnim : 1;                 		// 0x03BC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDontSpawnMuzzleFlashInFPV : 1;                   		// 0x03BC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAutoActivate : 1;                                		// 0x03BC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIsMeleeWeapon : 1;                               		// 0x03BC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDontPlayAttackSoundOnShoot : 1;                  		// 0x03BC (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bForceToMinElementalScale : 1;                    		// 0x03BC (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bForceToMaxElementalScale : 1;                    		// 0x03BC (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bUseOffHandRot : 1;                               		// 0x03BC (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bUseOffHandScale : 1;                             		// 0x03BC (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bActivated : 1;                                   		// 0x03BC (0x0004) [0x0000000000000020] [0x00020000] ( CPF_Net )
	unsigned long                                      bIsSecondary : 1;                                 		// 0x03BC (0x0004) [0x0000000000002020] [0x00040000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bElementalEffectsInited : 1;                      		// 0x03BC (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bOverrodeElementalEffects : 1;                    		// 0x03BC (0x0004) [0x0000000000002020] [0x00100000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bOverrideActivation : 1;                          		// 0x03BC (0x0004) [0x0000000000000020] [0x00200000] ( CPF_Net )
	unsigned long                                      bIgnoreProjectileOffset : 1;                      		// 0x03BC (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bModifyParticleColourAttached : 1;                		// 0x03BC (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bModifyParticleColourProjectile : 1;              		// 0x03BC (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bModifyParticleColourEmitter : 1;                 		// 0x03BC (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bModifyParticleColourProjectileEmitter : 1;       		// 0x03BC (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      usesColourSets : 1;                               		// 0x03BC (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	class UForceFeedbackWaveform*                      AttackForceFeedbackWaveForm;                      		// 0x03C0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FLinearColor                                MatEquipmentRatingColor;                          		// 0x03C4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              MatEquipmentRatingOverlayPower;                   		// 0x03D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           ProjectileSpawnOffsets;                           		// 0x03D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRotator >                          ProjectileRotOffsets;                             		// 0x03E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                WeaponEquipmentQualityMaterialIndex;              		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BaseTotalAmmo;                                    		// 0x03F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BaseAltDamage;                                    		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BaseBlockingDamageResistance;                     		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BaseShotsPerSecond;                               		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ReloadString;                                     		// 0x0404 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              MinimumProjectileSpeed;                           		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EquipSound;                                       		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FGameDamageEntry >                  ElementalEffectEntries;                           		// 0x0418 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FLinearColor                                ReloadNormalTextColor;                            		// 0x0424 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ReloadNormalBarColor;                             		// 0x0434 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ReloadReloadingTextColor;                         		// 0x0444 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ReloadReloadingBarColor;                          		// 0x0454 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoEquipmentWeaponScaleMultiplier;                 		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    OffhandRotOffset;                                 		// 0x0468 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     OffHandScale;                                     		// 0x0474 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              StoredChargePercent;                              		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefEmitterSpawnable*                     CurrentSpellEmitter;                              		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefEmitterSpawnable*                     SpawnEffect;                                      		// 0x0488 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicationMeshScale;                             		// 0x048C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              BaseMeshScale;                                    		// 0x0490 (0x0004) [0x0000000000000000]              
	int                                                AdditionalDamageAmount;                           		// 0x0494 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      AdditionalDamageType;                             		// 0x0498 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WeaponEquipmentQualityValue;                      		// 0x049C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ADunDefEmitterSpawnable*                     PreviousSpawnEffect;                              		// 0x04A0 (0x0004) [0x0000000000000000]              
	struct FEquipmentColorSet                          WeaponColorSet;                                   		// 0x04A4 (0x0020) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInstanceConstant*                   WeaponEquipmentQualityMIC;                        		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFireTime;                                     		// 0x04C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UHeroEquipment*                              MyEquipmentRef;                                   		// 0x04CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EquipmentSwingSpeedMultiplier;                    		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WeaponSpeedMultiplier;                            		// 0x04D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< unsigned char >                            bIsFireDown;                                      		// 0x04D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      primaryColour;                                    		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PrimaryElement;                                   		// 0x04E8 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      SecondaryElement;                                 		// 0x04E9 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37269 ];

		return pClassPointer;
	};

	class UClass* GetWeaponDamageType ( unsigned long bGetAltDamageType );
	void SetOwnerNoSee ( unsigned long ownerNoSee );
	void ClearAttachedComponents ( );
	void HideWeapon ( );
	bool CanUseAbility ( class ADunDefPlayerAbility* ability );
	float GetWeaponSpeedMult ( );
	float GetFireInterval ( unsigned char FireModeNum );
	void SetWeaponSpeedMultiplier ( float newMult );
	bool HasRecentlyFired ( float timeSinceLastFire, class ADunDefPlayerController* forController );
	void DoAttackForceFeedback ( class ADunDefPlayerController* theController, int FireMode );
	void UsedAbility ( class ADunDefPlayerAbility* ability );
	struct FString GetReloadString ( );
	bool GetReloadingColors ( struct FLinearColor* BarColor, struct FLinearColor* TextColor );
	bool IsReloading ( );
	float GetReloadPercent ( );
	bool IsOccupied ( );
	int GetMaxAmmo ( );
	int GetAmmo ( );
	float GetAmmoPercent ( );
	bool UsesAmmo ( );
	void DoKnockback ( );
	bool IsLocallyOwned ( );
	bool IsAuthority ( );
	bool HasInstigatorController ( );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum );
	bool ShouldPlayHurtAnimation ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, int* Result );
	float GetProjectileDamage ( );
	void DrawHUD ( class ADunDefHUD* H );
	void BeginFire ( unsigned char FireModeNum );
	void eventPawnTookDamage ( );
	void DoWeaponFiredEffect ( );
	void PlayedShootAnimation ( unsigned long isBigShot );
	void StaticSetWeaponEquipmentColorSet ( class UMaterialInstanceConstant* matInstance, struct FEquipmentColorSet* weaponColors );
	void StaticSetWeaponEquipmentQuality ( class ADunDefWeapon* weaponTemplate, class UMaterialInstanceConstant* matInstance, float qualityValue );
	void SetWeaponEquipmentColorSet ( struct FEquipmentColorSet weaponColors );
	void SetWeaponEquipmentQuality ( float qualityValue );
	void AnimNotify_ResetWeaponSwingDamage ( );
	void AnimNotify_StopWeaponSwingDamage ( );
	void AnimNotify_StartWeaponSwingDamage ( );
	void ClientCheckBase ( );
	void ClientCheckInstigator ( );
	void DoAutoActivateChecks ( );
	void eventPostBeginPlay ( );
	void DetachOverriddenElementalEffects ( );
	void DoOverrideElementalEffects ( class UParticleSystem* elementalEffect, struct FName attachSocket, float effectScale );
	void ActivateElementalEffects ( );
	void UninitElementalEffect ( );
	void InitializeElementalEffect ( );
	void SetScaleForHeroEquipment ( );
	void InitializeForHeroEquipment ( class UHeroEquipment* weaponEquipment );
	int GetEquipmentBlockingBonus ( );
	int GetEquipmentShotsPerSecondBonus ( );
	int GetEquipmentReloadSpeedBonus ( );
	int GetEquipmentTotalAmmoBonus ( );
	int GetEquipmentAdditionalDamageAmount ( );
	class UClass* GetEquipmentAdditionalDamageType ( );
	int GetEquipmentChargeSpeedBonus ( );
	int GetEquipmentKnockbackBonus ( );
	int GetEquipmentProjectileSpeedBonus ( );
	int GetEquipmentNumProjectilesBonus ( );
	int GetEquipmentAltDamageBonus ( );
	int GetEquipmentDamageBonus ( );
	float GetProtonChargeBlastDamageMultiplier ( );
	int GetEquipmentDamageMultiplier ( );
	float GetHeroDamageModifier ( );
	float GetProjectileSpeed ( class ADunDefProjectile* projectileArch );
	void ShootProjectiles ( int theFireMode );
	void CustomFire ( int theFireMode );
	void GetProjectileSpawnTransformation ( int Index, class AActor* AimAtTarget, unsigned long bForceNoRotClamping, struct FVector* OutLocation, struct FRotator* OutRotation );
	int GetNumProjectiles ( );
	struct FRotator GetProjectileSpawnRotation ( struct FVector ProjectileShotLocation, unsigned long ForceNoRotClamping, class AActor* AimAtTargetOverride );
	struct FVector eventGetMuzzleLoc ( );
	float GetTotalAdditionalDamage ( );
	float GetTotalDamage ( );
	void GetMuzzleTransformation ( struct FVector* muzzleLoc, struct FRotator* MuzzleRot );
	void UnHideAdditionalAttachments ( );
	void HideAdditionalAttachments ( );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	void DetachWeapon ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName, unsigned long bDontPlaySound );
	void PutDownWeapon ( );
	void Activate ( );
	void eventDestroyed ( );
	void StopSpellEmitter ( );
	void StartSpellEmitter ( class ADunDefEmitterSpawnable* Template, unsigned long DontSetAsPrimaryEffect, unsigned long IsSpawnEffect, unsigned long bForceSpawnOnWeapon );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefWeapon::pClassPointer = NULL;

// Class UDKGame.DunDefGameMessage
// 0x0000 (0x0164 - 0x0164)
class UDunDefGameMessage : public UGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37277 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void PrintGlobalLocalHUDMessage ( struct FString MessageString, unsigned long OverrideColor, struct FColor TheColor, unsigned long OverrideFontSize, int TheFontSize, int Switch, unsigned long OverrideLifeTime, float TheLifeTime, unsigned long OverridePosition, float ThePosition, unsigned long OverrideMessageClass, class UClass* InMessageClass, class UObject* OptionalObject, class USurface* Icon );
	void PrintHUDMessage ( class APlayerController* P, struct FString MessageString, unsigned long OverrideColor, struct FColor TheColor, unsigned long OverrideFontSize, int TheFontSize, int Switch, unsigned long OverrideLifeTime, float TheLifeTime, unsigned long OverridePosition, float ThePosition, unsigned long OverrideMessageClass, class UClass* InMessageClass, class UObject* OptionalObject, class USurface* Icon );
};

UClass* UDunDefGameMessage::pClassPointer = NULL;

// Class UDKGame.DunDefAbilityMessage
// 0x0000 (0x0164 - 0x0164)
class UDunDefAbilityMessage : public UDunDefGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37276 ];

		return pClassPointer;
	};

};

UClass* UDunDefAbilityMessage::pClassPointer = NULL;

// Class UDKGame.DunDefEmitterSpawnable
// 0x00A8 (0x02D4 - 0x022C)
class ADunDefEmitterSpawnable : public AEmitterSpawnable
{
public:
	class UPointLightComponent*                        MyPointLightComponent;                            		// 0x022C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LightLifeSpan;                                    		// 0x0230 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              LightFadeUpTime;                                  		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightFadeOutTime;                                 		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USoundCue* >                         RandomSoundToPlay;                                		// 0x023C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAudioComponent*                             MyAudioComponent;                                 		// 0x0248 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      AllowSoundToFinishBeforeDestroying : 1;           		// 0x024C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DoLightOscillation : 1;                           		// 0x024C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDoCameraShake : 1;                               		// 0x024C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoCameraShakeControllerVibration : 1;            		// 0x024C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceDestroyOnFadeOut : 1;                       		// 0x024C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bForceHideParticlesOnFadeOut : 1;                 		// 0x024C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bInstanceDecalMaterial : 1;                       		// 0x024C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowSpawnOutsideOfView : 1;                     		// 0x024C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseParticleFadeOutParam : 1;                     		// 0x024C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseParticleSystemFadeInParam : 1;                		// 0x024C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAutoActivate : 1;                                		// 0x024C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIgnoreEmitterLimit : 1;                          		// 0x024C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      DoLightFadeDown : 1;                              		// 0x024C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      DoLightFadeUp : 1;                                		// 0x024C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bFadedParticleIn : 1;                             		// 0x024C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bIncrementedEmitterCount : 1;                     		// 0x024C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	TArray< class UParticleSystem* >                   AlternatePSTemplates;                             		// 0x0250 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LightOscillationPercent;                          		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightOscillationFrequency;                        		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultFadeOutLifeSpan;                           		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraShakeDelay;                                 		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutOfViewLifespan;                            		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraShakeRadius;                                		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FailsafeLifespan;                                 		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalComponentFarPlane;                           		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                ShakeParams;                                      		// 0x027C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           ParticleLightEnvironment;                         		// 0x0280 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           ActorLightEnvironment;                            		// 0x0284 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDecalComponent*                             DecalComponent;                                   		// 0x0288 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              SpawnOutsideOfViewSphereCheckRadius;              		// 0x028C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ParticleSystemFadeParamName;                      		// 0x0290 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParticleSystemFadeParamNameAlt;                   		// 0x0298 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleFadeOutTime;                              		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleFadeInTime;                               		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NotInViewLifeSpan;                                		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalLifeSpanFadeoutTime;                    		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalBackFaceAngle;                               		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoFadeOutLifeSpan;                              		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleFadeOutParamStartTime;                    		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ParticleSystemFadeParamOriginalValue;             		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ParticleSystemFadeParamAltOriginalValue;          		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OriginalBrightness;                               		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeOutStartTime;                                 		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LightPercentage;                                  		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MyTargetingTeam;                                  		// 0x02D0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37415 ];

		return pClassPointer;
	};

	float eventGetSpawnFrustumCheckRadius ( class ADunDefEmitterSpawnable* theArchetype );
	bool eventAllowSpawn ( class AActor* theArchetype, struct FVector theLoc, struct FRotator theRot );
	void eventTick ( float DeltaTime );
	void SetDecalSize ( float Size );
	void SetGameFloatParameter ( struct FName ParamName, float Value );
	void SetSize ( float Size );
	void DoCameraShake ( );
	void RefreshAutoFadeOut ( );
	void eventPostBeginPlay ( );
	void FadeOut ( float theLightFadeOutTime );
	void ReplicatedFadeOut ( float theLightFadeOutTime );
	void eventDestroyed ( );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefEmitterSpawnable::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_CharacterToggle
// 0x0050 (0x0478 - 0x0428)
class ADunDefPlayerAbility_CharacterToggle : public ADunDefPlayerAbility
{
public:
	int                                                ManaCostPerSecond;                                		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InitialManaCostToActivate;                        		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TurnOnSound;                                      		// 0x0430 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TurnOffSound;                                     		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             LoopingActiveSoundComponent;                      		// 0x0438 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     ToggleActivationString;                           		// 0x043C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ToggleDeactivationString;                         		// 0x0448 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      ToggleActivationColor;                            		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToggleDeactivationColor;                          		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatManaCostExponentScale;                    		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostIncreaseTimeInterval;                     		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostIncreaseLinearFactor;                     		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostIncreaseExponentialFactor;                		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LoopingSoundFadeOutTime;                          		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LoopingSoundFadeInTime;                           		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bConsumeManaOverTime : 1;                         		// 0x0474 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRequiresInitialManaCost : 1;                     		// 0x0474 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bToggleEnabled : 1;                               		// 0x0474 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37462 ];

		return pClassPointer;
	};

	float GetTimeSinceActivation ( );
	bool AllowUsageDuringCastingStates ( );
	struct FString GetToggleDeactivationString ( );
	struct FString GetToggleActivationString ( );
	void CancelAbility ( );
	void OnActivate ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsActive ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
};

UClass* ADunDefPlayerAbility_CharacterToggle::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_Apprentice_Overcharge
// 0x0030 (0x04A8 - 0x0478)
class ADunDefPlayerAbility_Apprentice_Overcharge : public ADunDefPlayerAbility_CharacterToggle
{
public:
	class UParticleSystemComponent*                    AbilityEffectComponent;                           		// 0x0478 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ActivationAnimation;                              		// 0x047C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastRateMultiplier;                               		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverchargeHeroStatExponent;                       		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareAttackDamageExponent;                    		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatAttackDamageExponentNightmare;            		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatAttackDamageExponent;                     		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                OverlayEffectColor;                               		// 0x0498 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37461 ];

		return pClassPointer;
	};

	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
	float GetPlayerAttackDamageMultiplier ( );
	float GetCastingMultiplier ( );
};

UClass* ADunDefPlayerAbility_Apprentice_Overcharge::pClassPointer = NULL;

// Class UDKGame.StatObject
// 0x0128 (0x016C - 0x0044)
class UStatObject : public UBaseStatObject
{
public:
	TArray< struct FsActorStatTemplateModifier >       StatTemplateModifiers;                            		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FsActorStatModifier >               StatModifiers;                                    		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FsBuffInfo                                  StatObjectInfo;                                   		// 0x005C (0x0064) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDunDefBuff* >                       BuffsToAddToHero;                                 		// 0x00C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDunDefBuff* >                       BuffsToAddToTowers;                               		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TierOverride;                                     		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGetTowerStats : 1;                               		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsActive : 1;                                    		// 0x00DC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FString                                     TempValueLabels[ 0x3 ];                           		// 0x00E0 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDunDefHero* >                       HeroTemplates;                                    		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ADunDefPlayerAbility* >              AbilityTemplates;                                 		// 0x0110 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ADunDefTower* >                      TowerTemplates;                                   		// 0x011C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            EquipmentTypeArray;                               		// 0x0128 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDunDefBuff* >                       CurrentBuffs;                                     		// 0x0134 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UHeroEquipment*                              CachedEquipment;                                  		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefHero*                                 CachedHero;                                       		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefPlayer*                               CachedPlayer;                                     		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedTier;                                       		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      CachedDropActor;                                  		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedDescription;                                		// 0x0154 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UObject*                                     StatOwner;                                        		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIActorModifierInterface*                    MyStatModifier;                                   		// 0x0164 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0168 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37545 ];

		return pClassPointer;
	};

	struct FString GetToolTipValueByTag ( struct FString StatTag, int SlotIdx );
	void UpdateBuffValues ( );
	bool CanAddBuffs ( class ADunDefTower* TowerTemplate );
	bool DoesModifyStat ( unsigned char Stat );
	float GetBuffStatValue ( class UDunDefHero* aHero, unsigned char Stat, unsigned long bDoAdditivePass );
	float GetStatValue ( class UDunDefHero* aHero, unsigned char Stat, unsigned long bGetStatModifier );
	float GetStatValueByTag ( float InitialValue, struct FString StatTag, class UIActorModifierInterface* TagActor, unsigned char statType, unsigned long bBaseValueOnly );
	float GetStatModifierByTag ( float InitialValue, struct FString StatTag, unsigned char statType, unsigned long bBaseValueOnly );
	float GetStatModifierValue ( class UObject* statActor, struct FsActorStatModifier BuffModifier, float InitialValue, unsigned long bBaseValueOnly );
	float GetModifierValue ( float BaseValue, float levelScalar );
	void Initalize ( class UHeroEquipment* Equipment, class UDunDefHero* hero, class ADunDefPlayer* Player, class UObject* aStatOwner, int Tier, unsigned long bisDropped, class AActor* DroppedActor );
	void AddedToHero ( );
	void DeactivateBuffs ( );
	void ShutDown ( );
	bool StaticIsValidForHero ( class UStatObject_Equipment* StatObjectTemplate, class UDunDefHero* HeroTemplate );
	struct FString GetName ( );
	struct FString GetDescription ( );
	struct FString StaticGetDescription ( class UStatObject* aStatObject );
	class UIActorModifierInterface* GetStatModifierObject ( );
	void InitalizeActorStats ( class UIActorModifierInterface* ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly );
};

UClass* UStatObject::pClassPointer = NULL;

// Class UDKGame.DunDefHeroModifierInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefHeroModifierInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37567 ];

		return pClassPointer;
	};

	bool AllowHeroGUID ( int GUID1, int GUID2, int GUID3, int GUID4 );
	void ScaleForHeroModifiers ( unsigned long IsFirstTime );
};

UClass* UDunDefHeroModifierInterface::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_TowerPlacement
// 0x0114 (0x053C - 0x0428)
class ADunDefPlayerAbility_TowerPlacement : public ADunDefPlayerAbility
{
public:
	unsigned long                                      IsValidPlacement : 1;                             		// 0x0428 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWantTowerTooltip : 1;                            		// 0x0428 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bReturnRepairTargetWithLowestHealth : 1;          		// 0x0428 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAttachAdditionalParticleComponent : 1;           		// 0x0428 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bReturnUpgradeTargetWithLowestLevel : 1;          		// 0x0428 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bActivateRemoteLightAndParticleSystem : 1;        		// 0x0428 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bForceBeyondMaxUpgradeLevel : 1;                  		// 0x0428 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseSelectionOffsetting : 1;                      		// 0x0428 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bOverrideCursorAlpha : 1;                         		// 0x0428 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bClearStateNameInTick : 1;                        		// 0x0428 (0x0004) [0x0000000000000000] [0x00000200] 
	struct FLinearColor                                ValidPlacementColor;                              		// 0x042C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                InvalidPlacementColor;                            		// 0x043C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ReadyPlacementColor;                              		// 0x044C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlacementRange;                                   		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalSize;                                        		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumDistanceForNonPhysicalSelectionPassThru;   		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPointLightComponent*                        MyPointLightComponent;                            		// 0x0468 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    MyParticleSystemComponent;                        		// 0x046C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     PointLightOffset;                                 		// 0x0470 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ParticleSystemOffset;                             		// 0x047C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ValidPlacementLightColor;                         		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      InvalidPlacementLightColor;                       		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ReadyPlacementLightColor;                         		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DecalOffset;                                      		// 0x0494 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             MyAudioComponent;                                 		// 0x04A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDecalComponent*                             Decal;                                            		// 0x04A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   SoundTowerBuildConfirm;                           		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundDenied;                                      		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PlacementTraceStartOffset;                        		// 0x04B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PlacementTraceEndOffset;                          		// 0x04BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SecondPlacementTraceStartOffset;                  		// 0x04C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    AuraIconEffect;                                   		// 0x04D4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              TowerMiniMapIconScale;                            		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CursorIconScale;                                  		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CursorPlacementOffsetScale;                       		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumSelectionTraces;                               		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           CursorPlacementOffsets;                           		// 0x04E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefEmitterSpawnable*                     MySummoningEmitter;                               		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CursorPlacementPosition;                          		// 0x04F8 (0x000C) [0x0000000000000000]              
	float                                              CurrentPlacementOpacity;                          		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      LastLightColor;                                   		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                LastMaterialColor;                                		// 0x050C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   CurrentDecalMaterial;                             		// 0x051C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OriginalParticleSystemScale;                      		// 0x0520 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     currentProjectionDirection;                       		// 0x0524 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSelectionIndexOffset;                      		// 0x0530 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       StateName;                                        		// 0x0534 (0x0008) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37652 ];

		return pClassPointer;
	};

	void StopSummonTowerFXCompleted ( );
	void StopSummonTowerFX ( );
	void UpdateSummonTowerFX ( float Percent );
	void BeginSummonTowerFX ( class ADunDefEmitterSpawnable* spellEffect, struct FVector thePlacementLocation, struct FRotator thePlacementRotation, float scaleMult, unsigned long bUsesDecal );
	void CyclePlacementTowerRadius ( );
	void IncreasePlacementTowerRadius ( );
	void DecreasePlacementTowerRadius ( );
	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
	void StopTowerPlacingAnimation ( );
	void StartTowerPlacingAnimation ( );
	struct FVector GetCenterLocation ( );
	void AuthorityInitReplicatedPlacementState ( );
	void SortTracedActors ( TArray< struct FActorHitInfo >* TracedActors );
	void GetTracedActors ( struct FVector startTracePos, struct FVector endTracePos, TArray< struct FActorHitInfo >* TracedHitActors, struct FVector* TraceHitLoc );
	void PostPlacementUpdate ( float DeltaTime );
	void SetInitialPlacementCursor ( );
	bool PlacementTraceCheckActors ( class AActor* A );
	bool PlacementTraceForceTowerSelection ( );
	void eventFinishedFadingOut ( );
	void eventAbilityTick ( float DeltaTime );
	void eventPostBeginPlay ( );
	void PreCursorDrawHUD ( class ADunDefHUD* H, struct FVector CursorPos );
	void PostCursorDrawHUD ( class ADunDefHUD* H, struct FVector CursorPos );
	bool DrawCastingHUD ( class ADunDefHUD* H );
	void ServerSetPlacementTowerRangeScaler ( float theScale );
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect ( );
	class UTexture2D* GetCursorPlacementTexture ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefPlayerAbility_TowerPlacement::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_BuildTower
// 0x01D8 (0x0714 - 0x053C)
class ADunDefPlayerAbility_BuildTower : public ADunDefPlayerAbility_TowerPlacement
{
public:
	class UMaterialInstanceConstant*                   DecalMaterialBuild;                               		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CursorBuildTexture;                               		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CursorRotateTexture;                              		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumNormalZForPlacement;                       		// 0x0548 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ChoosingBuildWeaponEmitter;                       		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SummoningStateNamePC;                             		// 0x0550 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     SummonTowerEmitterTemplate;                       		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      TowerMeshComponent;                               		// 0x055C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     TowerMeshScaleVec;                                		// 0x0560 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TowerMeshPlacementOffset;                         		// 0x056C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TowerActorPlacementOffset;                        		// 0x0578 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TraceExtent;                                      		// 0x0584 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefTower*                                TowerArchetype;                                   		// 0x0590 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SummonTime;                                       		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationCursorScale;                              		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SummonTimeCompetitive;                            		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IgnoreRotation : 1;                               		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OnlyCheckCollisionAgainstWorldGeometry : 1;       		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      UseAngleIndicator : 1;                            		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      ScaleAngleIndicatorWithTowerRange : 1;            		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAutoScaleTowerPlacementMesh : 1;                 		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      DisablePlacementWithinSameTraps : 1;              		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      DisablePlacementWithinSameAuras : 1;              		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseSpellCompleteOverrideAnim : 1;                		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseCastingOverrideAnim : 1;                      		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      ReplicatedIsValidPlacement : 1;                   		// 0x05A0 (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	unsigned long                                      bClientGotoRotationState : 1;                     		// 0x05A0 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      ClientForceNoInterpolation : 1;                   		// 0x05A0 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	struct FVector                                     ExtentCheckBaseOffset;                            		// 0x05A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PlacementRotationCursorOffset;                    		// 0x05B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotationGamepadCursorOffset;                      		// 0x05BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlacementLightIntensityMultiplier;                		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           TraceDirections;                                  		// 0x05CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         PlacementMaterials;                               		// 0x05D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AngleIndicatorDecalSize;                          		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AngleIndicatorDecalOffset;                        		// 0x05E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   AngelIndicatorDecalMaterial;                      		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   RangeIndicatorDecalMaterial;                      		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   AngleIndicatorDecalMaterialInstance;              		// 0x05FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   RangeIndicatorDecalMaterialInstance;              		// 0x0600 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDecalComponent*                             AngleIndicatorDecal;                              		// 0x0604 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDecalComponent*                             RangeIndicatorDecal;                              		// 0x0608 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FLinearColor                                SummoningNotificationColor;                       		// 0x060C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationFailureString_NeedTowerUnits;           		// 0x061C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationTowerUnitsString;                       		// 0x0628 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationSummonString;                           		// 0x0634 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TowerUnitDescriptionString;                       		// 0x0640 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              AngleIndicatorDecalTowerRangeScale;               		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultTowerPlacementCollisionRadius;             		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoTowerPlacementMeshScaleBase;                  		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OtherAbilityPreventionRadiusBuffer;               		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OtherAbilityPreventionRadiusMultiplier;           		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalSummonRateMultiplier;                       		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InfiniteBuildPhaseSpeedMultiplier;                		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumRotationInputDistance;                     		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlacementTraceScale;                              		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ChooseWhereToSummonString;                        		// 0x0670 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SummoningString;                                  		// 0x067C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SetRotationString;                                		// 0x0688 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           PlacementDeniedStrings;                           		// 0x0694 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       SpellCompleteAnimOverride;                        		// 0x06A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CastingAnimOverride;                              		// 0x06A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CancelAbilityAnim;                                		// 0x06B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInstanceConstant* >         TowerPlacementMatInstances;                       		// 0x06B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRotator                                    PlacementRotation;                                		// 0x06C4 (0x000C) [0x0000000000000000]              
	struct FVector                                     GamepadLookDirection;                             		// 0x06D0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LookAtLocation;                                   		// 0x06DC (0x000C) [0x0000000000000000]              
	float                                              CurrentSummonTime;                                		// 0x06E8 (0x0004) [0x0000000000000000]              
	float                                              CurrentAngleDecalOpacity;                         		// 0x06EC (0x0004) [0x0000000000000000]              
	float                                              TowerMeshScale;                                   		// 0x06F0 (0x0004) [0x0000000000000000]              
	float                                              LastTowerMeshScale;                               		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TowerRangeScaler;                                 		// 0x06F8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     ReplicatedPlacementLocation;                      		// 0x06FC (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    ReplicatedPlacementRotation;                      		// 0x0708 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37651 ];

		return pClassPointer;
	};

	void ServerSetPlacementTowerRangeScaler ( float theScale );
	struct FString GetTowerUnitDescription ( );
	void CancelAbility ( );
	void StartSummoningState ( );
	void ClientStartSummoningState ( );
	void ServerRequestBuildTower ( struct FVector towerPlacementLocation, struct FRotator towerPlacementRotation );
	struct FString GetActivationFailureString ( unsigned char Status, unsigned long ShortString );
	void ServerGotoRotationState ( );
	void PostPlacementUpdate ( float DeltaTime );
	void UpdateDecalPlacement ( float DeltaTime );
	bool AllowTowerPlacementPosition ( struct FVector placementPos, unsigned long bOnlyCheckVolumes, int* PlacementDeniedReason );
	bool IsTowerPhysical ( );
	bool IsInPlacingTowerState ( );
	float GetOtherAbilityPlacementPreventionRadius ( class ADunDefTower* forOtherTowerArchetype );
	void eventFinishedFadingOut ( );
	void eventAbilityTick ( float DeltaTime );
	void eventPostBeginPlay ( );
	void UpdateClientInterpolations ( float DeltaTime );
	void AuthorityInitReplicatedPlacementState ( );
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect ( );
	class UTexture2D* GetCursorPlacementTexture ( );
	void ServerReceivePlacementState ( unsigned long bIsValidPlacement, struct FVector tPlacementLocation, struct FRotator tPlacementRotation );
	struct FString GetDescriptiveName ( );
	int GetDisplayCost ( );
	bool CanPlaceTowerUnitCost ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
	bool PlacementTraceCheckActors ( class AActor* A );
	bool PlacementTraceForceTowerSelection ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefPlayerAbility_BuildTower::pClassPointer = NULL;

// Class UDKGame.ActorFactoryFlightPathNode
// 0x0000 (0x005C - 0x005C)
class UActorFactoryFlightPathNode : public UActorFactoryPathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37673 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryFlightPathNode::pClassPointer = NULL;

// Class UDKGame.FlightPathNode
// 0x0008 (0x0318 - 0x0310)
class AFlightPathNode : public AVolumePathNode
{
public:
	int                                                CustomData;                                       		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      LinkedActor;                                      		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37675 ];

		return pClassPointer;
	};

};

UClass* AFlightPathNode::pClassPointer = NULL;

// Class UDKGame.ActorFilter
// 0x0000 (0x003C - 0x003C)
class UActorFilter : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37676 ];

		return pClassPointer;
	};

	bool IsActorAllowed ( class UObject* theObject, unsigned long is_OR_filters, TArray< class UActorFilter* >* filters );
	bool IsAllowed ( class UObject* theObject );
};

UClass* UActorFilter::pClassPointer = NULL;

// Class UDKGame.ActorFilter_Buff
// 0x000C (0x0048 - 0x003C)
class UActorFilter_Buff : public UActorFilter
{
public:
	TArray< class UDunDefBuff* >                       RequiredBuffs;                                    		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37689 ];

		return pClassPointer;
	};

	bool IsAllowed ( class UObject* theObject );
};

UClass* UActorFilter_Buff::pClassPointer = NULL;

// Class UDKGame.ActorFilter_Class
// 0x001C (0x0058 - 0x003C)
class UActorFilter_Class : public UActorFilter
{
public:
	TArray< class UClass* >                            Allow;                                            		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            Disallow;                                         		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bFilterOwnerClass : 1;                            		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFilterActorStatOwnerClass : 1;                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDontCheckChildClass : 1;                         		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37702 ];

		return pClassPointer;
	};

	bool IsAllowed ( class UObject* theObject );
};

UClass* UActorFilter_Class::pClassPointer = NULL;

// Class UDKGame.ActorFilter_Collision
// 0x0001 (0x003D - 0x003C)
class UActorFilter_Collision : public UActorFilter
{
public:
	unsigned char                                      WorldGeometry;                                    		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37715 ];

		return pClassPointer;
	};

	bool IsAllowed ( class UObject* theObject );
};

UClass* UActorFilter_Collision::pClassPointer = NULL;

// Class UDKGame.ActorFilter_DamageTypeComparison
// 0x001C (0x0058 - 0x003C)
class UActorFilter_DamageTypeComparison : public UObject
{
public:
	TArray< class UClass* >                            Allow;                                            		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            Disallow;                                         		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDontCheckChildClass : 1;                         		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37722 ];

		return pClassPointer;
	};

	bool IsActorAllowed ( class UClass* theObject, unsigned long is_OR_filters, TArray< class UActorFilter_DamageTypeComparison* >* filters );
	bool IsAllowed ( class UClass* theObject );
};

UClass* UActorFilter_DamageTypeComparison::pClassPointer = NULL;

// Class UDKGame.ActorFilter_Dead
// 0x0000 (0x003C - 0x003C)
class UActorFilter_Dead : public UActorFilter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37740 ];

		return pClassPointer;
	};

	bool IsAllowed ( class UObject* theObject );
};

UClass* UActorFilter_Dead::pClassPointer = NULL;

// Class UDKGame.ActorFilter_Health
// 0x000C (0x0048 - 0x003C)
class UActorFilter_Health : public UActorFilter
{
public:
	unsigned long                                      bCompareHealthPercentage : 1;                     		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      CompareType;                                      		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              CompareValue;                                     		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37746 ];

		return pClassPointer;
	};

	bool IsAllowed ( class UObject* theObject );
};

UClass* UActorFilter_Health::pClassPointer = NULL;

// Class UDKGame.DunDefTargetableInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefTargetableInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37753 ];

		return pClassPointer;
	};

	void setIsWebbed ( unsigned long isWebbed );
	bool isWebbed ( );
	bool AllowSuction ( );
	void HealPctOfMaxHealth ( float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers );
	bool GetChainIgnore ( );
	void SetChainIgnore ( unsigned long ignore );
	bool IsBeingChainedBy ( class ADunDefTower_ChainLightning* Tower );
	void RemoveFromChainingTowers ( class ADunDefTower_ChainLightning* Tower );
	void AddToChainingTowers ( class ADunDefTower_ChainLightning* Tower );
	float GetLightningTowerDamagePercent ( );
	float GetHealthPercent ( );
	int GetHealth ( unsigned long bGetMax );
	bool ForceMoveActor ( class AActor* Mover, struct FVector NewLoc );
	class UPrimitiveComponent* GetOverrideTargetComponent ( );
	void LocalTookDamage ( int DamageAmount, struct FVector atPosition, class UClass* fromDamageType );
	float GetMass ( );
	bool AllowDarknessIgnorance ( );
	bool ForceFriendlyFire ( class AActor* Target );
	struct FVector GetInterpolatedTargetingLocation ( class AActor* RequestedBy );
	struct FVector GetTargetingLocation ( class AActor* RequestedBy );
	void OnDestroy_RemoveFromTargetableList ( );
	void OnPostBeginPlay_AddToTargetableList ( );
	void UnregisterAttacker ( class ADunDefEnemyController* forController );
	void RegisterAttacker ( class ADunDefEnemyController* forController );
	float GetAttackRangeOffset ( );
	bool IgnoreFriendlyFireDamage ( class UDunDefTargetableInterface* instigatorActor, class AController* OptionalController );
	int GetTargetingTeam ( );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
};

UClass* UDunDefTargetableInterface::pClassPointer = NULL;

// Class UDKGame.ActorFilter_Physics
// 0x000F (0x004B - 0x003C)
class UActorFilter_Physics : public UActorFilter
{
public:
	unsigned char                                      Physics[ 0xF ];                                   		// 0x003C (0x000F) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37761 ];

		return pClassPointer;
	};

	bool IsAllowed ( class UObject* theObject );
};

UClass* UActorFilter_Physics::pClassPointer = NULL;

// Class UDKGame.ActorFilter_Template
// 0x0018 (0x0054 - 0x003C)
class UActorFilter_Template : public UActorFilter
{
public:
	TArray< class UObject* >                           AllowTemplates;                                   		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           DisAllowTemplates;                                		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37768 ];

		return pClassPointer;
	};

	bool IsAllowed ( class UObject* theObject );
};

UClass* UActorFilter_Template::pClassPointer = NULL;

// Class UDKGame.AdvancedConsoleCommandsSettings
// 0x0068 (0x00A4 - 0x003C)
class UAdvancedConsoleCommandsSettings : public UObject
{
public:
	struct FItemTestInfo                               testInfo;                                         		// 0x003C (0x0044) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           HeroEquipmentReferences;                          		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     OutputText;                                       		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     WaveStatTestString;                               		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37777 ];

		return pClassPointer;
	};

};

UClass* UAdvancedConsoleCommandsSettings::pClassPointer = NULL;

// Class UDKGame.AnalyticsXML
// 0x0031 (0x028D - 0x025C)
class AAnalyticsXML : public ATcpLink
{
public:
	struct FString                                     Events[ 0x4 ];                                    		// 0x025C (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      GameEvent;                                        		// 0x028C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37811 ];

		return pClassPointer;
	};

	void eventReceivedText ( struct FString Text );
	struct FString MessageToSend ( );
	void eventOpened ( );
	void eventResolved ( struct FIpAddr Addr );
	void SendFormattedData ( unsigned char Type );
};

UClass* AAnalyticsXML::pClassPointer = NULL;

// Class UDKGame.DunDefHeroManager
// 0x0604 (0x067C - 0x0078)
class UDunDefHeroManager : public UDunDefHeroManagerNative
{
public:
	unsigned char                                      CurrentMultiplayerMode;                           		// 0x0078 (0x0001) [0x0000000000000000]              
	unsigned char                                      ShopEquipmentTypes[ 0x3 ];                        		// 0x0079 (0x0003) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSentSteamStatsAfterRanked : 1;                   		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDataListReturnDLCMissionsOnly : 1;               		// 0x007C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDataListReturnModMissionsOnly : 1;               		// 0x007C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDataListReturnLostMissionsOnly : 1;              		// 0x007C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      ShowFloatingDamageNumbers : 1;                    		// 0x007C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bConsoleCommandHack : 1;                          		// 0x007C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsAFKShopSearch : 1;                             		// 0x007C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      ShowTutorials : 1;                                		// 0x007C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bNightmareUnlocked : 1;                           		// 0x007C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      AutoCreateSomeHeroes : 1;                         		// 0x007C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRankedRemoteConnectionActive : 1;                		// 0x007C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      MainMenuGoDirectlyToMultiplayerBrowser : 1;       		// 0x007C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bDataListReturnExpansionAsRegularCampaign : 1;    		// 0x007C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bDataListReturnModMissionsAsRegularMissions : 1;  		// 0x007C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      Initialized : 1;                                  		// 0x007C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bShowDamageFlashing : 1;                          		// 0x007C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      corruptData : 1;                                  		// 0x007C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      reallyCorruptData : 1;                            		// 0x007C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      ShowTitleScreen : 1;                              		// 0x007C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bDisplayedSaveNotification : 1;                   		// 0x007C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      DoSaveLoad : 1;                                   		// 0x007C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      UnlockAllLevels : 1;                              		// 0x007C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      UnlockUnchained : 1;                              		// 0x007C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      UnlockInclusive : 1;                              		// 0x007C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bCheatsEnabled : 1;                               		// 0x007C (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bDevMode : 1;                                     		// 0x007C (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	TArray< struct FMissionCompletionEquipmentDropEntry > MissionCompletionEquipmentDropEntries;            		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    LocalPlayerShopEntries;                           		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FItemFolder >                       ItemFolders;                                      		// 0x0098 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FItemFolder >                       LocalShopItemFolders;                             		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UDunDefGameSettings*                         CurrentGameSettings;                              		// 0x00B0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FString                                     DifficultyNames[ 0x5 ];                           		// 0x00B4 (0x003C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      DifficultyColors[ 0x5 ];                          		// 0x00F0 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FOptionsEntry >                     OptionsSettings;                                  		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              EquipmentQualityMultiplierCheat;                  		// 0x0110 (0x0004) [0x0000000000000000]              
	TArray< struct FCampaignLevelEntry >               CampaignLevelEntries;                             		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UCampaignLevelEntryObject* >         CampaignLevelEntryObjects;                        		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDunDefHero* >                       HeroTemplates;                                    		// 0x012C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DefaultStatNames[ 0xB ];                          		// 0x0138 (0x0084) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class ADunDefDroppedEquipment*                     DroppedEquipmentTemplates[ 0x6 ];                 		// 0x01BC (0x0018) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FEquipmentDropEntry >               EquipmentDropEntries;                             		// 0x01D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentDropEntry >               OverrideEquipmentDropEntries;                     		// 0x01E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentDropEntry >               ArmourDropEntries;                                		// 0x01EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    AdditionalEquipmentReferences;                    		// 0x01F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           ExtraReferences;                                  		// 0x0204 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentDropEntry >               AdditionalEquipmentEntries;                       		// 0x0210 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           RandomDeathStrings;                               		// 0x021C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UParticleSystem*                             LockedCoreVFX;                                    		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCrystalCoreData >                  CrystalCores;                                     		// 0x022C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FStatsSaveEntry >                   StatsEntries;                                     		// 0x0238 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   RankedConnectingSound;                            		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           ProTips;                                          		// 0x0248 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              ShopItemQualityMutliplier;                        		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopItemQualityAddition;                          		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopRarityMultiplier;                             		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShopRarityAddition;                               		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UObject* >                           AdditionalReferences;                             		// 0x0264 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        MultiplayerModeImages;                            		// 0x0270 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UHeroEquipment*                              TokenEquipmentArchetype;                          		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      GameLogicIntArray;                                		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           AvailableProTips;                                 		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UDunDefAchievementManager*                   TheAchievementManager;                            		// 0x0298 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UDunDefPostProcessManager*                   ThePostProcessManager;                            		// 0x029C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FString                                     YesString;                                        		// 0x02A0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoString;                                         		// 0x02AC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LoadingRankedHeroesTitle;                         		// 0x02B8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LoadingRankedHeroesDescription;                   		// 0x02C4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedLoadingRankedHeroesTitle;                   		// 0x02D0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedLoadingRankedHeroesDescription;             		// 0x02DC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LoginAuthenticationError;                         		// 0x02E8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomMissionString;                              		// 0x02F4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LoginBannedError;                                 		// 0x0300 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      ShownTutorialSets;                                		// 0x030C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MapTagOverride;                                   		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NightmareDLCURL;                                  		// 0x0324 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDataListEntryInterface* >           LocalLoadedHeroes;                                		// 0x0330 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDunDefHero* >                       ActiveHeroes;                                     		// 0x033C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FShopEquipmentSet                           ShopEquipments[ 0x3 ];                            		// 0x0348 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    ItemBoxEquipments;                                		// 0x036C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FItemBoxEntry >                     ItemBoxEntries;                                   		// 0x0378 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    LobbyEquipments;                                  		// 0x0384 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDLCEquipmentEntry >                DLCEquipmentEntries;                              		// 0x0390 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USaveHelper*                                 HeroSaver;                                        		// 0x039C (0x0004) [0x0000000000000000]              
	class UProfanityFilter*                            ProfanityChecker;                                 		// 0x03A0 (0x0004) [0x0000000000000000]              
	TArray< struct FPlayerUserID >                     RegisteredUserIDs;                                		// 0x03A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentUserID;                                    		// 0x03B0 (0x0004) [0x0000000000000000]              
	int                                                PrimaryController;                                		// 0x03B4 (0x0004) [0x0000000000000000]              
	int                                                UniqueRemoteID;                                   		// 0x03B8 (0x0004) [0x0000000000000000]              
	struct FCrystalCoreOptions                         coreOptions;                                      		// 0x03BC (0x0034) [0x0000000000000000]              
	struct UDunDefHeroManagerNative_FOptionsFixedStruct defaultSettingsFixed;                             		// 0x03F0 (0x00A4) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     defaultResolution;                                		// 0x0494 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefHeroManagerNative_FOptionsInfo       DefaultSettings;                                  		// 0x04A0 (0x0104) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct UDunDefHeroManagerNative_FLevelProgressInfo > defaultBeaten;                                    		// 0x05A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct UDunDefHeroManagerNative_FLevelProgressInfo > defaultProgress;                                  		// 0x05B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct UDunDefHeroManagerNative_FLevelProgressInfo > remoteDefaultProgress;                            		// 0x05BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      loadedIDs;                                        		// 0x05C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LobbyLevelName;                                   		// 0x05D4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	int                                                HostStatsIndex;                                   		// 0x05E0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      KickedSessions;                                   		// 0x05E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                KickedSessionsMax;                                		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CorruptSaveTitle;                                 		// 0x05F4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CorruptSaveMsg;                                   		// 0x0600 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	TArray< class UDunDefHero* >                       heroesToVerify;                                   		// 0x060C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    equipmentToVerify;                                		// 0x0618 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        difficultyIcons;                                  		// 0x0624 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                currentSaveVersion;                               		// 0x0630 (0x0004) [0x0000000000000000]              
	struct FString                                     RankedModeWelcomeMessage;                         		// 0x0634 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              baseEquipMult;                                    		// 0x0640 (0x0004) [0x0000000000000000]              
	float                                              TrueBossRushSplits[ 0xA ];                        		// 0x0644 (0x0028) [0x0000000000000000]              
	float                                              TrueBossRushStartTime;                            		// 0x066C (0x0004) [0x0000000000000000]              
	int                                                TrueBossRushCurrentSplit;                         		// 0x0670 (0x0004) [0x0000000000000000]              
	class UHeroManagerResources*                       HeroResources;                                    		// 0x0674 (0x0004) [0x0000000000000000]              
	class UHeroManagerResources*                       HeroManagerResourcesTemplate;                     		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37831 ];

		return pClassPointer;
	};

	void GiveManaToken ( class ULocalPlayer* PlayerOwner, struct FHighDigitInt tokenAmount, unsigned long bForce );
	struct FString GetCurrentOnlineSessionName ( );
	TArray< struct FString > GetRestrictedPremiumMapTags ( );
	TArray< struct FString > GetNotOwnedRestrictedPremiumMapTags ( );
	void RearrangeHeroes ( class UDataListEntryInterface* hero1, class UDataListEntryInterface* hero2 );
	bool HasAnyPremiumMissionLocked ( unsigned long checkSpecialMissions, unsigned long checkExpansionMissions );
	float GetCurrentMissionEquipmentRandomizerMultiplier ( unsigned long bIsForShop );
	int GetNextHeroIndexForSelection ( class ULocalPlayer* ForPlayer, int fromClassIndex, unsigned long nextClass );
	int GetMetaFlagLenght ( struct UDunDefHeroManagerNative_FOptionsFixedStruct* tOptions );
	int GetMetaFlags ( int metaFlagIndex, int valueToSet, struct UDunDefHeroManagerNative_FOptionsFixedStruct* tOptions );
	int GetOrSetMetaFlags ( int metaFlagIndex, int valueToSet, struct UDunDefHeroManagerNative_FOptionsFixedStruct* tOptions );
	class UTexture2D* GetMultiplayerModeImage ( );
	void eventRankedMode_LoginAuthenticationError ( );
	void eventRankedMode_KeepAliveTimedOut ( );
	void eventRankedMode_LoadingFailed ( );
	void eventRankedMode_LoginBanned ( );
	void eventRankedMode_SeriesError ( struct FString Title, struct FString Message );
	void eventRankedMode_LoadingComplete ( struct FString WelcomeMessage );
	void SetMultiplayerMode ( unsigned char NewMode, unsigned long bForce );
	void ResetForNewMap ( );
	bool IsCheatsEnabled ( );
	int GetNumShopEquipments ( );
	void VerifyHeroNames ( );
	class UHeroEquipment* GetEquipmentFromItemBox ( int forUserID, int EquipmentID1, int EquipmentID2 );
	void SetRandomShopEquipments ( float qualityLevel, float extraRarity );
	void RemoveShopEquipment ( class UHeroEquipment* anEquipment );
	bool CheckOnlineNameVerification ( unsigned long bDontRequireOnline );
	void InstallAllDLCEquipments ( );
	void InstallDLCEquipments ( int UserID );
	void AddDLCEquipmentEntry ( struct FDLCEquipmentEntry equipEntry );
	void AddCampaignLevelEntry ( struct FCampaignLevelEntry withEntry );
	void RemoveDLCLevelEntries ( );
	int GetIndexOfEntry ( struct FCampaignLevelEntry Entry );
	void SetOptionCampaignTag ( int UserID, struct FString campaignTag, unsigned long forceSave );
	void SetOptionDifficulty ( int UserID, unsigned char difficulty );
	bool ShowTutorial ( int TutorialSet, unsigned long SetTutorialCompleted );
	bool IsBanned ( int SessionId );
	void AddKickedSession ( int SessionId );
	int GetMaxBankedMana ( );
	bool BankAllMana ( int GameplayInstanceID );
	class UDunDefHero* GetHeroTemplateWithID ( int Id );
	struct FString GetRandomProTip ( );
	struct FString GetStatsStringForLevel ( struct FCampaignLevelEntry levelEntry, int difficulty, int Mode );
	int GetStatsIndexForLevel ( struct FCampaignLevelEntry levelEntry, int difficulty, int Mode );
	int GetModeTypeIndex ( );
	int GetStatsIndex ( );
	struct FString GetCurrentStatsString ( );
	int GetStatsIndexFromDataStore ( struct FString campaignTag, int difficulty, int Mode, unsigned long bIsWrite );
	struct FString GetStatsString ( struct FString campaignTag, int difficulty, int Mode, unsigned long bIsWrite );
	int GetNumberOfMissionsUnlocked ( unsigned long IsSpecialMission );
	bool GetNextCampaignLevelEntry ( int currentLevelIndex, struct FCampaignLevelEntry* nextLevelEntry, class UCampaignLevelEntryObject** nextLevelObject );
	TArray< class UTexture2D* > GetHeroIconsForAccessoryTypes ( TArray< unsigned char >* AccessoryTypes );
	TArray< class UTexture2D* > GetHeroIconsForWeaponType ( unsigned char weaponType );
	class UDunDefHero* GetHeroTemplateForWeaponType ( unsigned char weaponType );
	int CountItemsInFolder ( class ADunDefPlayerController* PC, int FolderID, unsigned long playerShop );
	bool ChangeLockedStatusAllEquipment ( class ADunDefPlayerController* PC, int FolderID, unsigned long val );
	bool SellAllEquipment ( class ADunDefPlayerController* PC, int FolderID );
	bool SellEquipmentToBank ( class ADunDefPlayerController* PC, class UHeroEquipment* Equipment, unsigned long bDontRefreshEquipmentUI );
	void DropEquipmentFromItemBox ( class AActor* forgeActor, class UHeroEquipment* Equipment );
	void DeleteEquipmentFromItemBox ( int UserID, int EquipmentID1, int EquipmentID2, unsigned long bDontRefreshItemBoxLists );
	void TransferEquipmentFromPlayerShop ( class UHeroEquipment* Equipment );
	void TransferEquipmentToPlayerShop ( class UHeroEquipment* Equipment );
	void TransferEquipmentFromItemBox ( class UDunDefHero* hero, class UHeroEquipment* Equipment, class UHeroEquipment** itemBoxedEquipment );
	int GetMaxItemCount ( int UserID );
	bool IsItemBoxFull ( int UserID, unsigned long bForceEquipmentIntoItemBox, int* itemCount );
	bool IsMacAppStore ( );
	bool IsMacOSGameSpy ( );
	bool CanStoreInItemBox ( class UHeroEquipment* Equipment, int UserID );
	class UHeroEquipment* AddEquipmentToItemBox ( class UDunDefHero* hero, unsigned long bAutoLock, unsigned long bDontRefreshItemBoxLists, struct FEquipmentNetInfo* netInfo );
	void AddEquipmentObjectToItemBox ( class UDunDefHero* hero, class UHeroEquipment* theEquipment, unsigned long bAutoLock );
	class UHeroEquipment* TransferEquipmentToItemBox ( class UDunDefHero* hero, class UHeroEquipment* Equipment, int insertAtIndex, unsigned long bAutoLock );
	void RefreshItemBoxEquipmentLists ( int UserID );
	void ResetTutorials ( );
	void SetCampaignEntryTag ( struct FString entryTag );
	class UCampaignLevelEntryObject* GetCampaignLevelObjectForOnlineSubSystemInfo ( struct FString ValueCheck );
	class UCampaignLevelEntryObject* GetCampaignLevelObjectForTag ( struct FString entryTag );
	int GetCampaignLevelIndex ( struct FString MapName, struct FCampaignLevelEntry* levelEntry, class UCampaignLevelEntryObject** levelEntryObject );
	struct FString GetCurrentMapFileName ( struct FString MapName, unsigned long bWantFileExtension );
	int GetCampaignLevelId ( struct FCampaignLevelEntry levelEntry );
	struct FCampaignLevelEntry GetLevelEntryWithTag ( struct FString Tag );
	struct FCampaignLevelEntry GetLevelEntryWithId ( int Id );
	struct FString GetLevelNameForId ( int Id );
	struct FString GetLevelNameForContextID ( int ContextId );
	struct FString GetLevelNameForIndex ( int campaignIndex );
	class UCampaignLevelEntryObject* GetCurrentCampaignLevelObject ( );
	struct FCampaignLevelEntry GetCurrentCampaignLevelEntry ( );
	int GetCurrentCampaignLevelIndex ( );
	class UHeroEquipment* GetWeightedRandomEquipmentFromDropEntries ( unsigned long ignoreWeighting, float extraWeighting, TArray< struct FEquipmentDropEntry >* DropEntries );
	class UHeroEquipment* GetCustomEquipmentDrop ( float CustomEquipmentDropValueMin, float CustomEquipmentDropValueMax, float extraEquipmentRarityWeighting, float qualityValue, unsigned char TypeFilter, unsigned long bIsShop, TArray< struct FEquipmentDropEntry >* DropEntries, TArray< struct FEquipmentDropEntry >* AdditionalDropEntries );
	bool CanAnyPlayerUseWeaponType ( unsigned char weaponType, unsigned long bIsShop );
	class UHeroEquipment* GetGlobalEquipmentDrop ( float GlobalEquipmentDropValueMin, float GlobalEquipmentDropValueMax, float extraRarityWeighting, float qualityValue, unsigned char TypeFilter, unsigned long bUseCustomAdditionalEquipmentList, unsigned long bIsShop, unsigned long bForceAddArmour, TArray< struct FEquipmentDropEntry >* CustomAdditionalEquipmentList );
	class ADunDefDroppedEquipment* ServerCreateDroppedEquipment ( class UHeroEquipment* Equipment, class AActor* fromActor, float equipmentQuality, unsigned long useEquipmentObjectAsTemplate, unsigned long spawnFromDir, struct FRotator dirToSpawn, float AngleAllowance, unsigned long useSpawnPos, struct FVector spawnAtPos, int remoteUserID, unsigned long backupOldItemNames, unsigned long bDontCheckForDuplicates );
	class UClass* GetNotPoisonDamageType ( unsigned long elementalEffect );
	class UClass* GetRandomDamageType ( unsigned long elementalEffect );
	class ADunDefEmitterSpawnable* GetElementalImpactEffect ( class UClass* TheDamageType );
	class UParticleSystem* GetElementalWeaponEffect ( class UClass* TheDamageType, float* extraEffectScale );
	void GetDamageTypeEntry ( class UClass* TheDamageType, struct FGameDamageEntry* damageEntry );
	class UClass* GetDamageTypeFromIndex ( int Index );
	int GetDamageTypeIndex ( class UClass* TheDamageType );
	class UUI_HeroInfo* ShowHeroInfo ( class UDunDefHero* hero, class ULocalPlayer* PlayerOwner, unsigned char ForceSceneStackPriority );
	class UHeroEquipment* AddEquipmentFromNetInfo ( class UDunDefHero* forHero, class UObject* ownerObject, unsigned long bCheckRequirements, int atIndex, struct FEquipmentNetInfo* netInfo );
	class UHeroEquipment* AddEquipmentFromSaveInfo ( class UDunDefHero* forHero, struct UDunDefHeroManagerNative_FEquipmentSaveInfo* saveInfo );
	class UDunDefHero* GetActiveHero ( class UPlayer* thePlayer, unsigned long CreateNewHeroIfNone );
	class UDunDefHero* GetFirstLoadedAvailableHero ( int UserID );
	int GetActiveHeroIndex ( class UDunDefHero* forHero );
	int GetFreeHeroIndex ( );
	void eventNotifyHeroLeft ( class UDunDefHero* hero );
	void eventNotifyPlayerLeft ( class UPlayer* thePlayer );
	void SetActiveHero ( class UDunDefHero* hero, class UPlayer* thePlayer, unsigned long bServerDontInitializePC );
	void RemoveActiveHero ( class UDunDefHero* hero );
	struct FString GetRandomHeroName ( class UDunDefHero* forHero );
	class UDunDefHero* CreateNewHero ( class UPlayer* thePlayer, class UDunDefHero* HeroTemplate, struct FString HeroName );
	void DeleteLoadedHero ( class UDunDefHero* hero, class ULocalPlayer* byPlayer );
	class UDunDefHero* CreateHeroFromNetInfo ( class UPlayer* thePlayer, class UObject* AltOwnerObject, unsigned long bServerDontInitializePC, struct FHeroNetInfo* netInfo );
	class UDunDefHero* CreateHeroFromSaveInfo ( int UserID, struct FHeroSaveInfo* theHeroSaveInfo );
	int GetPrimaryUserID ( );
	void CheckSaveInLobby ( );
	bool StoreDroppedLobbyEquipments ( );
	TArray< class UHeroEquipment* > GetLobbyEquipments ( int UserID );
	void CreateLobbyLevelDroppedEquipment ( class ADunDefGameReplicationInfo* gInfo );
	void SaveHeroes ( int theUserID, unsigned long bForceLocal );
	void SaveHeroesFancily ( int theUserID, unsigned long bIsRemote );
	void SaveForPlayer ( class ULocalPlayer* LP );
	void SaveForEveryone ( );
	bool HasUniqueProfile ( int PlayerIndex );
	class UDunDefPlayerStats* GetPrimaryStats ( );
	struct UDunDefHeroManagerNative_FOptionsInfo GetPrimaryOptions ( );
	bool IsPrimaryPlayerOrGuest ( class ULocalPlayer* playerToCheck );
	class ULocalPlayer* GetPrimaryPlayer ( );
	int GetPrimaryPlayerIndex ( );
	struct FCrystalCoreOptions GetPrimaryCore ( );
	void VerifyStrings ( );
	void AddHeroForVerification ( class UDunDefHero* heroToAdd );
	void VerificationComplete ( unsigned long bVerified, int StringID, unsigned char StringType );
	class UDunDefHero* FindHeroVerificationEntry ( int Id );
	class UHeroEquipment* FindEquipmentVerificationEntry ( int Id );
	bool LoadHeroes ( int UserID, unsigned long backup );
	bool LoadHeroesFancily ( int UserID, unsigned long backup, unsigned long bIsRemote, unsigned long bUseSteamCloud );
	void RemoveHeroes ( int UserID, unsigned long remote, unsigned long bForceClearStats );
	void SetPrimaryPlayer ( int ControllerId, unsigned long bConvert );
	void RemoveSponsoredGuests ( int UserID );
	void InitCustomCampaignLevelEntry ( struct FCampaignLevelEntry* newEntry );
	void eventInitialize ( );
	void RefreshModMapsList ( );
	void ModMapToInfo ( struct FString Source, struct FString* FriendlyName, struct FString* OnlineSubsystemInfo );
	void GetDefaultOptions ( int UserID, struct UDunDefHeroManagerNative_FOptionsInfo* myOptions );
	void FixUserIDs ( int PlayerIndex );
	struct FString GetUserNickname ( int UserID, unsigned long remote );
	void SetUserNickname ( struct FString NickName, int UserID, unsigned long remote );
	void InitializeUserIds ( TArray< int > userIDList, int defaultUserID );
	void RefreshOptionsForAll ( );
	void RefreshOptions ( );
	void RefreshCores ( );
	void DoLoading ( int UserID );
	void ShowReallyCorruptError ( );
	void ShowCorruptError ( );
	void LoadSave ( int UserID );
	bool HasPlayerBeaten ( class ADunDefPlayerController* ForPlayer, TArray< struct FString > Tags, int difficultyToCheck, unsigned long exact, unsigned long bIsHardcore, int* anyDifficulty );
	bool HasAnyoneBeaten ( struct FString campaignTag, unsigned char difficulty, unsigned long bOnlyCheckLocal, unsigned long bIsMinimumDifficulty, unsigned long bIsHardcore );
	bool HasAnyoneUnlocked ( struct FString campaignTag, unsigned long OnlyLocal );
	TArray< struct UDunDefHeroManagerNative_FLevelProgressInfo > GetBeatenLevels ( int UserID, unsigned long remote );
	TArray< struct UDunDefHeroManagerNative_FLevelProgressInfo > GetProgress ( int UserID, unsigned long remote );
	void UpdateMissionCompleteEquipmentDropEntries ( );
	void AddBeatenLevel ( struct FString thisLevel, unsigned char difficulty, int UserID, unsigned long remote, unsigned long bForce, unsigned long bDontRefreshEquipmentDropEntries, unsigned long bIsHardcoreMode );
	void AddProgress ( struct FString nextLevel, unsigned char difficulty, int UserID, unsigned long remote, unsigned long bForce );
	void RemoveLocalHeroOrCostumeUnlock ( class UDunDefHero* aHeroTemplate, int costumeIndex );
	void RemoveLocalProgress ( struct FString LevelTag );
	struct FCrystalCoreOptions GetCrystalCoreSettings ( int UserID );
	struct FHighDigitInt GetItemBoxInfo ( int UserID );
	void UpdateItemBox ( int UserID, struct FHighDigitInt* itemBox );
	struct UDunDefHeroManagerNative_FItemBoxInfo ConvertToItemBox ( struct FHighDigitInt In );
	struct FHighDigitInt ConvertToHDInt ( struct UDunDefHeroManagerNative_FItemBoxInfo In );
	struct FHighDigitInt CalculateBankedMana ( struct FHighDigitInt HighInt );
	void AddCrystalCoreSettings ( struct FCrystalCoreOptions customCore, int UserID );
	void SetOptions ( struct UDunDefHeroManagerNative_FOptionsInfo newOptions, unsigned long doSave, class ULocalPlayer* ForPlayer, unsigned long bShallowSet, unsigned long bDoResolutionChange );
	struct UDunDefHeroManagerNative_FOptionsInfo GetOptionsInfo ( int UserID );
	bool HasOptionsInfo ( int UserID );
	void AddOptionsInfo ( struct UDunDefHeroManagerNative_FOptionsInfo customOptions, int UserID );
	struct UDunDefHeroManagerNative_FAchievementInfo GetAchievements ( int UserID, unsigned long remote );
	void AddAchievements ( struct UDunDefHeroManagerNative_FAchievementInfo newAchievements, int UserID, unsigned long remote );
	struct UDunDefHeroManagerNative_FCoreUnlockInfo GetCoreUnlockInfo ( int UserID );
	void AddCoreUnlockInfo ( struct UDunDefHeroManagerNative_FCoreUnlockInfo newCoreUnlockInfo, int UserID );
	void RemoveRemoteStats ( );
	bool HasStats ( int UserID, unsigned long remote );
	int GetPlayerStatsIndex ( int UserID, unsigned long remote );
	class UDunDefPlayerStats* FindStatsByName ( struct FString UserName, int* UserID, int* remote );
	class UDunDefPlayerStats* GetStats ( int UserID, unsigned long remote, unsigned long Initialize );
	void AddStats ( class UDunDefPlayerStats* playerStats, int UserID, unsigned long remote );
	void ZeroOutAchievements ( struct UDunDefHeroManagerNative_FAchievementInfo* newAchievements );
	void RemoveNullEntries ( );
	bool HasNullEntries ( );
	void MarkAsUnloaded ( int UserID );
	void MarkAsLoaded ( int UserID );
	bool HasBeenLoaded ( int UserID );
	class ULocalPlayer* GetPlayerFromUserID ( int UserID );
	bool GetPlayerUserIDOfPlayer ( class ULocalPlayer* LP, struct FPlayerUserID* myID );
	int GetUserIDOfPlayer ( class ULocalPlayer* LP );
	int GetPlayerIndex ( int UserID );
	bool GetPlayerUserID ( int PlayerIndex, struct FPlayerUserID* myID );
	int GetUserID ( int PlayerIndex );
	void RemovePlayersWithoutHeroes ( class ULocalPlayer* PlayerToSkip, unsigned long bRemovePlayerWhoCantPlayOnline, unsigned long bJustRemove );
	void UnregisterUserID ( int ControllerId, unsigned long remote );
	void UpdateRegisteredUsers ( );
	void PromoteUser ( int PlayerIndex, int UserID );
	void RegisterUserID ( int PlayerIndex, int UserID, int GuestID, unsigned long remote, struct FString NickName );
	int FindRemoteIDByName ( struct FString PlayerName );
	int GetUniqueRemoteID ( );
	int GetNumAvailableHeroes ( class ULocalPlayer* LP );
	int GetNumLoadedHeroes ( int myUserID );
	bool IsUnderLoadedHeroesCap ( int myUserID );
	class UDunDefHero* GetDefaultHero ( int Index );
	void GetSortedItemBoxDataEntries ( int myUserID, int FolderID, TArray< class UDataListEntryInterface* >* altSet );
	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
	void ItemChangedFolder ( class UHeroEquipment* InEquipment, int FolderID );
	void UpdateItemsFolder ( class UHeroEquipment* InEquipment, int FolderID );
	struct FString GetFolderName ( int FolderID, unsigned long bItemBox );
	struct FString GetFolderPath ( int FolderID, unsigned long bItemBox );
	void UpdateFolderName ( int FolderID, struct FString NewName, unsigned long bItemBox );
	bool UpdateFolderParent ( int FolderID, int NewParentID, unsigned long bItemBox );
	int GetParentFolder ( int FolderID, unsigned long bItemBox );
	void DeleteFolder ( int FolderID, unsigned long bItemBox );
	int CreateFolder ( struct FString FolderName, int InParentID, unsigned long bItemBox );
	bool ValidFolder ( int FolderID, unsigned long bItemBox );
	void RefreshItems ( unsigned long bItemBox );
	int FolderSpan ( int FolderID, unsigned long bItemBox );
	int FolderSpan_Helper ( int FolderID, TArray< struct FItemFolder >* InItemFolders );
	int FolderDepth ( int FolderID, unsigned long bItemBox );
	int FolderDepth_Helper ( int FolderID, TArray< struct FItemFolder >* InItemFolders );
	int SubFolderCount ( int ParentFolderID, unsigned long bItemBox );
	int SubFolderCount_Helper ( int ParentFolderID, TArray< struct FItemFolder >* InItemFolders );
	int CreateFolder_Helper ( struct FString FolderName, int InParentID, TArray< struct FItemFolder >* InItemFolders );
	struct FString GetFolderName_Helper ( int FolderID, TArray< struct FItemFolder >* InItemFolders );
	struct FString GetFolderPath_Helper ( int FolderID, TArray< struct FItemFolder >* InItemFolders );
	void UpdateFolderName_Helper ( int FolderID, struct FString NewName, TArray< struct FItemFolder >* InItemFolders );
	void UpdateFolderParent_Helper ( int FolderID, int NewParentID, TArray< struct FItemFolder >* InItemFolders );
	bool IsChildFolderOf ( int rootParentID, int checkFolderID, TArray< struct FItemFolder >* FolderList );
	int GetParentFolder_Helper ( int InID, TArray< struct FItemFolder >* InItemFolders );
	void DeleteFolder_Helper ( int FolderID, TArray< struct FItemFolder >* InItemFolders );
	void DeleteFolderWhoseParent_Helper ( int FolderID, TArray< struct FItemFolder >* InItemFolders );
	bool ValidFolder_Helper ( int FolderID, TArray< struct FItemFolder >* InItemFolders );
	void SyncAllEquipmentToDefendersStore ( int UserID );
	struct FString GenerateAllEquipmentURLs ( int UserID );
	struct FString GetStatName ( unsigned char levelUpValue, unsigned char weaponType );
	class UDunDefHeroManager* GetHeroManager ( );
};

UClass* UDunDefHeroManager::pClassPointer = NULL;

// Class UDKGame.AnimNotify_DisableParticleEffects
// 0x000C (0x0048 - 0x003C)
class UAnimNotify_DisableParticleEffects : public UAnimNotify_Scripted
{
public:
	TArray< struct FName >                             DisableParticleEffectTags;                        		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37842 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_DisableParticleEffects::pClassPointer = NULL;

// Class UDKGame.AnimNotify_ScriptedEquipmentAttachment
// 0x0004 (0x0040 - 0x003C)
class UAnimNotify_ScriptedEquipmentAttachment : public UAnimNotify_Scripted
{
public:
	int                                                NotifyID;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37850 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_ScriptedEquipmentAttachment::pClassPointer = NULL;

// Class UDKGame.AnimNotify_ToggleLights
// 0x0010 (0x004C - 0x003C)
class UAnimNotify_ToggleLights : public UAnimNotify_Scripted
{
public:
	struct FName                                       LightTagToEnable;                                 		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LightTagToDisable;                                		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37856 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_ToggleLights::pClassPointer = NULL;

// Class UDKGame.AntiCheat
// 0x0008 (0x0044 - 0x003C)
class UAntiCheat : public UObject
{
public:
	int                                                SpeedHackDetections;                              		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              LastSystemtime;                                   		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37863 ];

		return pClassPointer;
	};

	bool CheckGameInfo ( );
	bool CheckSpeedHack ( );
	bool CheckTowers ( );
	bool CheckHeroStats ( );
	bool DoAntiCheatChecks ( );
	void HandleCheater ( );
	void KickEveryone ( );
	float GetAntiCheatInterval ( );
};

UClass* UAntiCheat::pClassPointer = NULL;

// Class UDKGame.DunDefAchievementManager
// 0x00BC (0x00F8 - 0x003C)
class UDunDefAchievementManager : public UObject
{
public:
	TArray< struct FAchievementEntry >                 AchievementEntries;                               		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     UnlockedMessageString;                            		// 0x0048 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnlockedCoreMessageString;                        		// 0x0054 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   UnlockedAchievementSound_PC;                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   UnlockedCoreSound;                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           Area1_Tags;                                       		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           Area2_Tags;                                       		// 0x0074 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           Area3_Tags;                                       		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           AllArea_Tags;                                     		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           Challenge_Tags;                                   		// 0x0098 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           FamiliarTypes;                                    		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FFamiliarTypeAlias >                FamiliarAliases;                                  		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           AllFamiliarTypes;                                 		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FFamiliarTypeAlias >                AllFamiliarAliases;                               		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            HeroClassUniqueIDs;                               		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           TranscendentSurvivalistAreaTags;                  		// 0x00E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           MasterRTSAreaTags;                                		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38301 ];

		return pClassPointer;
	};

	class UDunDefAchievementManager* GetAchievementManager ( );
	bool DoesAnyLocalPlayerHaveAchievementUnlocked ( unsigned char Achievement, unsigned long bOnlyCheckPrimaryPlayer );
	bool IsAchievementUnlocked ( class ULocalPlayer* Player, unsigned char Achievement );
	bool AreAllOtherAchievementsUnlocked ( class ULocalPlayer* Player, unsigned long bIsUltimate );
	void CheckToUnlockAchivement ( class ADunDefPlayerController* ForPlayer, unsigned char AchievementCheckSet, class UDunDefHero* hero, class UHeroEquipment* Equipment, class UCampaignLevelEntryObject* beatLevelEntryObject, int intParam1, int intParam2 );
	void CheckAllFamiliars ( class ADunDefPlayerController* ForPlayer, class UHeroEquipment* equipToCheck );
	void CheckFamiliars ( class ADunDefPlayerController* ForPlayer, class UHeroEquipment* equipToCheck );
	void CheckSurvivalWaveAchievements ( int GameDifficulty, int theWaveNumber );
	void CheckAwardAchievements ( class ADunDefPlayerController* ForPlayer, int GameDifficulty );
	bool CheckAward ( class UDunDefPlayerStats* theStats, int StatClassIndex, struct FString BufferName, int StartDifficulty, int minimumValue );
	void CheckLevelCompletionAchievements ( class ADunDefPlayerController* ForPlayer, class UCampaignLevelEntryObject* levelEntry, int GameDifficulty );
	bool CanIGetAHug ( class ADunDefPlayerController* ForPlayer, unsigned char HeroUniqueTemplateHeroID );
	int GetAchievemntEntryIndex ( unsigned char Achievement );
	struct FString GetCoreUnlockString ( int Index, int PlayerIndex );
	void UnlockCores ( class ADunDefPlayerController* ForPlayer, unsigned char Achievement );
	void DoUnlockAchivement ( class ADunDefPlayerController* ForPlayer, unsigned char Achievement, unsigned long UnlockForEveryone, unsigned long bRequirePawnPossession, unsigned long bPCDontRecurse, unsigned long onlyUnlockLocal );
};

UClass* UDunDefAchievementManager::pClassPointer = NULL;

// Class UDKGame.DunDefViewportClient
// 0x0CCC (0x0E08 - 0x013C)
class UDunDefViewportClient : public UDunDefNativeViewportClient
{
public:
	class UFont*                                       GlobalSmallFontReference;                         		// 0x013C (0x0004) [0x0000000000000000]              
	struct FCursorParticle                             CursorParticles[ 0x48 ];                          		// 0x0140 (0x0B40) [0x0000000000000000]              
	class UMaterial*                                   CursorParticleMat;                                		// 0x0C80 (0x0004) [0x0000000000000000]              
	int                                                LastCanvasWidth;                                  		// 0x0C84 (0x0004) [0x0000000000000000]              
	int                                                LastCanvasHeight;                                 		// 0x0C88 (0x0004) [0x0000000000000000]              
	unsigned long                                      WantSplitScreen : 1;                              		// 0x0C8C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      SelectedCharacters : 1;                           		// 0x0C8C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      EnablePostProcessing : 1;                         		// 0x0C8C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      PlayerOneUseGamepad : 1;                          		// 0x0C8C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      DrawBlackOverlay : 1;                             		// 0x0C8C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUseConsole : 1;                                  		// 0x0C8C (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      AnyParticlesRemaining : 1;                        		// 0x0C8C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      HasFirstTicked : 1;                               		// 0x0C8C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bViewportInitialized : 1;                         		// 0x0C8C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bRegularCursor : 1;                               		// 0x0C8C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bShownDLCSplash : 1;                              		// 0x0C8C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDidDrawCursor : 1;                               		// 0x0C8C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bGlobalUISceneWantsParticles : 1;                 		// 0x0C8C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bHideCursor : 1;                                  		// 0x0C8C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bWasCursorLocked : 1;                             		// 0x0C8C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bIsResettingForNewMap : 1;                        		// 0x0C8C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      oldFullscreenViewport : 1;                        		// 0x0C8C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      showConnectionErrorAfterTravel : 1;               		// 0x0C8C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      customErrorTitle : 1;                             		// 0x0C8C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bDisplayVersionString : 1;                        		// 0x0C8C (0x0004) [0x0000000000004000] [0x00080000] ( CPF_Config )
	unsigned long                                      SetupUpHurtEffectsOpened : 1;                     		// 0x0C8C (0x0004) [0x0000000000000000] [0x00100000] 
	float                                              LastResetCursorParticleTime;                      		// 0x0C90 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastMouseCoords;                                  		// 0x0C94 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              Gamma;                                            		// 0x0CA0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VolumeSFX;                                        		// 0x0CA4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VolumeMusic;                                      		// 0x0CA8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     MobileHeroManager;                                		// 0x0CAC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CaliberateMoveString;                             		// 0x0CB8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectEyeString;                                 		// 0x0CC4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectNavString;                                 		// 0x0CD0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DownloadingSubscribed;                            		// 0x0CDC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              LastMouseMovementTime;                            		// 0x0CE8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUI_LoadingScreen*                           TheLoadingScreen;                                 		// 0x0CEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRealDeltaTime;                                		// 0x0CF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScriptAbsoluteSeconds;                            		// 0x0CF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefHeroManager*                          HeroManagerTemplate;                              		// 0x0CF8 (0x0004) [0x0000000000000000]              
	class UDunDefHeroManager*                          TheHeroManager;                                   		// 0x0CFC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefViewportInput*                        MyInput;                                          		// 0x0D00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCampaignLevelEntryObject*                   nextLevelEntryObject;                             		// 0x0D04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CursorLock;                                       		// 0x0D08 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefUIScene*                              GlobalHUDUITemplate;                              		// 0x0D10 (0x0004) [0x0000000000000000]              
	struct FName                                       AltOpeningAnim;                                   		// 0x0D14 (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          SaveIconMaterial;                                 		// 0x0D1C (0x0004) [0x0000000000000000]              
	float                                              SaveIconSize;                                     		// 0x0D20 (0x0004) [0x0000000000000000]              
	float                                              SaveIconPaddingX;                                 		// 0x0D24 (0x0004) [0x0000000000000000]              
	float                                              SaveIconPaddingY;                                 		// 0x0D28 (0x0004) [0x0000000000000000]              
	float                                              LastSavingTime;                                   		// 0x0D2C (0x0004) [0x0000000000000000]              
	struct FString                                     MSG_DuplicateLoginTitle;                          		// 0x0D30 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoinFailedTitle;                              		// 0x0D3C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoinFailedDescription;                        		// 0x0D48 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              TheUIScalePercent;                                		// 0x0D54 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   OldViewportsize;                                  		// 0x0D58 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                MouseEntropy1;                                    		// 0x0D60 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MouseEntropy2;                                    		// 0x0D64 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAxisInfo                                   playerAxes[ 0x4 ];                                		// 0x0D68 (0x0040) [0x0000000000000000]              
	unsigned char                                      LastConnectionStatus;                             		// 0x0DA8 (0x0001) [0x0000000000000000]              
	struct FString                                     cachedConnectionErrorTitle;                       		// 0x0DAC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     cachedConnectionErrorMessage;                     		// 0x0DB8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UDunDefUIScene*                              delayedScene;                                     		// 0x0DC4 (0x0004) [0x0000000000000000]              
	float                                              sceneDelayTime;                                   		// 0x0DC8 (0x0004) [0x0000000000000000]              
	struct FString                                     versionString;                                    		// 0x0DCC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     HeroManagerTemplateString;                        		// 0x0DD8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DemoString;                                       		// 0x0DE4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	int                                                LastMainMenuButton;                               		// 0x0DF0 (0x0004) [0x0000000000000000]              
	float                                              SetupUpHurtEffectsTimerStarted;                   		// 0x0DF4 (0x0004) [0x0000000000000000]              
	class UCDTSettingsManager*                         mySettings;                                       		// 0x0DF8 (0x0004) [0x0000000000000000]              
	TArray< int >                                      emulatorIds;                                      		// 0x0DFC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38354 ];

		return pClassPointer;
	};

	void SetSimpleDamageNumbers ( unsigned long SimpleDamageNumbersEnabled );
	void SetDamageNumberScale ( float val );
	void SetCensorItems ( unsigned long CensorItemsEnabled );
	void ToggleItemCensor ( );
	void SetQualityOutlineFilter ( int val );
	bool ToggleQualityOutline ( );
	void SetQualityOutline ( unsigned long outlineEnabled );
	bool ToggleHideMiniMapBillboards ( );
	bool GetHardcore ( );
	void SetHardcore ( unsigned long hardcore );
	void SetHideMiniMapBillboards ( unsigned long Hide );
	bool ToggleHideGoodEquipmentOverlay ( );
	void SetHideGoodEquipmentOverlay ( unsigned long Hide );
	bool ToggleHideMiniMapTowers ( );
	void SetHideMiniMapTowers ( unsigned long Hide );
	int IncreaseSF ( );
	int IncreaseDisplayedTowerUpgradeLevel ( );
	int CycleItemQualityFx ( );
	int CycleShowEquipmentQualityCount ( );
	void SetCosmeticSetVisible ( unsigned long val );
	void SetCDPortalVisible ( unsigned long val );
	void SetShowEquipmentQualityCount ( int val );
	void SetDroppedItemQualityFx ( int val );
	void SetOtherPlayerCanSellTower ( unsigned long val );
	void SetCanMoveWhileBuilding ( unsigned long val );
	void SetTowersUseDynamicLighting ( unsigned long val );
	void SetOutline ( unsigned long Enabled );
	void SetFrameRateLimit ( float FrameRateLimit );
	void SetGraphicsQuality ( unsigned char Graphics );
	void RemoveSplitscreenPlayers ( );
	void WorldPreBeginPlay ( class AWorldInfo* theWorldInfo );
	bool IsGamepadOwned ( );
	bool IsAnyPlayerUsingGamepad ( );
	struct FString GetResolutionString ( );
	void CinematicCompleted ( );
	bool HasFullSceenInputLockingUI ( );
	void PlayMusic ( class USoundCue* musicCue, float FadeInTime, float FadeInVolumeLevel, float FadeOutTime, float FadeOutVolumeLevel );
	void SetVisibleInWaitingMode ( class ADunDefPlayerController* PC, unsigned long visible );
	int GetLastMainMenuButton ( );
	void SetLastMainMenuButton ( int whichButton );
	bool IsAnyConsolePointerAvailable ( );
	void EditBoxSubmitted ( class UUIEditBox* Sender );
	void eventEditBoxFocused ( class UUIEditBox* focusedEditBox, int PlayerIndex );
	void FlushPlayerInputs ( );
	void RemoveNonSignedInControllers ( );
	void ShowMessageForLastConnectionErrors ( );
	void ClearCachedMessage ( );
	void SetCachedMessage ( struct FString Title, struct FString Message );
	bool CachedMessageIsDisplaying ( struct FString Title, struct FString Message );
	void NotifyLocalPlayerLeaving ( class ULocalPlayer* LPlayer, unsigned long Logout );
	void ChangedKeyboardPlayer ( unsigned long bAdded );
	bool eventOnInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	void eventGameSessionEnded ( );
	bool IsPrimaryProfilePlayer ( class ULocalPlayer* thePlayer );
	int GetFreeEmulatorSlot ( );
	void EmulatorUnpause ( );
	void QuickAddSplits ( );
	void KickAllSplits ( );
	void HandlePotentialEmulatorLeave ( int theirId );
	void SetEmulatorPlayer ( int PlayerIndex );
	void SetKeyboardPlayer ( int toindex );
	void RefreshGamepadAssignments ( );
	class UDunDefViewportClient* GetViewportClient ( );
	void UpdateAutoSplitType ( );
	void ResetForNewMap ( unsigned long bForceDestroyGRI, unsigned long bIsLoadingLevel );
	bool eventInit ( struct FString* OutError );
	void HideGlobalScene ( class UDunDefUIScene* theScene );
	class UDunDefUIScene* ShowGlobalScene ( class UDunDefUIScene* theScene, unsigned long OpenForPlayer, class ULocalPlayer* PlayerOwner, class UUIScene* sceneToLoseFocus, struct FName AlternateOpeningAnimation, unsigned char ForceSceneStackPriority, int CustomInitIndex );
	void DelayedShowGlobalScene ( class UDunDefUIScene* theScene, float Timer );
	void DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message );
	void AdjustSplitScreenPerformance ( );
	void CloseLoadingScreen ( );
	void CloseAllUIScenesOfClass ( class UClass* UISceneClass );
	void CloseAllGlobalUIScenesOfClass ( class UClass* UISceneClass, unsigned long CloseWithAnimation );
	void CloseExtraPauseMenuScenes ( class ULocalPlayer* LP );
	bool CloseAllGlobalUIScenesForPlayer ( class ULocalPlayer* PlayerOwner, unsigned long CloseWithAnimation, unsigned long OnlyCloseGameplayScenes );
	void CloseAllInputProcessingScenes ( class UUIScene* sceneToIgnore );
	void CloseAllGlobalUIScenes ( unsigned long bDontCloseLoadingScreen );
	class UUI_LoadingScreen* ShowLoadingScreen ( unsigned long isGameplayMapTransition );
	void SetAllGlobalUIScenesVisible ( unsigned long visible );
	class AMain* GetGameInfo ( );
	void SetResolution ( struct FString newResolution, unsigned long newFullScreen );
	void SetPostProcessingEnabled ( unsigned long Enable );
	void SetUIScalePercent ( float UIScalePercent );
	void SetSaturation ( float saturation );
	void SetGamma ( float Value );
	class UEngine* GetEngine ( );
	void NotifyConnectionError ( struct FString Message, struct FString Title );
	bool ReportJoinFailure ( class UUI_MessageBox* Sender, struct FString ButtonClicked, int PlayerIndex );
	void NotifyDownloadProgress ( struct FString Message, struct FString Title );
	bool OnCancelDownloadProgress ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	bool OnAcceptConnectionError ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void TestAudioSettings ( float tempSFXVolume, float tempMusicVolume );
	void UpdateAudioSettings ( float SFXscale, float MusicScale, unsigned long UpdateSFXAndMusic, unsigned long UpdateMovie, unsigned long bForceUpdate );
	void SetMusicVolume ( float TheVolume );
	void SetSFXVolume ( float TheVolume );
	void eventFirstTick ( );
	void PlayerFourInvited ( struct FOnlineGameSearchResult* InviteResult );
	void PlayerThreeInvited ( struct FOnlineGameSearchResult* InviteResult );
	void PlayerTwoInvited ( struct FOnlineGameSearchResult* InviteResult );
	void PlayerOneInvited ( struct FOnlineGameSearchResult* InviteResult );
	void CreatePlayerForInvte ( int ControllerId, struct FOnlineGameSearchResult* InviteResult );
	void NotifyEquipmentChanged ( class ULocalPlayer* pl );
	void NotifyLevelVictory ( );
	void NotifyGameOver ( );
	void NotifyPlayerTakeHit ( class ULocalPlayer* pl );
	void NotifyPhaseChange ( unsigned long IsCombatPhase );
	void NotifyPlayerLeft ( class APlayerReplicationInfo* PRI );
	void NotifyLocalPlayerRemoved ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyLocalPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyPlayerJoined ( class APlayerReplicationInfo* PRI );
	bool IsTopLevelSceneForEveryone ( class UDunDefUIScene* aScene );
	bool IsTopLevelSceneOrNone ( class UDunDefUIScene* aScene, class ULocalPlayer* ForPlayer );
	class UUIScene* GetActiveScene ( class ULocalPlayer* ForPlayer, unsigned long IgnoreUnfocusedScenes );
	bool IsTopLevelScene ( class UDunDefUIScene* aScene, class ULocalPlayer* ForPlayer );
	TArray< class UDunDefUIScene* > GetActiveUIScenesFromClass ( class UClass* fromClass );
	class UDunDefUIScene* GetActiveUISceneFromClass ( class UClass* fromClass, class ULocalPlayer* ForPlayer );
	class UUIScene* GetActiveUISceneFromBaseClass ( class UClass* fromClass, class ULocalPlayer* ForPlayer );
	class UDunDefUIScene* GetActiveUIScene ( class UDunDefUIScene* fromTemplate, class ULocalPlayer* ForPlayer );
	bool IsSceneInstanceOpened ( class UDunDefUIScene* UISceneInstance );
	class UDunDefUIScene* GetSceneShowingKeyboard ( );
	void HideCursor ( );
	void eventTick ( float DeltaTime );
	void ResolutionChanged ( );
	void PerformStatsSending ( float DeltaTime );
	class ULocalPlayer* GetFirstGamePlayer ( );
	class ULocalPlayer* GetLocalPlayerWithController ( int ControllerId );
	class ULocalPlayer* GetLocalPlayerFromIndex ( int Index );
	class UDunDefLocalPlayer* GetLocalKeyboardPlayer ( );
	int GetNumLocalPlayers ( );
	TArray< int > GetLocalPlayerControllerIds ( );
	TArray< class ULocalPlayer* > GetLocalPlayers ( );
	void DunDefSetSplitScreen ( unsigned long Splitscreen );
	bool AllowSplitscreenJoin ( );
	void UpdateActiveSplitscreenType ( );
	int GetIndexOfLocalPlayer ( class ULocalPlayer* LP );
	class ULocalPlayer* eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError );
	void ResetKeyboardController ( );
	bool eventRemovePlayer ( class ULocalPlayer* ExPlayer, unsigned long justRemove, unsigned long forceQuitToMainMenu, unsigned long bIgnoreGuests );
	void DebugRemovePlayer ( int ControllerId );
	class ULocalPlayer* DebugCreateLocalPlayer ( int ControllerId );
	void GetCurrentCanvasSize ( int* Width, int* Height );
	void SetMousePositionFromWorldVector ( class UCanvas* C, struct FVector WorldPos, class ULocalPlayer* InPlayer );
	void SetMousePos ( struct FVector ScreenPos );
	void SetMousePosition ( float screenWidthPercent, float screenHeightPercent );
	void ResetCursorParticle ( struct FCursorParticle* Particle );
	void UpdateCursorParticles ( float DeltaTime );
	void DrawCursorParticles ( class UCanvas* Canvas );
	bool ShouldDrawGameplayCursor ( );
	void ChaseCenterCursor ( class ADunDefPlayerController* thePC );
	bool ShouldLockCursorPosition ( );
	bool AreAnyPlayersUsingCursorChaseCamera ( );
	void DrawCursor ( class UCanvas* Canvas );
	bool ShouldShowCursorParticles ( );
	class APlayerController* GetPlayerController ( );
	bool HasAnyPawn ( );
	void eventPostRender ( class UCanvas* Canvas );
};

UClass* UDunDefViewportClient::pClassPointer = NULL;

// Class UDKGame.DunDefAchievementMessage
// 0x0000 (0x0164 - 0x0164)
class UDunDefAchievementMessage : public UDunDefGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38368 ];

		return pClassPointer;
	};

};

UClass* UDunDefAchievementMessage::pClassPointer = NULL;

// Class UDKGame.CampaignLevelEntryObject
// 0x013C (0x0178 - 0x003C)
class UCampaignLevelEntryObject : public UObject
{
public:
	struct FCampaignLevelEntry                         MyLevelEntry;                                     		// 0x003C (0x0108) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EntryIdentifierTag;                               		// 0x0144 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LevelFileName;                                    		// 0x0150 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LevelFriendlyName;                                		// 0x015C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      AlwaysUnlocked : 1;                               		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ProceedsToNextLevel : 1;                          		// 0x0168 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FString                                     NewString;                                        		// 0x016C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38431 ];

		return pClassPointer;
	};

	void InitFrom ( struct FCampaignLevelEntry levelEntry );
	bool IsRootEntry ( );
	int GetFolderID ( );
	bool GetEntryEnabled ( class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject );
	void GetDataProps ( int dataSetType, struct FDataEntryProps* dProps );
	struct FString GetEntryFriendlyName ( );
	struct FString GetDataString ( int dataSetType );
};

UClass* UCampaignLevelEntryObject::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerStats
// 0x0000 (0x009C - 0x009C)
class UDunDefPlayerStats : public UStatSystem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38449 ];

		return pClassPointer;
	};

	void FillStats ( );
	void Initialize ( );
	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
};

UClass* UDunDefPlayerStats::pClassPointer = NULL;

// Class UDKGame.DataListEntryInterface
// 0x0000 (0x003C - 0x003C)
class UDataListEntryInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38765 ];

		return pClassPointer;
	};

	bool IsRootEntry ( );
	int GetFolderID ( );
	void GetDataProps ( int dataSetType, struct FDataEntryProps* dProps );
	struct FString GetDataString ( int dataSetType );
	bool GetEntryEnabled ( class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject );
};

UClass* UDataListEntryInterface::pClassPointer = NULL;

// Class UDKGame.ItemFolderStub
// 0x0010 (0x004C - 0x003C)
class UItemFolderStub : public UObject
{
public:
	int                                                FolderID;                                         		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     FolderName;                                       		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 38771 ];

		return pClassPointer;
	};

	bool IsRootEntry ( );
	void GetDataProps ( int dataSetType, struct FDataEntryProps* dProps );
	int GetFolderID ( );
	struct FString GetDataString ( int dataSetType );
	bool GetEntryEnabled ( class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject );
};

UClass* UItemFolderStub::pClassPointer = NULL;

// Class UDKGame.DunDefSceneClient
// 0x0044 (0x01EC - 0x01A8)
class UDunDefSceneClient : public UGameUISceneClient
{
public:
	TArray< struct FName >                             CustomPostProcessEffects;                         		// 0x01A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MSG_NetworkConnectionLostTitle;                   		// 0x01B4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_NetworkConnectionLostDescription;             		// 0x01C0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_SigninChangeTitle;                            		// 0x01CC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_SigninChangeDescription;                      		// 0x01D8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	class UUI_MessageBox*                              MessageBoxTemplate;                               		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAllowImpactDecals : 1;                           		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      isInMultiplayerUI : 1;                            		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39185 ];

		return pClassPointer;
	};

	void EmulateOnlineServiceConnect ( );
	void EmulateOnlineServiceDisconnect ( );
	void EmulateLinkStatusChange ( unsigned long connected );
	void NotifyActiveSplitScreenChanged ( );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex );
	class UDunDefSceneClient* GetDunDefSceneClient ( );
	void NotifyGameSessionEnded ( );
	void NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	bool MidGameLoadConfirmation ( class UUI_MessageBox* theMessageBox, struct FString ButtonPressed, int whichPlayer );
	void LoadToMainMenu ( class ULocalPlayer* thePlayer );
	bool HasActiveDunDefMessageBox ( struct FName SceneTag );
	void CloseDunDefMessageBox ( struct FName SceneTag, class ULocalPlayer* PlayerOwner );
	void ShowDunDefMessageBox ( struct FName SceneTag, struct FString Title, struct FString Message, unsigned char Type, class ULocalPlayer* PlayerOwner, struct FScriptDelegate clickedDel, struct FScriptDelegate closeDel );
	void SetLowParticles ( int NumPlayers );
	void RefreshUsedHeroes ( );
	void RefreshHeroLists ( );
	void SetSHLights ( class AActor* useActor, unsigned long Enabled );
	void UpdateVisibleStaticMeshes ( class AActor* useActor, int NumPlayers );
	void ManageSMCVisibility ( class AActor* useActor, class UStaticMeshComponent* Component, int NumPlayers, unsigned long bIs3D );
	void UpdateVisibleActors ( class AActor* useActor, int NumPlayers );
	void DisablePostProcessing ( );
	void EnablePostProcessing ( );
	void ToggleCustomEffects ( unsigned long bShow );
	void SetupPlayerPostProcess ( class ULocalPlayer* ForPlayer, class UPostProcessChain* templateChain, unsigned long keepEffects );
	class UPostProcessChain* GetTemplateChain ( int NumPlayers );
	void AdjustPerformanceForAddedPlayer ( int NumPlayers, class ULocalPlayer* AddedPlayer, unsigned long adjustPostProcess );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
};

UClass* UDunDefSceneClient::pClassPointer = NULL;

// Class UDKGame.DunDefCrystalCore
// 0x0168 (0x0670 - 0x0508)
class ADunDefCrystalCore : public ADunDefDamageableTarget
{
public:
	class UStaticMeshComponent*                        CollisionMesh;                                    		// 0x0508 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    CoreParticleEffect;                               		// 0x050C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    VictoryParticleEffect;                            		// 0x0510 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    BuildParticleEffect;                              		// 0x0514 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          InDangerHUDWaypointMatHealthBar;                  		// 0x0518 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UMaterialInterface*                          InDangerHUDWaypointMat;                           		// 0x051C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FColor                                      ToolTipDrawColor;                                 		// 0x0520 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipOutOfRangeColor;                           		// 0x0524 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationDistance;                               		// 0x0528 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TowerPreventionRadius;                            		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InDangerHUDFadeOutTime;                           		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InDangerHUDFadeInTime;                            		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoreIndicateDamageTime;                           		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ActivatedEmitter;                                 		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationBuildPhaseString;                       		// 0x0540 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationVictoryString;                          		// 0x054C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationVictoryViewStatsString;                 		// 0x0558 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CoreUnderAttackMessageString;                     		// 0x0564 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      CoreUnderAttackMessageColor;                      		// 0x0570 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPointLightComponent*                        CoreLight;                                        		// 0x0574 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTexture2D*                                  MiniMapIconTexture;                               		// 0x0578 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              MiniMapIconSize;                                  		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionColorIntensityMultiplier;                		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationColorIntensityMultiplier;               		// 0x0584 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HurtColorIntensityMultiplier;                     		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             MyAmbientSound;                                   		// 0x058C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUI_GameSetup*                               GameSetupUITemplate;                              		// 0x0590 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_PlayerStats*                             PlayerStatsUITemplate;                            		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReportAttackedStatNoDamageInterval;               		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageForceFeedbackNoDamageInterval;              		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PostCreationActivationAllowanceInterval;          		// 0x05A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInstanceConstant* >         AdditionalColorableMaterials;                     		// 0x05A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       ColorMaterialColorParamNames[ 0x3 ];              		// 0x05B0 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CoreFirstHitSound;                                		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WarningIconCenterYOffset;                         		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WarningIconCenterScale;                           		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStaticCrystalCoreVisuals : 1;                    		// 0x05D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableActivation : 1;                           		// 0x05D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bVictoryEffectActive : 1;                         		// 0x05D4 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bBuildEffectActive : 1;                           		// 0x05D4 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bStartedDangerFadeIn : 1;                         		// 0x05D4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	struct FString                                     LobbyOpenGameSetupString;                         		// 0x05D8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LobbyViewHostsStatsString;                        		// 0x05E4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LobbyViewYourStatsString;                         		// 0x05F0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      LobbyActivationStringColor;                       		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LobbyWaitingForStatsColor;                        		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      HurtForceFeedbackWaveForm;                        		// 0x0604 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UForceFeedbackWaveform*                      SmallHurtForceFeedbackWaveForm;                   		// 0x0608 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FLinearColor                                StaticCrystalCoreVisualHitcolor;                  		// 0x060C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SoulColorAddValue;                                		// 0x061C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UParticleLightEnvironmentComponent*          ParticleLightEnvComp;                             		// 0x062C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   InDangerHUDWaypointMatHealthBarInst;              		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastActivationTime;                               		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCrystalCoreOptions                         CrystalCoreInfo;                                  		// 0x0638 (0x0034) [0x0000000000000020]              ( CPF_Net )
	float                                              LastStartedDangerFadeInTime;                      		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39201 ];

		return pClassPointer;
	};

	void PlayHitEffect ( class UClass* DamageType, struct FVector HitLocation );
	bool AllowDarknessIgnorance ( );
	void eventEncroachedBy ( class AActor* Other );
	float DTGetEnemyTargetingDesirability ( class ADunDefEnemyController* forController );
	void SetBuildEffect ( unsigned long activateEffect );
	void SetVictoryEffect ( unsigned long activateEffect );
	void ChangedGamePhases ( unsigned long IsCombatPhase );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	void SubtractHealth ( int DamageAmount );
	void UpdateCrystalCore ( unsigned long locked );
	void eventPostBeginPlay ( );
	bool PreventTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point, float towerRadius );
	bool AllowTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point );
	bool CheckAllowance ( );
	class UDunDefHeroManager* GetHeroManager ( );
	void eventDestroyed ( );
	void Died ( class AController* EventInstigator, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser );
	void eventNotifyTookDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	bool DrawMyHUD ( class ADunDefHUD* H );
	void NotifyHealthChange ( );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	void Activate ( );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	struct FString GetLobbyActivationString ( class ADunDefPlayerController* PC, int activationType );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
};

UClass* ADunDefCrystalCore::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerCamera
// 0x0118 (0x0690 - 0x0578)
class ADunDefPlayerCamera : public ADunDefPlayerCameraNative
{
public:
	float                                              ShoulderCamRotationCompensation;                  		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileCameraDistanceMultiplier;                   		// 0x057C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class USoundCue*                                   GamepadZoomSoundBlip;                             		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    PreviousShoulderCamTargetRotation;                		// 0x0584 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              AdditionalFOVMin;                                 		// 0x0590 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalFOVMax;                                 		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlacingTowerFOV;                                  		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PlacingTowerLocationOffset;                       		// 0x059C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    PlacingTowerRotationOffset;                       		// 0x05A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChaseCameraPitchStickOffsetDown;                  		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChaseCameraPitchStickOffsetUp;                    		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpectatorCameraFOV;                               		// 0x05BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpectatorSmoothZoomSpeed;                         		// 0x05C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraMinSpinPerFrame;                            		// 0x05C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraMaxSpinPerFrame;                            		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FPVCameraPitchMax;                                		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FPVCameraPitchSensitivity;                        		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TPVCameraPitchSensitivity;                        		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlacingTowerSpinOffset;                           		// 0x05D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastViewTarget;                                   		// 0x05DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      UsedInvalidFOV : 1;                               		// 0x05E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bLastVTWasPawn : 1;                               		// 0x05E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHideWeapon : 1;                                  		// 0x05E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              MaxZoomOut;                                       		// 0x05E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxSpectatorZoom;                                 		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinSpectatorZoom;                                 		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinZoomIn;                                        		// 0x05F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FreeLookDistanceMultiplier;                       		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraDistanceInterpSpeed;                        		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetCameraDistanceMultiplier;                   		// 0x05FC (0x0004) [0x0000000000000000]              
	float                                              PreShoulderCamZoomDistance;                       		// 0x0600 (0x0004) [0x0000000000000000]              
	float                                              PrePlacingTowerCameraDistance;                    		// 0x0604 (0x0004) [0x0000000000000000]              
	class UCameraShake*                                HurtShake;                                        		// 0x0608 (0x0004) [0x0000000000000000]              
	class UCameraShake*                                DeathShake;                                       		// 0x060C (0x0004) [0x0000000000000000]              
	float                                              SpectatorYaw;                                     		// 0x0610 (0x0004) [0x0000000000000000]              
	float                                              TargetSpectatorYaw;                               		// 0x0614 (0x0004) [0x0000000000000000]              
	float                                              SpectatorPitch;                                   		// 0x0618 (0x0004) [0x0000000000000000]              
	float                                              TargetSpectatorPitch;                             		// 0x061C (0x0004) [0x0000000000000000]              
	float                                              SpectatorOffset;                                  		// 0x0620 (0x0004) [0x0000000000000000]              
	float                                              LastServerCameraUpdate;                           		// 0x0624 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastServerSentCameraLocation;                     		// 0x0628 (0x000C) [0x0000000000000000]              
	struct FRotator                                    LastServerSentCameraRotation;                     		// 0x0634 (0x000C) [0x0000000000000000]              
	struct FRotator                                    CurrentTargetTargetRotation;                      		// 0x0640 (0x000C) [0x0000000000000000]              
	float                                              LastCameraZoomTime;                               		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpectatorSmoothZoom;                              		// 0x0650 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpectatorSmoothMinZoom;                           		// 0x0654 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpectatorSmoothMaxZoom;                           		// 0x0658 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PreSpectatorTargetCameraDistanceMultiplier;       		// 0x065C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACameraActor*                                ForceCameraTarget;                                		// 0x0660 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              currentDesiredXSpeed;                             		// 0x0664 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              currentDesiredYSpeed;                             		// 0x0668 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinAllowedHeight;                                 		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxAllowedHeight;                                 		// 0x0670 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MaxXYBounds;                                      		// 0x0674 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MinXYBounds;                                      		// 0x067C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DesiredInitialOverlordCameraLocation;             		// 0x0684 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39241 ];

		return pClassPointer;
	};

	void ForceSetCameraLocation ( struct FVector NewLoc, unsigned long bDoInterp );
	void ZoomOutValue ( float ZoomChange );
	void ZoomInValue ( float ZoomChange );
	void MoveCamera ( float xDir, float yDir );
	bool UseFreeLook ( );
	bool eventIsInShoulderMode ( );
	void PlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void InitializeFor ( class APlayerController* PC );
	void InitializeForPlayer ( class ADunDefPlayer* Target );
	void NotifyPlayerDied ( );
	void NotifyPlayerTakeHit ( float Damage );
	void UpdateOptions ( );
	void CycleZoom ( );
	float GetCameraZoomPercent ( );
	void ZoomOut ( );
	void ZoomIn ( );
	float AdjustDesiredFOV ( float FOV, unsigned long bIgnoreUserFov );
	float GetScreenAspectRatio ( );
	bool AllowTargetPoint ( struct FVector theTargetPoint );
	void ResetInterpolations ( class AActor* Target, unsigned long bUseTransformOverride, struct FVector newTargetLoc, struct FRotator newTargetRot );
	void Teleported ( class AActor* Target, struct FVector newPawnLoc, struct FRotator newPawnRot );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void PostCameraTransform ( float DeltaTime, struct FTViewTarget* theViewTarget );
	void eventTick ( float DeltaTime );
	bool AllowOverTheShoulderCamera ( );
	void UpdateFreeLook ( float DeltaTime, struct FTViewTarget* OutVT );
	void DisableShoulderCam ( );
	void EnableShoulderCam ( );
	bool IsShoulderCamera ( );
	void SetCameraTransitionPoint ( );
	void StopPlacingTower ( );
	void StartPlacingTower ( );
	void eventCalculateSpinOffset ( );
	void eventTiltCamera ( float Amount );
	void eventSpinCamera ( float Amount, unsigned long forceSpin );
	void eventPostBeginPlay ( );
	void TurnSpectatorCameraOff ( );
	void UpdateSpectatorCamera ( );
	void UpdateSpectatorSmoothZoom ( float Amount );
	void UpdateSpectatorPitch ( float Amount );
	void UpdateSpectatorYaw ( float Amount );
	void InitSpectatorCamera ( );
};

UClass* ADunDefPlayerCamera::pClassPointer = NULL;

// Class UDKGame.UI_GameSetup
// 0x0254 (0x0890 - 0x063C)
class UUI_GameSetup : public UDunDefUIScene
{
public:
	unsigned char                                      CurrentMapListType;                               		// 0x063C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentDifficulty;                                		// 0x063D (0x0001) [0x0000000000000000]              
	class UUIPanel_DataList*                           MapDataList;                                      		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   LaunchButton;                                     		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CloseButton;                                      		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 InfiniteWaveCheckbox;                             		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 PureStrategyCheckbox;                             		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 SurvivalCheckBox;                                 		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 MixModeCheckbox;                                  		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 HardcoreCheckbox;                                 		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    StartAtWaveLabel;                                 		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   StartAtWaveIncreaseButton;                        		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   StartAtWaveDecreaseButton;                        		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              waveChangeTimer;                                  		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefUIScene*                              DLCSplashUITemplate;                              		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             MinimumLevelPanel;                                		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MinimumLevelLabel;                                		// 0x0678 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton*                                   MinimumLevelIncreaseButton;                       		// 0x067C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton*                                   MinimumLevelDecreaseButton;                       		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              levelChangeTimer;                                 		// 0x0684 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentMinimumLevel;                              		// 0x0688 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton*                                   ResetButton;                                      		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 UseBuildTimerCheckbox;                            		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 LockTavernItemPickups;                            		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CampaignMissions;                                 		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DLCCampaignMissions;                              		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ModMissions;                                      		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   GetModMissionsButton;                             		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   LostQuestsButton;                                 		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SpecialMissions;                                  		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    InfiniteBuildLabel;                               		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    RecommendedHeroLevelLabel;                        		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    NightmareLabel;                                   		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             StartAtWaveDescriptionLabel;                      		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             MainPanel;                                        		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             SecondaryPanel;                                   		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             ToggleSurvivalButtonIcon;                         		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    MissionPreviewImageControl;                       		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MissionNameLabel;                                 		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MissionDescriptionLabel;                          		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             NewMissionIndicator;                              		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             NewMissionIndicatorSpecial;                       		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             NewMissionIndicatorExpansion;                     		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMissionPreviewImageInfo >          MissionPreviewInfos;                              		// 0x06E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionPreviewImageInfo                    UnknownMissionPreviewInfo;                        		// 0x06F0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIScreenObject*                             InfiniteBuildTimePanel;                           		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             SurvivalModePanel;                                		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIScriptWidget_ToggleButton* >      DifficultyButtons;                                		// 0x0708 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UUILabel* >                          DifficultyLabels;                                 		// 0x0714 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFont*                                       GameSettingsOverlayFont;                          		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      GameSettingsOverlayColor;                         		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LockedMissionGetColor;                            		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                GameSettingsOverlayGradientColor;                 		// 0x072C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DifficultyHarder;                                 		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DifficultyEasier;                                 		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StartGameSound;                                   		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ToggleSurvivalModeSound;                          		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   OptionalPanelTitle;                               		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ChallengeString;                                  		// 0x0750 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelString;                                      		// 0x075C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DifficultyString;                                 		// 0x0768 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InfiniteBuildTimeString;                          		// 0x0774 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SurvivalModeString;                               		// 0x0780 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StartingWaveString;                               		// 0x078C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TavernItemPickupString;                           		// 0x0798 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PureStrategyModeString;                           		// 0x07A4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_DLCWarningDescription1;                       		// 0x07B0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_DLCWarningDescription2;                       		// 0x07BC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_DLCWarningDescription3;                       		// 0x07C8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_DLCWarningTitle;                              		// 0x07D4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringYes;                                        		// 0x07E0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringNo;                                         		// 0x07EC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AllowMobilePlayersString;                         		// 0x07F8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NightmareLockedTitle;                             		// 0x0804 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NightmareLockedDescription;                       		// 0x0810 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NightmareLockedDescriptionGameSpyMac;             		// 0x081C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           OnStrings;                                        		// 0x0828 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UUIImage* >                          DifficultyImages;                                 		// 0x0834 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UUIImage* >                          HardcoreImages;                                   		// 0x0840 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUILabel*                                    BestOfOneLabel;                                   		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BestOfTwoLabel;                                   		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BestOfOneValue;                                   		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BestOfTwoValue;                                   		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MixModeLabel;                                     		// 0x085C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LockIconPath;                                     		// 0x0860 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     GetMissionString;                                 		// 0x086C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              HeartbeatInterval;                                		// 0x0878 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitialHeartbeatInterval;                         		// 0x087C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MultiplayerModeIconSize;                          		// 0x0880 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DLCSplashMacOnly : 1;                             		// 0x0884 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RecentlyUnhidden : 1;                             		// 0x0884 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      showingSpecialMissions : 1;                       		// 0x0884 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      showingModMissions : 1;                           		// 0x0884 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      showingDLCCampaign : 1;                           		// 0x0884 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      showingLostMissions : 1;                          		// 0x0884 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      oldDisplayCursor : 1;                             		// 0x0884 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      hasAutoSelected : 1;                              		// 0x0884 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bClientHasEntryObject : 1;                        		// 0x0884 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bHideSetupOverlay : 1;                            		// 0x0884 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bWasShowingMiniMap : 1;                           		// 0x0884 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	float                                              LaunchMapTimer;                                   		// 0x0888 (0x0004) [0x0000000000000000]              
	float                                              HeartbeatTimer;                                   		// 0x088C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39257 ];

		return pClassPointer;
	};

	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void CloseByPauseMenu ( );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void UpdateDifficultyVisibility ( );
	void eventUpdate ( float DeltaTime );
	void UpdateWaveNumButtons ( float DeltaTime );
	void UpdateLevelMinimumButtons ( float DeltaTime );
	void NotifyPlayerLeft ( class APlayerReplicationInfo* PRI );
	void NotifyPlayerJoined ( class APlayerReplicationInfo* PRI );
	void RefreshedList ( );
	void RefreshMapData ( unsigned long ShowSpecialMissions, unsigned long bShowDLCCampaign, unsigned long bShowModMissions, unsigned long bShowLostMissions );
	void AfterDataListUpdate ( class UUIPanel_DataList* aDataList );
	void BeforeDataListUpdate ( class UUIPanel_DataList* aDataList );
	class UDunDefHeroManager* GetHeroManager ( );
	void EntrySelected ( class UUIButton_DataListEntry* Button );
	void SetupDifficultyIcons ( struct FString campaignTag );
	void SetupBestOfInfo ( );
	bool OnDLCCompatibilityPromptClick ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void ShowIncompatibleDLCMessage ( TArray< class APlayerReplicationInfo* > playersWithoutLevel );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void RefreshMapDataForMapType ( unsigned char mapListType );
	void SetCurrentMapListType ( );
	int GetBestStartingWave ( );
	void ResetMapSettings ( );
	struct FCampaignLevelEntry GetSelectedLevelEntry ( );
	bool GetSelectedLevelDisableHardcore ( );
	bool GetSelectedLevelIsRestrictedDifficultyMission ( );
	bool GetSelectedLevelIsSpecialMission ( );
	struct FString GetSelectedLevelTagName ( );
	struct FString GetSelectedLevelFriendlyName ( );
	struct FString GetSelectedLevelFileName ( );
	void UIPostRender ( class UCanvas* C );
	void UpdateMinimumLevelLevel ( int Direction );
	void SetStartAtWave ( int StartAtWave );
	void SetHardcore ( unsigned long bIsHardcore );
	void SetUseBuildTimer ( unsigned long buildTimer );
	void SetPureStrategy ( unsigned long pureStrategy );
	void SetInfiniteWaves ( unsigned long infiniteWaves, unsigned long bRecursive );
	void SetDifficulty ( unsigned char difficulty, unsigned long notifyKismet );
	bool OnNightmarePopupClicked ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void SetMixMode ( unsigned long bEnable );
	void PostInitialSceneUpdate ( );
	void DoHideScene ( );
	int ComputeMinimumLevelRequirement ( int HostHeroLevel );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void ExecReplicatedUIMessage ( struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void UnhideScene ( struct FName AlternateOpeningAnimation );
	struct FMissionPreviewImageInfo GetImageInfoForTag ( struct FString MissionTag );
	bool AutoSelectCampaignLevel ( );
};

UClass* UUI_GameSetup::pClassPointer = NULL;

// Class UDKGame.DunDefGameSettings
// 0x0044 (0x0080 - 0x003C)
class UDunDefGameSettings : public UObject
{
public:
	unsigned long                                      InfiniteWaveMode : 1;                             		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      PureStrategyMode : 1;                             		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      MixMode : 1;                                      		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      MinimumLevelManuallySet : 1;                      		// 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      UseBuildTimer : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      AllowMobilePlayers : 1;                           		// 0x003C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      IsAFKShopMode : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bIsHardcoreMode : 1;                              		// 0x003C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                StartAtWave;                                      		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                MinimumLevel;                                     		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned char                                      GameDifficulty;                                   		// 0x0048 (0x0001) [0x0000000000000000]              
	class UCampaignLevelEntryObject*                   LastSelectedCampaignLevel;                        		// 0x004C (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentCampaignEntryTag;                          		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    DifficultyScoreMultipliers;                       		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyEquipmentWeightingModifiers;            		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     UI_LastConnectedIP;                               		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39321 ];

		return pClassPointer;
	};

	void ResetForOnlineHost ( );
	float GetDifficultyEquipmentWeightMultiplier ( );
	float GetDifficultyScoreMultiplier ( );
};

UClass* UDunDefGameSettings::pClassPointer = NULL;

// Class UDKGame.DunDefDataStore_DLC
// 0x0000 (0x00C4 - 0x00C4)
class UDunDefDataStore_DLC : public UUIDataStore_GameResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39327 ];

		return pClassPointer;
	};

	int GetDLCIdForLevel ( struct FCampaignLevelEntry levelEntry );
	int GetDLCMask ( );
	void eventPostInit ( );
	TArray< class UDunDefDLCSummary* > GetInstalledDLC ( );
	class UDunDefDataStore_DLC* GetDLCDataStore ( );
};

UClass* UDunDefDataStore_DLC::pClassPointer = NULL;

// Class UDKGame.DunDefGameStorage
// 0x22F8 (0x2334 - 0x003C)
class UDunDefGameStorage : public UObject
{
public:
	int                                                CurrentGameVersion;                               		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PreviusValidSaveVersions;                         		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                UseBinaryFormat;                                  		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     SaveName;                                         		// 0x0048 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData;                                      		// 0x0054 (0x01D8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData01;                                    		// 0x022C (0x01E4) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData02;                                    		// 0x0410 (0x01E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData03;                                    		// 0x05F0 (0x01E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData04;                                    		// 0x07D0 (0x020C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData05;                                    		// 0x09DC (0x020C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData06;                                    		// 0x0BE8 (0x0220) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData07;                                    		// 0x0E08 (0x0220) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData08;                                    		// 0x1028 (0x0224) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData09;                                    		// 0x124C (0x0240) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData10;                                    		// 0x148C (0x024C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData11;                                    		// 0x16D8 (0x0254) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData12;                                    		// 0x192C (0x0254) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData13;                                    		// 0x1B80 (0x03D4) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UDunDefGameStorage_FGameStorage             StorageData14;                                    		// 0x1F54 (0x03DC) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GameSaveVersion;                                  		// 0x2330 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39360 ];

		return pClassPointer;
	};

	void DumpStorage ( );
	void HelperClear ( );
};

UClass* UDunDefGameStorage::pClassPointer = NULL;

// Class UDKGame.DunDefMapInfo
// 0x02A0 (0x0334 - 0x0094)
class UDunDefMapInfo : public UMapInfo
{
public:
	unsigned long                                      IsGameplayLevel : 1;                              		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsLobbyLevel : 1;                                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IsLoadingLevel : 1;                               		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDontUseLobbyEquipments : 1;                      		// 0x0094 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCursorTrailParticles : 1;                        		// 0x0094 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDelayedStart : 1;                                		// 0x0094 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPreventPureStrategy : 1;                         		// 0x0094 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      NavigationShowPathTargets : 1;                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseSurvivalSpawnClamping : 1;                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseCustomLevelEntry : 1;                         		// 0x0094 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bForceHardcoreMode : 1;                           		// 0x0094 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDisableOgreSpawnRateClamping : 1;                		// 0x0094 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      PreventSplitscreenPlayers : 1;                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bForceSurvivalMode : 1;                           		// 0x0094 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bDisableVoiceChat : 1;                            		// 0x0094 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bMapOverrideDifficulty : 1;                       		// 0x0094 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bDisableCameraParticles : 1;                      		// 0x0094 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bReduceDjinns : 1;                                		// 0x0094 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bReduceSharken : 1;                               		// 0x0094 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bDoMissionTagOverride : 1;                        		// 0x0094 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bReduceCopters : 1;                               		// 0x0094 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bIgnoreDistantWyvernNavpoints : 1;                		// 0x0094 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bUseLobbyItemRecoveryBounds : 1;                  		// 0x0094 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bOverrideOverlordBounds : 1;                      		// 0x0094 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	int                                                WaveToStartAt;                                    		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTowerUnits;                                    		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AssaultEnemyTargetingDistanceLimit;               		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FEquipmentDropEntry >               AdditionalGlobalEquipmentDrops;                   		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentDropEntry >               AdditionalGlobalEquipmentDropsAfterVictoryEasy;   		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentDropEntry >               AdditionalGlobalEquipmentDropsAfterVictoryMedium; 		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentDropEntry >               AdditionalGlobalEquipmentDropsAfterVictoryHard;   		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentDropEntry >               AdditionalGlobalEquipmentDropsAfterVictoryInsane; 		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEquipmentDropEntry >               AdditionalGlobalEquipmentDropsAfterVictoryNightmare;		// 0x00E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            GameInfoClasses;                                  		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              EquipmentWeightingMultiplier;                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveScoreMultiplier;                              		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxNumberOfDroppedEquipment;                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DunDefMaxPlayers;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_GameSetup*                               GameSetupUITemplate;                              		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_MainMenu*                                MainMenuUITemplate;                               		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              CustomizeCoreScene;                               		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              SaveNotificationUITemplate;                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DefaultMissionObjectiveText;                      		// 0x0118 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LobbyLevelPreDescription;                         		// 0x0124 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UParticleSystem*                             FootstepImpactParticle;                           		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_GameStats*                               GameStatsUITemplate;                              		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      MaximumNumberOfEnemies;                           		// 0x0138 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      MaxNumberOfManaTokens;                            		// 0x0144 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    NumPlayerWaveTimeBonusMultipliers;                		// 0x0150 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                EquipmentQualityScalingMaxWave;                   		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquipmentRandomizerMultiplierScalingWave;         		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    NumPlayerWaveScoreBonusMultipliers;               		// 0x0164 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ADunDefEnemy* >                      MixEnemyArchetypes;                               		// 0x0170 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMixEnemyDifficultyThreshold >      MixEnemyDifficultyThresholds;                     		// 0x017C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEnemyAnimTreeOverride >            EnemyAnimTreeOverrides;                           		// 0x0188 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              EquipmentRandomizerMultiplierPercentageToUse;     		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NavigationUsedPathWeight;                         		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NavigationEnemySpread;                            		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FCampaignLevelEntry                         CustomLevelEntry;                                 		// 0x01A0 (0x0108) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AdditionalEnemySpeed;                             		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalEnemyHealth;                            		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalEnemyDamage;                            		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SurvivalEnemyNumbersIncreasePerWaveClamp;         		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SurvivalEnemyGroupsIncreasePerWaveClamp;          		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MapOverrideDifficulty;                            		// 0x02BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PIEDifficulty;                                    		// 0x02BD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    AssaultKillPhaseTimeLimits;                       		// 0x02C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      AssaultLivesRemainings;                           		// 0x02CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MissionTagOverride;                               		// 0x02D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              NightmareSurvivalOgreBoostScaler;                 		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IgnoreDistantWyvernNavpointDistance;              		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LobbyItemRecoveryMinBounds;                       		// 0x02EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LobbyItemRecoveryMaxBounds;                       		// 0x02F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LobbyItemRecoveryDestination;                     		// 0x0304 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverlordMinHeight;                                		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverlordMaxHeight;                                		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   OverlordMinXYBounds;                              		// 0x0318 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   OverlordMaxXYBounds;                              		// 0x0320 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCameraParticleInfo >               CameraParticles;                                  		// 0x0328 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39510 ];

		return pClassPointer;
	};

	int GetMaxPlayers ( );
	bool EnableVoiceChat ( class ADunDefBasePlayerController* aPC );
	bool AllowConsole ( );
};

UClass* UDunDefMapInfo::pClassPointer = NULL;

// Class UDKGame.DunDefDroppedItem
// 0x0008 (0x0224 - 0x021C)
class ADunDefDroppedItem : public AActor
{
public:
	class UParticleSystemComponent*                    MyParticleComponent;                              		// 0x021C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      DroppedByPlayer : 1;                              		// 0x0220 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39513 ];

		return pClassPointer;
	};

	void ServerPickedupBy ( class ADunDefPlayerController* PC );
};

UClass* ADunDefDroppedItem::pClassPointer = NULL;

// Class UDKGame.DunDefDroppedEquipment
// 0x0270 (0x0494 - 0x0224)
class ADunDefDroppedEquipment : public ADunDefDroppedItem
{
public:
	class UHeroEquipment*                              EquipmentTemplate;                                		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      OverlayDefaultColor;                              		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FColor >                            OverlayCanPickupColors;                           		// 0x022C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FColor                                      OverlayCantPickupClassColor;                      		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      OverlayCantPickupClassOutOfRangeColor;            		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FColor >                            OverlayCantPickupRangeColors;                     		// 0x0240 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInterface*                          PickupRecommendOverlayMaterial;                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GoodEquipmentOverlaySize;                         		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  PickupSelectionOverlayTexture;                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PickupSelectionOverlaySize;                       		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PickupSelectionOverlayOffsetY;                    		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisableCollisionTimer;                            		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PickupSelectionOpacityMultiplier;                 		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       ToolTipEquipmentMainNameFont;                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipEquipmentMainNameSize;                     		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DropSound;                                        		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PickedupSound;                                    		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TransferToItemBoxSound;                           		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MiniMapGoodEquipmentIcon;                         		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapGoodEquipmentIconColor;                    		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapNotGoodEquipmentIconColor;                 		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapGoodEquipmentIconSize;                     		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRandomizationQuality;                        		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationWeighting;                              		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NonPickupActivationWeighting;                     		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationOffset;                                 		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationString;                                 		// 0x029C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      ActivationStringColor;                            		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     AltActivationString;                              		// 0x02AC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      AltActivationStringColor;                         		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MythicalIconColor;                                		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      TranscendentIconColor;                            		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SupremeIconColor;                                 		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      UltimateIconColor;                                		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EquipmentMaterialName;                            		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          EquipmentInstanceMeshMaterial;                    		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraMeshScaleMultiplier;                         		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalMeshScale;                              		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentBottomOverlayOffsetPercent;              		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentTopOverlayOffsetPercent;                 		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentOverlayHeightBoundsCheck;                		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPrefab*                                   ToolTipOverlayPrefab;                             		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipDelay;                                     		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipDelayForCurrentEquipment;                  		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GoodEquipmentOverlayBounceAmount;                 		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GoodEquipmentOverlayBounceSpeed;                  		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      DroppedEquipmentSkelMeshComp;                     		// 0x0300 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  DroppedEquipmentLightEnvironmentComp;             		// 0x0304 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bUseDroppedEquipmentSkelMeshComp : 1;             		// 0x0308 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseMaterialEquipmentRating : 1;                  		// 0x0308 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseParticleScale : 1;                            		// 0x0308 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      DoFadeOut : 1;                                    		// 0x0308 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTransferredToItemBox : 1;                        		// 0x0308 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bAutoDestroyed : 1;                               		// 0x0308 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bDontPlaySpawnSound : 1;                          		// 0x0308 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      CountedInFloorStats : 1;                          		// 0x0308 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      drawOverlay : 1;                                  		// 0x0308 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	int                                                SkelMeshCompColorMICIndex;                        		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkelMeshRotationRate;                             		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumFireIntervalForOverlay;                    		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UHeroEquipment*                              MyEquipmentObject;                                		// 0x0318 (0x0004) [0x0000000000000000]              
	struct FEquipmentNetInfo                           ReplicatedEquipmentInfo;                          		// 0x031C (0x0120) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct FFontRenderInfo                             FontInfo;                                         		// 0x043C (0x0028) [0x0000000000000000]              
	float                                              LastOverlayDrawTime;                              		// 0x0464 (0x0004) [0x0000000000000000]              
	float                                              CurrentOverlayDrawOpacity;                        		// 0x0468 (0x0004) [0x0000000000000000]              
	float                                              LastToolTipDrawTime;                              		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              CurrentToolTipDrawOpacity;                        		// 0x0470 (0x0004) [0x0000000000000000]              
	int                                                DroppedByPlayerID;                                		// 0x0474 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GRIHostRandomID;                                  		// 0x0478 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInstanceConstant*                   MyMeshMaterialInstance;                           		// 0x047C (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    MyQualityFxComponent;                             		// 0x0480 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FColor >                            QualityFxComponentColours;                        		// 0x0484 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UParticleSystemComponent*                    MyCircleComponent;                                		// 0x0490 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39512 ];

		return pClassPointer;
	};

	bool AllowDroppedDestruction ( );
	bool IsLocallyDropped ( );
	int GetNumberOfDroppedEquipment ( );
	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	int DestroyAllDroppedEquipment ( unsigned long bDistributeMana );
	void FadeOut ( );
	float GetActivationOffset ( );
	float GetActivationWeighting ( );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	int AllowPickupByHero ( class UDunDefHero* hero, float MaxPickupRange, int activationType, unsigned long ignoreClassRequirement, int* reasonForDenial );
	void SetFXComponentVisibility ( int NewState );
	void ToggleBeamFX ( unsigned long Enabled );
	void ToggleCircleFX ( unsigned long Enabled );
	void RefreshQualityColor ( );
	void InitMyEquipmentObject ( unsigned long AddRandomValues, float RandomEquipmentQuality, class UHeroEquipment* CopyRandomizerValuesFromTemplate );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void InitializeDD ( );
	void eventDestroyed ( );
	void ReportEquipmentToStats ( );
	void AddToFloorStats ( );
	int ReorderQualityIndex ( int Quality );
	class ADunDefGameReplicationInfo* GetGRI ( );
	void PlayDroppedSound ( );
	void DisableCollision ( );
	void eventPostBeginPlay ( );
	void RotateSkelMesh ( );
	void eventReplicatedEvent ( struct FName VarName );
	void DrawEquipmentOverlay ( class ADunDefHUD* H, class UDunDefHero* hero, float MaxPickupRange );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	void ReplicatedMoveItem ( struct FVector Loc );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	int GetItemQualityFilterFromEquipment ( );
};

UClass* ADunDefDroppedEquipment::pClassPointer = NULL;

// Class UDKGame.UI_HeroInfo
// 0x000C (0x0648 - 0x063C)
class UUI_HeroInfo : public UDunDefUIScene
{
public:
	class UDunDefHero*                                 MyHero;                                           		// 0x063C (0x0004) [0x0000000000000000]              
	class ADunDefPlayer*                               myPlayer;                                         		// 0x0640 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsRemoteHero : 1;                                		// 0x0644 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39717 ];

		return pClassPointer;
	};

	void NotifyPhaseChange ( unsigned long IsCombatPhase );
	void InitializeForHero ( class UDunDefHero* hero, unsigned long IsRemoteHero );
	class ADunDefPlayer* GetOwnerPawn ( );
	class UDunDefHero* GetOwnerHero ( );
	class UDunDefHero* GetHero ( );
	class UDunDefHeroManager* GetHeroManager ( );
	void eventSceneDeactivated ( );
};

UClass* UUI_HeroInfo::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerReplicationInfo
// 0x0098 (0x0370 - 0x02D8)
class ADunDefPlayerReplicationInfo : public ANativeDunDefPlayerReplicationInfo
{
public:
	unsigned long                                      WantToSkipBuildPhase : 1;                         		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      InitializeAck : 1;                                		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      BroadcastLeftGameMessage : 1;                     		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bClientInitialized : 1;                           		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPossessedAnyPawn : 1;                            		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bHadPlayerJoined : 1;                             		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bPlayerReplicationInfoIsOld : 1;                  		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bPlayerReplicationInfoTransitioned : 1;           		// 0x02D8 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	struct FString                                     LevelUpMessageString;                             		// 0x02DC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      LevelUpMessageColor;                              		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ChangedNamesMessageString;                        		// 0x02EC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnteredGameMessageString;                         		// 0x02F8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      EnteredGameMessageColor;                          		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LeftGameMessageString;                            		// 0x0308 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      LeftGameMessageColor;                             		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     NewHeroMessageString;                             		// 0x0318 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewHeroMessageStringEnd;                          		// 0x0324 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      NewHeroMessageColor;                              		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DefaultHealthColor;                               		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PlayerJoinSound;                                  		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PlayerLeaveSound;                                 		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     muteString;                                       		// 0x0340 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	int                                                TargetingTeam;                                    		// 0x034C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LastTalkingTime;                                  		// 0x0350 (0x0004) [0x0000000000000000]              
	float                                              talkerOpacity;                                    		// 0x0354 (0x0004) [0x0000000000000000]              
	class UDunDefHero*                                 MyHero;                                           		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefPlayer*                               MyLastPlayer;                                     		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FsHeroBuffData >                    CustomBuffData;                                   		// 0x0360 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                DLCMask;                                          		// 0x036C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 39732 ];

		return pClassPointer;
	};

	void RemoveCustomBuffData ( struct FsHeroGUID HeroID, int BuffTemplateID );
	void AddCustomBuffData ( struct FsHeroGUID HeroID, struct FsBuffStorageData Data );
	bool GetCustomBuffData ( struct FsHeroGUID HeroID, int BuffTemplateID, struct FsBuffStorageData* Data );
	int GetTradeStatus ( class ADunDefPlayerReplicationInfo* requestingPRI );
	class ATradeManager* GetActiveTradeManager ( );
	void ServerSetTegraCompatibility ( unsigned long isCompatible );
	void ServerSetDLCMask ( int Mask );
	void DrawTalker ( class UCanvas* C, int Count, float Scale );
	void ReceivedPlayerActor ( class ADunDefPlayer* Player );
	void ClientInitialize ( class AController* C );
	struct FString GetOnlineName ( );
	struct FString GetHumanReadableNameTwoLines ( );
	struct FString GetHumanReadableName ( );
	struct FString GetHeroIconPath ( );
	struct FString GetHeroicName ( );
	void UpdatePlayerLocation ( );
	void eventTimer ( );
	void ClientTriggerEvent ( struct FName EventType, class AActor* TriggerInstigator, class AActor* TriggerEnemy, struct FString Params );
	void TriggerEvent ( struct FName EventType, class AActor* TriggerInstigator, class AActor* TriggerEnemy, struct FString Params );
	struct FColor GetHealthColor ( );
	class ADunDefPlayer* GetPlayer ( );
	bool IsInvalidName ( );
	void CleanMeUp ( );
	void eventDestroyed ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	void SetWantToSkipBuildPhase ( unsigned long WantToSkip );
	void ClientAddBuffToGame ( struct FsBuffNetInfo BuffInfo );
	void Client_UpdateRemoteHeroEquipment ( unsigned char equipmentIndex, struct FEquipmentNetInfo netInfo );
	void Client_RemoveRemoteHeroEquipment ( unsigned char equipmentIndex );
	void Client_AddRemoteHeroEquipment ( struct FEquipmentNetInfo netInfo, unsigned char atIndex );
	void Client_SetRemoteHero ( struct FHeroNetInfo netInfo );
	bool AllowSendRemoteHeroInfo ( class ADunDefPlayerController* PC );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void Server_AddBuff ( struct FsBuffNetInfo Info );
	void Server_UpdatedHeroEquipment ( unsigned char Index, struct FEquipmentNetInfo Info );
	void Server_RemovedHeroEquipment ( unsigned char Index );
	void Server_AddedHeroEquipment ( struct FEquipmentNetInfo Info, unsigned char Index );
	void SetHero ( class UDunDefHero* hero );
	void eventPostBeginPlay ( );
	void PrintHeroLevelUpMessage ( );
	void SetPlayerReplicationInfoIsOld ( );
	void PrintNewHeroMessage ( );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void NotifyNewPlayer ( );
	bool IsLoadingScreenVisible ( );
	void ReplicatedEvent ( struct FName VarName );
	bool PossessedAnyPawn ( );
	class UDunDefHero* GetHero ( );
	bool IsRootEntry ( );
	int GetFolderID ( );
	struct FString GetDataString ( int dataSetType );
	void GetDataProps ( int dataSetType, struct FDataEntryProps* dProps );
	bool GetEntryEnabled ( class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject );
};

UClass* ADunDefPlayerReplicationInfo::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Elemental
// 0x0004 (0x00D8 - 0x00D4)
class UDunDefDamageType_Elemental : public UDunDefDamageType
{
public:
	unsigned long                                      UseForRandomElementalDamage : 1;                  		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      UseForNotPoisonElementalDamage : 1;               		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40007 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Elemental::pClassPointer = NULL;

// Class UDKGame.DunDefEnemy
// 0x04CC (0x0CCC - 0x0800)
class ADunDefEnemy : public ADunDefPawn
{
public:
	float                                              GlobalEnemyDropQualityMultiplier;                 		// 0x0800 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIgnoreGlobalEnemyDropQualityMultiplier : 1;      		// 0x0804 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvincibleWhileSpawningIn : 1;                   		// 0x0804 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUnclampDifficultyHealthMultiplier : 1;           		// 0x0804 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUnclampDifficultySpeedMultiplier : 1;            		// 0x0804 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTopLayerMiniMapIcon : 1;                         		// 0x0804 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      DropEquipmentDuringBossFight : 1;                 		// 0x0804 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bScaleDroppedEquipmentWithLevel : 1;              		// 0x0804 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAffectWaveBonusDamageCauser : 1;                 		// 0x0804 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowDarkness : 1;                               		// 0x0804 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bZeroVelocityOnAttack : 1;                        		// 0x0804 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUseItemValuesForShop : 1;                        		// 0x0804 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bAttackForceClientZeroVelocity : 1;               		// 0x0804 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bIgnoreAllTowerDamage : 1;                        		// 0x0804 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bDontUseInvincibleRadius : 1;                     		// 0x0804 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bAllowTargetingWhileInvincible : 1;               		// 0x0804 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bClampDifficultyToInsane : 1;                     		// 0x0804 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bIgnoreTargetingCore : 1;                         		// 0x0804 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bForceKillCountSubtraction : 1;                   		// 0x0804 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bStumbleBackUponDeath : 1;                        		// 0x0804 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bForceDropEquipment : 1;                          		// 0x0804 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bInitiallyInvincible : 1;                         		// 0x0804 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bAllowBasingOnTowers : 1;                         		// 0x0804 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bNoRandomElementalEffect : 1;                     		// 0x0804 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      UseDjinnSpawnClamping : 1;                        		// 0x0804 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      UseSharkenSpawnClamping : 1;                      		// 0x0804 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      UseCopterSpawnClamping : 1;                       		// 0x0804 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bEvenlySpaceWaveSpawns : 1;                       		// 0x0804 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bDontEvenSpaceInMixMode : 1;                      		// 0x0804 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bDontUseStatsInSurvival : 1;                      		// 0x0804 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bUseSurvivalExtraDifficulty : 1;                  		// 0x0804 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bSetRelativeTransformOnDeath : 1;                 		// 0x0804 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bWroteSpawnedStat : 1;                            		// 0x0804 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bAllowInvincibility : 1;                          		// 0x0808 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowCoughing : 1;                               		// 0x0808 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowShocking : 1;                               		// 0x0808 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAllowEnsnare : 1;                                		// 0x0808 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAllowEnrage : 1;                                 		// 0x0808 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAddToEnemyCap : 1;                               		// 0x0808 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDropMana : 1;                                    		// 0x0808 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDropEquipment : 1;                               		// 0x0808 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowEnemyDrain : 1;                             		// 0x0808 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDontScaleUpOnSpawnIn : 1;                        		// 0x0808 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDoSpawnNotification : 1;                         		// 0x0808 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIgnoreStats : 1;                                 		// 0x0808 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bKillOnBuildPhase : 1;                            		// 0x0808 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      ScaleDownForDestruction : 1;                      		// 0x0808 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      NotifiedSpawnerOfDeath : 1;                       		// 0x0808 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      NotifiedStatsOfDeath : 1;                         		// 0x0808 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bPlayerCausedLastDamage : 1;                      		// 0x0808 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bFullySpawned : 1;                                		// 0x0808 (0x0004) [0x0000000000002020] [0x00020000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bWasEverInvincible : 1;                           		// 0x0808 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bInvincible : 1;                                  		// 0x0808 (0x0004) [0x0000000000000020] [0x00080000] ( CPF_Net )
	unsigned long                                      bIsPureStrategy : 1;                              		// 0x0808 (0x0004) [0x0000000000000020] [0x00100000] ( CPF_Net )
	unsigned long                                      bWasInvincible : 1;                               		// 0x0808 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      DrawHealthBar : 1;                                		// 0x0808 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      IsPlayerAlly : 1;                                 		// 0x0808 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bForceFriendlyFire : 1;                           		// 0x0808 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bForceInvincible : 1;                             		// 0x0808 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bNetworkReliableAttackAnimations : 1;             		// 0x0808 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bProcessedFromRPC : 1;                            		// 0x0808 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bIgnoreDifficultyScaling : 1;                     		// 0x0808 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bUseEnemyGlobalMultipliers : 1;                   		// 0x0808 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bDoMaterialModificationOnDeath : 1;               		// 0x0808 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bClearAttachmentsOnDeath : 1;                     		// 0x0808 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bNoDrawMiniMapIcon : 1;                           		// 0x080C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bGolded : 1;                                      		// 0x080C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUseGoldIcon : 1;                                 		// 0x080C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      CountedAsAlive : 1;                               		// 0x080C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      CountedAsDead : 1;                                		// 0x080C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bAllowSlowByHero : 1;                             		// 0x080C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowWeakenByHero : 1;                           		// 0x080C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      IsStunned : 1;                                    		// 0x080C (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	TArray< struct FEnemyElementalEntry >              ElementalEntries;                                 		// 0x0810 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FElementalDamageModifier >          ElementalDamageModifiers;                         		// 0x081C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                UseElementalEntry;                                		// 0x0828 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	TArray< struct FName >                             AttackAnimations;                                 		// 0x082C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefEnemyController*                      AIControllerTemplate;                             		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     DestructionEffectTemplate;                        		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USoundCue* >                         AttackSounds;                                     		// 0x0840 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              EnemyLifeSpan;                                    		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClientMaxStepHeight;                              		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyNetUpdateFrequency;                          		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyNetPriority;                                 		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementalChanceMultiplier;                        		// 0x085C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinCoughInterval;                                 		// 0x0860 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyPlayerFavoringMultiplier;                    		// 0x0864 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackAnimSpeedMultiplier;                        		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MinimumDifficultyForRandomElementalEffect;        		// 0x086C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MyClassification;                                 		// 0x086D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DescriptiveName;                                  		// 0x0870 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       AnimCough;                                        		// 0x087C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimShock;                                        		// 0x0884 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             MyAudioComponent;                                 		// 0x088C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FEquipmentDropEntry >               CustomEquipmentDrops;                             		// 0x0890 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyOffsetMultipliers;                      		// 0x089C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CustomEquipmentDropChanceThreshold;               		// 0x08A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomEquipmentDropValueMin;                      		// 0x08AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomEquipmentDropValueMax;                      		// 0x08B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInvincibilityDrawDistance;                     		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomEquipmentDropQuality;                       		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumCustomEquipmentDropChances;                    		// 0x08BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalEquipmentDropChanceThreshold;               		// 0x08C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalEquipmentDropValueMin;                      		// 0x08C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraNightmareHealthMultiplier;                   		// 0x08C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalEquipmentDropValueMax;                      		// 0x08CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InvincibilityExpirationTime;                      		// 0x08D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDifficultySpeedMultiplier;                     		// 0x08D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalEquipmentDropQuality;                       		// 0x08D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxElementalEffectDistance;                       		// 0x08DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitialInvincibilityTimeOut;                      		// 0x08E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareDamageMultiplier;                        		// 0x08E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumGlobalEquipmentDropChances;                    		// 0x08E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                KillCountMultiplier;                              		// 0x08EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxWaveEquipmentQualityMultiplier;                		// 0x08F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquipmentQualityMultiplierMaxWave;                		// 0x08F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomEnemyTag;                                   		// 0x08F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SurvivalPartOneWaveTreshold;                      		// 0x08FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SurvivalPartTwoWaveTreshold;                      		// 0x0900 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbsoluteMaxEquipmentDropQuality;                  		// 0x0904 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackForceClientZeroVelocityInterpSpeed;         		// 0x0908 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SurvivalPartOneDifficultyMultiplier;              		// 0x090C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SurvivalPartTwoDifficultyMultiplier;              		// 0x0910 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGroundSpeed;                                   		// 0x0914 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StumbleBackDeathVelocity;                         		// 0x0918 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    DifficultyEquipmentRarityWeightings;              		// 0x0924 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyEquipmentQualityMultipliers;            		// 0x0930 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultySpeedMultipliers;                       		// 0x093C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyHealthMultipliers;                      		// 0x0948 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyDamageMultipliers;                      		// 0x0954 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    ExtraDifficultyHealthMultipliers;                 		// 0x0960 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    ExtraDifficultyDamageMultipliers;                 		// 0x096C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyManaMultipliers;                        		// 0x0978 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyScoreMultipliers;                       		// 0x0984 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultySetWaveOffsetThresholds;                		// 0x0990 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    NumPlayerHealthMultipliers;                       		// 0x099C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    GoldenEnemyDifficultyOffset;                      		// 0x09A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaxDifficultySets;                                		// 0x09B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnClumpAbsoluteAmount;                         		// 0x09B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnClumpMaximumAmount;                          		// 0x09BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      MaxSimultaneousAllowedForPlayers;                 		// 0x09C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                DifficultySetOffset;                              		// 0x09CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinimumStartWaveDifferenceForEquipment;           		// 0x09D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveAroundMeMaximumSpeed;                         		// 0x09D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnClumpRelativePercent;                        		// 0x09D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalDropChanceThresholdMultiplier;              		// 0x09DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DifficultySetWaveOffset;                          		// 0x09E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutOriginalMeshDrawScale;                     		// 0x09E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeOutDrawScalePercent;                          		// 0x09E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCoughTime;                                    		// 0x09EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AnotherExtraStrengthMultiplier;                   		// 0x09F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             InvincibilityEffectTemplate;                      		// 0x09F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InvincibilityEffectScale;                         		// 0x09F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InvincibilityEffectSocket;                        		// 0x09FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ElementalEffectSocket;                            		// 0x0A04 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifeSpanAfterDeath;                               		// 0x0A0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackAllowanceInterval;                       		// 0x0A10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNightmareMomentumMagnitude;                    		// 0x0A14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutAfterDeathDelay;                           		// 0x0A18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeLevelIconSize;                             		// 0x0A1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthBarEnemyIconSize;                           		// 0x0A20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                DifficultyMaterials;                              		// 0x0A24 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      MeshDifficultyMaterialIndices;                    		// 0x0A30 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFont*                                       HealthBarNumbersFont;                             		// 0x0A3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        difficultyIcons;                                  		// 0x0A40 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefEnemy*                                RelatedArchetype;                                 		// 0x0A4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    InvincibilityEffect;                              		// 0x0A50 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ElementalParticleEffect;                          		// 0x0A54 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              HealthBarWidth;                                   		// 0x0A58 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthBarHeight;                                  		// 0x0A5C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  StatIcon;                                         		// 0x0A60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Variance_MovementSpeedPercent;                    		// 0x0A64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Variance_FatnessPercent;                          		// 0x0A68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Variance_HeightPercent;                           		// 0x0A6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Variance_ColorPercent;                            		// 0x0A70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Variance_NumColors;                               		// 0x0A74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    VarianceGlobalIntensities;                        		// 0x0A78 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     HealthBarScreenPosOffset;                         		// 0x0A84 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnInScaleTime;                                 		// 0x0A90 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ADunDefEmitterSpawnable* >           SmallHurtEffectTemplate_DifficultyOverrides;      		// 0x0A94 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ADunDefEmitterSpawnable* >           DeathEffectTemplate_DifficultyOverrides;          		// 0x0AA0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefEmitterSpawnable*                     DeathEffectTemplate;                              		// 0x0AAC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SpawnNotificationColor;                           		// 0x0AB0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SpawnNotificationSound;                           		// 0x0AC0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SpawnNotificationString;                          		// 0x0AC4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SpawnNotiifcationHideTime;                        		// 0x0AD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VariedColorMIC;                                   		// 0x0AD4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         VarianceColorMICS;                                		// 0x0AD8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     ReplicatedDrawScale;                              		// 0x0AE4 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     OriginalMeshTranslation;                          		// 0x0AF0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastAttackAnimation;                              		// 0x0AFC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastKnockedBackTime;                              		// 0x0B00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       EnemyPathName;                                    		// 0x0B04 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      DiedDamageCauser;                                 		// 0x0B0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDef_SeqAct_EnemyWaveSpawner*             WaveSpawner;                                      		// 0x0B10 (0x0004) [0x0000000000000000]              
	int                                                InvincibleEffectCounter;                          		// 0x0B14 (0x0004) [0x0000000000000000]              
	int                                                TeamIndex;                                        		// 0x0B18 (0x0004) [0x0000000000000000]              
	int                                                difficultyIndex;                                  		// 0x0B1C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ADunDefEnemyController*                      MyCreator;                                        		// 0x0B20 (0x0004) [0x0000000000000000]              
	float                                              HealthBarScale;                                   		// 0x0B24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HealthBarPositionOffset;                          		// 0x0B28 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HealthyColor;                                     		// 0x0B34 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     UnhealthyColor;                                   		// 0x0B40 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthBarPositionHeightScale;                     		// 0x0B4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        MiniMapIconTextures;                              		// 0x0B50 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  MiniMapGoldIconTexture;                           		// 0x0B5C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSize;                                  		// 0x0B60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementalIconSize;                                		// 0x0B64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GoldMiniMapIconSizeMultiplier;                    		// 0x0B68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconColor;                                 		// 0x0B6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconColorDead;                             		// 0x0B70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconHurtColor;                             		// 0x0B74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalDifficultyOffsetDamageMultiplier;       		// 0x0B78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalDifficultyOffsetHealthMultiplier;       		// 0x0B7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalDifficultyOffsetSpeedMultiplier;        		// 0x0B80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      lastDamageCauser;                                 		// 0x0B84 (0x0004) [0x0000000000000000]              
	float                                              MiniMapIconOpacity;                               		// 0x0B88 (0x0004) [0x0000000000000000]              
	float                                              DifficultyDamageMultiplier;                       		// 0x0B8C (0x0004) [0x0000000000000000]              
	float                                              DifficultySpeedMultiplier;                        		// 0x0B90 (0x0004) [0x0000000000000000]              
	float                                              DifficultyHealthMultiplier;                       		// 0x0B94 (0x0004) [0x0000000000000000]              
	int                                                TargetingTeam;                                    		// 0x0B98 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     ReplicatedStumbleBackDeathVelocity;               		// 0x0B9C (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     SpawnLocation;                                    		// 0x0BA8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      TrueDamageCauser;                                 		// 0x0BB4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 TrueKiller;                                       		// 0x0BB8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       OnDeathMateralParamName;                          		// 0x0BBC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              OnDeathMatInterpTime;                             		// 0x0BC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInstanceConstant* >         DeathMaterialMICs;                                		// 0x0BC8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                HighestProxDamage;                                		// 0x0BD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 HighProxDamageController;                         		// 0x0BD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      HighProxDamageCauser;                             		// 0x0BDC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FActorLevelUpStatModifier                   enemyStats[ 0x7 ];                                		// 0x0BE0 (0x00E0) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FActorLevelUpStatModifier >         CurrentActorLevelUpStatModifiers;                 		// 0x0CC0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40039 ];

		return pClassPointer;
	};

	void OnBuffRemoved ( class UObject* BuffRemoved );
	void OnBuffAdded ( class UObject* BuffAdded );
	float GetStatModifier ( unsigned char levelUpValue, unsigned long onlyReturnBaseValue );
	bool GetActorLevelUpStatModifier ( unsigned char Type, struct FActorLevelUpStatModifier* Modifier );
	void SetActorLevelUpStatModifier ( unsigned char Type, struct FActorLevelUpStatModifier Modifier );
	float CalculateStatValue ( float BaseValue, struct FActorLevelUpStatModifier* Modifier );
	void GetBuffedStatValue ( unsigned char levelUpValue, unsigned long bAdditivePass, float* buffVal );
	void RemoveStatusEffect ( unsigned char Status );
	void AddStatusEffect ( unsigned char Status );
	void SetGolded ( );
	void TimedEffectStun ( class UDunDefBuff* Effect );
	void ChangedGamePhases ( unsigned long IsCombatPhase );
	bool UseMaxSimultaneousAllowedForPlayers ( class ADunDefEnemy* anEnemyTemplate );
	void ClearAnotherExtraStrengthMultiplier ( );
	void ClearAnotherExtraMovementSpeedMultiplier ( );
	bool AllowEnemyDrain ( );
	unsigned char GetEnemyClassification ( );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	bool AllowObstructionJump ( );
	bool ShouldBlockPlayerAim ( class APlayerController* PC );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void BumpedATarget ( class UDunDefTargetableInterface* aTarget );
	int GetScoreWorth ( );
	int GetEnemyDifficulty ( class ADunDefEnemy* EnemyTemplate, float difficultyOffset );
	class UTexture2D* GetEnemyIconTexture ( class ADunDefEnemy* EnemyTemplate, int difficultyOverride );
	void eventBaseChange ( );
	bool AllowWeaken ( );
	bool AllowSlowByHero ( );
	bool AllowEnrage ( );
	bool AllowEnsnare ( );
	void GameOver ( );
	void EnableDarkness ( );
	float GetElementalDamageModifier ( );
	void ClearElementalEffect ( );
	bool IsElementalEnemy ( );
	class UTexture2D* GetMiniMapIconTexture ( );
	struct FColor GetMiniMapIconColor ( );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void DelayedTurnOffSkelUpdating ( );
	void ForceSkelUpdatingDelayTurnOff ( unsigned long Force, float delayTurnOff );
	void ForceSkelUpdating ( unsigned long Force, unsigned long bOnlyForceTickAnimNodes );
	struct FVector GetMeleeSwingLocation ( );
	void PlayDestructionEffects ( );
	void SpawnDroppedEquipment ( );
	void Cough ( );
	void StopCoughingAnimation ( struct FName AnimName );
	void StartCoughingAnimation ( struct FName AnimName );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void SetTrueDamageCauser ( class AActor* dmgCauser, class AController* Killer );
	void SetDiedDamageCauser ( class AActor* DamageCauser );
	struct FString GetDescriptiveName ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void SpawnDefaultController ( );
	bool IsCurrentlyPlayingAttackAnimation ( );
	float PlayAttackAnimationWithLocation ( struct FVector TheLocation );
	float PlayAttackAnimation ( );
	float GetAttackAnimSpeedMultiplier ( );
	void ClientCheckAttackAnimationForZero ( unsigned long bForceStop );
	void EnemyExpired ( );
	void eventDestroyed ( );
	void eventStartedAttack ( );
	void eventEndedAttack ( );
	float GetPawnDamageModifier ( unsigned long bDontIncludeAbilities );
	int UpdateDifficultyMaterial ( );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum );
	class UClass* GetElementalDamageType ( );
	void InitializeElementalEffects ( unsigned long ForceNoRandomization );
	void SetElementalEffect ( class UClass* ElementalDamageType );
	void SpawnManaTokens ( class ADunDefPawn* theInstigator, class AActor* fromActor, class ADunDefPlayer* InitialAttractor, unsigned long bIsPrivate );
	void UpdateSpeed ( );
	void UpdateMaxHealth ( unsigned long bSetHealthToMax );
	void UpdateDifficultyValues ( unsigned long UpdateMaterial, unsigned long onlyDynamicMultipliers );
	void InitializeDD ( );
	int GetDifficultyWaveOffset ( float waveOffset, float* leftOverOffset );
	void UpdateVariedColorMIC ( int Value, int theDifficultyIndex );
	class ADunDefEnemy* GetArchetype ( );
	void RemoveEnemySpawnCollision ( );
	void CheckAlive ( );
	void eventPostBeginPlay ( );
	void CheckForCombatStatBuffer ( );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void OnPostBeginPlay_AddToTargetableList ( );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	bool IgnoreFriendlyFireDamage ( class UDunDefTargetableInterface* instigatorActor, class AController* OptionalController );
	int GetTargetingTeam ( );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	bool ForceFriendlyFire ( class AActor* Target );
	void SetEnraged ( unsigned long bActive );
	void DealHighestProxDamage ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	bool IsInitiallyInvincible ( );
	void InvincibilityEffectFinished ( class UParticleSystemComponent* PSystem );
	void SetInvincible ( unsigned long invinc, unsigned long ChangeForceInvincible, unsigned long ForceInvincible, unsigned long ForceNotInvincible );
	void DisableInvincibility ( );
	void SetCreator ( class ADunDefEnemyController* C );
	void DrawUpgradeIcons ( class ADunDefHUD* H, float IconDistanceScale, struct FVector ScreenPos, float YOffset, float Opacity );
	void DoDrawHealthBar ( class ADunDefHUD* H, float Opacity );
	int GetScoreSwitch ( );
	class UMaterialInstanceConstant* GetHealthBarMIC ( class ADunDefPlayerController* PC );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefEnemy::pClassPointer = NULL;

// Class UDKGame.DunDefTreasureChest
// 0x0110 (0x032C - 0x021C)
class ADunDefTreasureChest : public AActor
{
public:
	TArray< struct FEquipmentDropEntry >               CustomEquipmentDrops;                             		// 0x021C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CustomEquipmentDropChanceThreshold;               		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomEquipmentDropValueMin;                      		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomEquipmentDropValueMax;                      		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomEquipmentDropQuality;                       		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumCustomEquipmentDropChances;                    		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalEquipmentDropChanceThreshold;               		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalEquipmentDropValueMin;                      		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalEquipmentDropValueMax;                      		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalEquipmentDropQuality;                       		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeAwaySpeedScale;                               		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeAwayDelayTime;                                		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceSpawnTreasureDelay;                          		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumGlobalEquipmentDropChances;                    		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SurvivalSkippingManaTokenAmount;                  		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxWaveEquipmentQualityMultiplier;                		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquipmentQualityMultiplierMaxWave;                		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbsoluteMaxEquipmentDropQuality;                  		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDropEquipmentAngle;                            		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDropManaAngle;                                 		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalEquipmentRarityWeighting;               		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveSkippingManaIncreaseFactor;                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreGlobalTreasureChestDropQualityMultiplier : 1;		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseItemValuesForShop : 1;                        		// 0x027C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceDropEquipment : 1;                          		// 0x027C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseNightmareValues : 1;                          		// 0x027C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      NoSpawnInEffect : 1;                              		// 0x027C (0x0004) [0x0000000000000021] [0x00000010] ( CPF_Edit | CPF_Net )
	unsigned long                                      bOpened : 1;                                      		// 0x027C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDoSpawnTreasure : 1;                             		// 0x027C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bPlayedFadeAwayEffect : 1;                        		// 0x027C (0x0004) [0x0000000000000000] [0x00000080] 
	int                                                TreasureChestID;                                  		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareAbsoluteMaxEquipmentDropQuality;         		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareGlobalEquipmentDropQuality;              		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalTreasureChestDropQualityMultiplier;         		// 0x028C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ADunDefManaToken*                            SmallManaTokenTemplate;                           		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            MinorManaTokenTemplate;                           		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            LargeManaTokenTemplate;                           		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            SuperManaTokenTemplate;                           		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefManaToken*                            DuperManaTokenTemplate;                           		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaTokenImpulseMagnitude;                        		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaTokenTorqueMagnitude;                         		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ManaTokenImpulseUpOffset;                         		// 0x02AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ManaTokenPositionUpOffset;                        		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    DifficultyEquipmentQualityMultipliers;            		// 0x02C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyManaMultipliers;                        		// 0x02D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefEmitterSpawnable*                     SpawnInEffectTemplate;                            		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     FadeWayEffectTemplate;                            		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     SpawnTreasureEffectTemplate;                      		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinMana;                                          		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxMana;                                          		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimNodeName;                               		// 0x02F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      TreasureChestMeshComp;                            		// 0x02F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x02FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       OpenTreasureAnimName;                             		// 0x0300 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MiniMapIconTexture;                               		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSize;                                  		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconColor;                                 		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadingAwayStartTime;                              		// 0x0314 (0x0004) [0x0000000000000000]              
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                   		// 0x0318 (0x0004) [0x0000000000000000]              
	class ADunDefPlayer*                               OpenedByPlayer;                                   		// 0x031C (0x0004) [0x0000000000000000]              
	struct FRotator                                    ReplicatedRotation;                               		// 0x0320 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40040 ];

		return pClassPointer;
	};

	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	void SpawnDroppedEquipment ( );
	void SpawnManaTokens ( );
	void eventSpawnTreasure ( );
	void eventTornOff ( );
	void FadeAway ( );
	void eventPauseAnimation ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void PlayOpening ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	class ADunDefGameReplicationInfo* GetGRI ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefTreasureChest::pClassPointer = NULL;

// Class UDKGame.UI_ItemBox
// 0x01D0 (0x080C - 0x063C)
class UUI_ItemBox : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           EquipmentDataList;                                		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIDataContainer_Equipment_DataList*         EquipmentDataListContainer;                       		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   RemoveEquipmentButton;                            		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   TransferToHeroButton;                             		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SellEquipmentButton;                              		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   EquipmentInfoButton;                              		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   BackButton;                                       		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   LockItemButton;                                   		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   LockAllButton;                                    		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   UnlockAllButton;                                  		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SellAllButton;                                    		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ViewTradeButton;                                  		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   AddToPlayerShop;                                  		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   AddToDefenderStore;                               		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   TradeHelper;                                      		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   GamepadMoveToFolderButton;                        		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SetActiveFolderbutton;                            		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIResolutionContainer*                      ResolutionContainerToResize;                      		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TradeModeScalarValue;                             		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   MainExtentsWidget;                                		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInTradeMode : 1;                                 		// 0x068C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPlayedShowItemBoxUI : 1;                         		// 0x068C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsPlayerShop : 1;                                		// 0x068C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowingDeletionConfirmation : 1;                 		// 0x068C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDontCancelDeletion : 1;                          		// 0x068C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsInLobby : 1;                                   		// 0x068C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsFolderRenaming : 1;                            		// 0x068C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsFolderCreating : 1;                            		// 0x068C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bCtrlDown : 1;                                    		// 0x068C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	class UUIButton*                                   CreateFolder;                                     		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   UpFolder;                                         		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   RenameFolder;                                     		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DeleteFolder;                                     		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EquipmentInfo*                           EquipmentInfoUITemplate;                          		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MoveEquipmentSound;                               		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SellSound;                                        		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SellAllSound;                                     		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   LockSound;                                        		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   UnlockSound;                                      		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AddItemToTradeSound;                              		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   RemoveItemFromTradeSound;                         		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   NavigateToFolderSound;                            		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ItemDraggedSoundCue;                              		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FolderDraggedSoundCue;                            		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DeleteFolderSoundCue;                             		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BankedManaLabel;                                  		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ItemCountLabel;                                   		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LockItemColor;                                    		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      UnlockItemColor;                                  		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShowItemBoxUI;                                    		// 0x06E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HideItemBoxUI;                                    		// 0x06E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LockItemString;                                   		// 0x06F0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnlockItemString;                                 		// 0x06FC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ViewTradeString;                                  		// 0x0708 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MoveItemUpString;                                 		// 0x0714 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MoveItemIntoFolderString;                         		// 0x0720 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUI_EditboxPopup*                            NewFolderEditBoxPopupTemplate;                    		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EditboxPopup*                            RenameFolderEditBoxPopupTemplate;                 		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ItemCountColorFull;                               		// 0x0734 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ItemCountColorRegular;                            		// 0x0744 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ItemPath;                                         		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UHeroEquipment*                              NextRefreshSelectedEntry;                         		// 0x0758 (0x0004) [0x0000000000000000]              
	class UUIButton*                                   CancelDeletionButton;                             		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmDeletionButton;                            		// 0x0760 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   UseInTradeButton;                                 		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   DeletionPanel;                                    		// 0x0768 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DeletionEquipmentNameLabel;                       		// 0x076C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIObject* >                         ConfirmationButtons;                              		// 0x0770 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AnimShowDeletionConfirmation;                     		// 0x077C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimHideDeletionConfirmation;                     		// 0x0784 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     AllItemsString;                                   		// 0x078C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SellAllInLobbyString;                             		// 0x0798 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SellInLobbyString;                                		// 0x07A4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddToTradeString;                                 		// 0x07B0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RemoveFromTradeString;                            		// 0x07BC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SetActiveFolderString;                            		// 0x07C8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClearActiveFolderString;                          		// 0x07D4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      AddToTradeColor;                                  		// 0x07E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      RemoveFromTradeColor;                             		// 0x07E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Combobox*                    CB_SortingFilter;                                 		// 0x07E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FocusCounter;                                     		// 0x07EC (0x0004) [0x0000000000000000]              
	int                                                DeletionReason;                                   		// 0x07F0 (0x0004) [0x0000000000000000]              
	int                                                UserID;                                           		// 0x07F4 (0x0004) [0x0000000000000000]              
	class UUI_EditboxPopup*                            FolderNaming;                                     		// 0x07F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FolderIDToRename;                                 		// 0x07FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SyncItemsTimer;                                   		// 0x0800 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SaveUpdateTimer;                                  		// 0x0804 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveTransferFolderID;                           		// 0x0808 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40192 ];

		return pClassPointer;
	};

	void NotifySelectionChanged ( int selectedElementIdx );
	bool OnInterceptedInputKey ( struct FInputEventParameters* EventParms );
	void MovePageToFolder ( int FolderID, unsigned long isPlayerShop );
	void AddPageToTrade ( );
	void eventUpdate ( float DeltaTime );
	void NotifyEquipmentChanged ( );
	void UpdateItemPath ( );
	void RefreshedList ( );
	void RefreshEquipmentList ( int forUserID );
	bool EntryEnabledCheck ( class UDataListEntryInterface* dataEntry );
	void EquipmentEntrySelected ( class UUIButton_DataListEntry* Button );
	class UDunDefHero* GetHero ( );
	void GetNextRefreshButton ( );
	void SellSelectedItem ( );
	void SellAll ( );
	void UnlockedAll ( );
	void LockedAll ( );
	void CancelDeletion ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void NotifyDraggedEvent ( class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn );
	bool SupportsDraggedOntoItem ( class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn );
	void eventEditBoxPopUpCompleted ( struct FString EditBoxResult );
	void CreateNewFolder ( );
	void DeleteFolderByID ( int FolderID );
	void RenameFolderByID ( int FolderID );
	void MoveUpAFolder ( );
	void ItemUpdateOccured ( class UHeroEquipment* InEquipment );
	void FolderUpdateOccured ( int FolderID, int ParentID, struct FString FolderName );
	void FolderDeletionOccured ( int FolderID );
	void ToggleInTrade ( );
	void AddToTrade ( );
	bool AllowOverlays ( );
	void PostInitialSceneUpdate ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
};

UClass* UUI_ItemBox::pClassPointer = NULL;

// Class UDKGame.PlayerShopManager
// 0x003C (0x0258 - 0x021C)
class APlayerShopManager : public AActor
{
public:
	TArray< class UHeroEquipment* >                    RemotePlayerShopEntries;                          		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FItemFolder >                       RemoteShopFolders;                                		// 0x0228 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      InitializeAck : 1;                                		// 0x0234 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bAtMaxItemLimit : 1;                              		// 0x0234 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	class USoundCue*                                   BoughtEquipmentSound;                             		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_PlayerShop*                              PlayerShopUITemplate;                             		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemotePlayerShopUIPopupDelay;                     		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefPlayerReplicationInfo*                ShopOwnerPlayerReplicationInfo;                   		// 0x0244 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FHighDigitInt                               ShopMana;                                         		// 0x0248 (0x0010) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40258 ];

		return pClassPointer;
	};

	int GetNumberOfPlayerShopItems ( );
	void ClearPendingPurchases ( );
	void ClientAttemptPurchase ( int EquipmentID1, int EquipmentID2 );
	void ClientPurchaseAuthorized ( int EquipmentID1, int EquipmentID2 );
	void ServerRequestedPurchase ( class ADunDefPlayerController* fromPC, int EquipmentID1, int EquipmentID2 );
	void ServerCompletedPurchase ( class ADunDefPlayerController* fromPC, int EquipmentID1, int EquipmentID2 );
	void ServerExecCommand ( class ADunDefPlayerController* fromPC, struct FName CommandName, struct FName nameParam1, struct FName nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, struct FVector vecParam1, struct FVector VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2 );
	void ClientExecCommand ( struct FName CommandName, struct FName nameParam1, struct FName nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, struct FVector vecParam1, struct FVector VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2 );
	void LocalSetFolderSellAmount ( class UItemFolderStub* folder, struct FHighDigitInt Amount );
	void LocalSetItemSellAmount ( class UHeroEquipment* anEquipment, struct FHighDigitInt SellAmount );
	void RefreshPlayershops ( );
	void ClientRemoveEquipmentData ( struct FEquipmentNetInfo* equipmentInfo );
	void ClientAddOrUpdateEquipmentData ( int SellAmountLow, int SellAmountHigh, struct FEquipmentNetInfo* equipmentInfo );
	void ClientProcessEquipmentManualReplication ( int AdditionalData1, int AdditionalData2, int AdditionalData3, struct FEquipmentNetInfo* equipmentInfo );
	void ServerFolderDeleted ( int FolderID );
	void ServerFolderUpdated ( int FolderID, int ParentFolderID, struct FString FolderName );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void ShowPlayerShopUI ( );
	void ClientDeleteFolder ( int FolderID );
	void ClientSetupFolder ( int FolderID, int ParentFolderID, struct FString FolderName );
	void RefreshItems ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void LocalRemoveItem ( class UHeroEquipment* anEquipment );
	void LocalAddItem ( class UHeroEquipment* anEquipment, unsigned long bDontAdd );
	class APlayerShopManager* GetPlayerShopManager ( );
	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
	void eventTick ( float DeltaTime );
	void eventPostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* APlayerShopManager::pClassPointer = NULL;

// Class UDKGame.UI_ForgeMenu
// 0x0068 (0x06A4 - 0x063C)
class UUI_ForgeMenu : public UDunDefUIScene
{
public:
	class UUIButton*                                   HeroInfoButton;                                   		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ItemBoxButton;                                    		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SwapHeroButton;                                   		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CloseButton;                                      		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_ItemBox*                                 ItemBoxUISceneTemplate;                           		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_SwapHero*                                SwapHeroUISceneTemplate;                          		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HideForgeAnimation;                               		// 0x0654 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShowForgeAnimation;                               		// 0x065C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             LevelUpAvailablePanel;                            		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelUpAvailableAnimation;                        		// 0x0668 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StopLevelUpAvailableAnimation;                    		// 0x0670 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BankManaLabel;                                    		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PlayerManaLabel;                                  		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   IncreaseBankButton;                               		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaChangeRate;                                   		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaInvestmentInterval;                           		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayedShowForgeUI : 1;                           		// 0x068C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPlayedLevelUpAvailableAnimation : 1;             		// 0x068C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      Incrementing : 1;                                 		// 0x068C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFadingIn : 1;                                    		// 0x068C (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                bankedMana;                                       		// 0x0690 (0x0004) [0x0000000000000000]              
	class UUIObject*                                   lastFocusedButton;                                		// 0x0694 (0x0004) [0x0000000000000000]              
	float                                              Timer;                                            		// 0x0698 (0x0004) [0x0000000000000000]              
	float                                              ManaInvestmentTimer;                              		// 0x069C (0x0004) [0x0000000000000000]              
	int                                                LastBankedMana;                                   		// 0x06A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40472 ];

		return pClassPointer;
	};

	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void CloseForgeUI ( class ULocalPlayer* ForPlayer );
	class UDunDefHero* GetHero ( );
	int GetPlayerMana ( );
	void UpdateManaToBank ( float DeltaTime );
	void UpdateBanking ( float DeltaTime );
	void eventUpdate ( float DeltaTime );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
};

UClass* UUI_ForgeMenu::pClassPointer = NULL;

// Class UDKGame.UI_Shop
// 0x018C (0x0830 - 0x06A4)
class UUI_Shop : public UUI_ForgeMenu
{
public:
	class UUIButton*                                   RespecButton;                                     		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ExpBonusButton;                                   		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   RenameHeroButton;                                 		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ItemShopButton;                                   		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ServicesButton;                                   		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   BuyManaButton;                                    		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CreateTokenButton;                                		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      LockButton;                                       		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          medBagButton;                                     		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          largeBagButton;                                   		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          superBagButton;                                   		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    RespecFailureLabel;                               		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ExpBonusFailureLabel;                             		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    RenameHeroFailureLabel;                           		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   ServicesPanel;                                    		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   ItemShopPanel;                                    		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                PurchaseEnabledColor;                             		// 0x06E4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                PurchaseDisabledColor;                            		// 0x06F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EditboxPopup*                            EditBoxPopupTemplate;                             		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EditboxPopup*                            CreateTokenEditBoxPopupTemplate;                  		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIScriptWidget_Button* >            EquipmentItemButtons;                             		// 0x070C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    EquipmentTest_Familiars;                          		// 0x0718 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    EquipmentTest_Weapons;                            		// 0x0724 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    EquipmentTest_Armors;                             		// 0x0730 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIDataContainer_Equipment_DataList*         EquipmentDataListContainer;                       		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel_DataList*                           EquipmentDataList;                                		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      ItemInfoButton;                                   		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      BuyItemButton;                                    		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EquipmentInfo*                           EquipmentInfoUITemplate;                          		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EquipmentInfo*                           EquipmentInfoUITemplateWide;                      		// 0x0750 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BuyItemSound;                                     		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BuyManaSound;                                     		// 0x0758 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TabPageSound;                                     		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   LockSound;                                        		// 0x0760 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   UnlockSound;                                      		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BankDescriptionLabel;                             		// 0x0768 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    LargeBankManaLabel;                               		// 0x076C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    LargeBankManaDescriptionLabel;                    		// 0x0770 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   TavernPanel;                                      		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   ItemShopImageBG;                                  		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   ServicesImageBG;                                  		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_PlayerShop*                              PlayerShopUISceneTemplate;                        		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      PlayerShopButton;                                 		// 0x0784 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CancelDeletionButton;                             		// 0x0788 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmDeletionButton;                            		// 0x078C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   DeletionPanel;                                    		// 0x0790 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DeletionLabel;                                    		// 0x0794 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DeletionHeroNameLabel;                            		// 0x0798 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ConfirmItemCostLabel;                             		// 0x079C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIObject* >                         ConfirmationButtons;                              		// 0x07A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AnimShowDeletionConfirmation;                     		// 0x07AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimHideDeletionConfirmation;                     		// 0x07B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DeletionConfirmationString;                       		// 0x07BC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShowingDeletionConfirmation : 1;                 		// 0x07C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      medManaSetup : 1;                                 		// 0x07C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      largeManaSetup : 1;                               		// 0x07C8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      superManaSetup : 1;                               		// 0x07C8 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                FocusCounter;                                     		// 0x07CC (0x0004) [0x0000000000000000]              
	class UDataListEntryInterface*                     LastSelectedEntry;                                		// 0x07D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x07D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UDunDefUIScene*                              myEquipmentInfoScene;                             		// 0x07D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     medManaBagString;                                 		// 0x07DC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     largeManaBagString;                               		// 0x07E8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     superManaBagString;                               		// 0x07F4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     medManaTitleString;                               		// 0x0800 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     largeManaTitleString;                             		// 0x080C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     superManaTitleString;                             		// 0x0818 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	class UUI_EditboxPopup*                            myEditBoxPopup;                                   		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UHeroEquipment*                              ConfirmBuyEquipmentItem;                          		// 0x0828 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                EditBoxType;                                      		// 0x082C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40471 ];

		return pClassPointer;
	};

	void ShowDeletionConfirmation ( class UHeroEquipment* anEquipment );
	void GiveFocusToAnyChild ( );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
	void eventEditBoxPopUpCompleted ( struct FString EditBoxResult );
	void CloseWithAnimation ( );
	void RefreshEquipmentList ( );
	int GetSelectedEquipmentItemType ( );
	void SelectEquipmentItemType ( int Index );
	void PostInitialSceneUpdate ( );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	bool AllowBuyingBankedMana ( );
	bool CanAffordEquipmentHV ( class UHeroEquipment* anEquipment, struct FHighDigitInt theBankedMana );
	bool CanAffordEquipment ( class UHeroEquipment* anEquipment, int theBankedMana );
	void BoughtMana ( );
	bool BuyItem ( class UHeroEquipment* anEquipment );
	void UpdateItemShopPanel ( class UDunDefHero* theHero );
	void UpdateServicesPanel ( class UDunDefHero* theHero );
	void eventUpdate ( float DeltaTime );
	void updateManaBags ( unsigned long shouldBeVisible, unsigned long shouldBeEnabled );
};

UClass* UUI_Shop::pClassPointer = NULL;

// Class UDKGame.UI_ChooseMultiplayerMode
// 0x00A5 (0x06E1 - 0x063C)
class UUI_ChooseMultiplayerMode : public UDunDefUIScene
{
public:
	class UUIButton_Scripted*                          UnrankedButton;                                   		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          RankedButton;                                     		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ChooseMultiplayerLabel;                           		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    RankedModeLabel;                                  		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    UnrankedModeLabel;                                		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    RequiredForAchievementsLabel;                     		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ChooseMultiplayerString;                          		// 0x0654 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedModeString;                                 		// 0x0660 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedModeToolTipString;                          		// 0x066C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnrankedModeString;                               		// 0x0678 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnrankedModeToolTipString2;                       		// 0x0684 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnrankedModeToolTipString3;                       		// 0x0690 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedModeDeniedToolTipString;                    		// 0x069C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedModeDeniedDemoToolTip;                      		// 0x06A8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedRecommendedString;                          		// 0x06B4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedRecommendedStringWithSteam;                 		// 0x06C0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	class UDunDefUIScene*                              CharacterSelectUIScene;                           		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              RankedModeWelcomeUIScene;                         		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              MainMenuScene;                                    		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DeniedSound;                                      		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    DeniedImage;                                      		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OriginalMultiplayerMode;                          		// 0x06E0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40515 ];

		return pClassPointer;
	};

	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool OnReceivedInputAxis ( struct FInputEventParameters* EventParms );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void SwitchMultiplayerModeComplete ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
};

UClass* UUI_ChooseMultiplayerMode::pClassPointer = NULL;

// Class UDKGame.DunDefPostProcessManager
// 0x0004 (0x0040 - 0x003C)
class UDunDefPostProcessManager : public UObject
{
public:
	class UMaterialInstanceConstant*                   OutlineMaterial;                                  		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40683 ];

		return pClassPointer;
	};

};

UClass* UDunDefPostProcessManager::pClassPointer = NULL;

// Class UDKGame.HeroManagerResources
// 0x0008 (0x0044 - 0x003C)
class UHeroManagerResources : public UObject
{
public:
	class UStatObjectDataContainer*                    StatObjectDataList;                               		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UEquipmentDataContainer*                     EquipmentDataList;                                		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40710 ];

		return pClassPointer;
	};

	class UHeroManagerResources* GetHeroManagerResources ( );
	int GetRandomStatObjectID ( );
	class UStatObject_Equipment* GetRandomStatObject ( );
	class UStatObject_Equipment* GetEquipmentStatObjectFromID ( int Id );
	void Initalize ( );
};

UClass* UHeroManagerResources::pClassPointer = NULL;

// Class UDKGame.DataListProviderInterface
// 0x0000 (0x003C - 0x003C)
class UDataListProviderInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40724 ];

		return pClassPointer;
	};

	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
};

UClass* UDataListProviderInterface::pClassPointer = NULL;

// Class UDKGame.CDTSettingsManager
// 0x0044 (0x0080 - 0x003C)
class UCDTSettingsManager : public UObject
{
public:
	unsigned long                                      bTowersUseDynamicLighting : 1;                    		// 0x003C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bAllowMoveWhileBuilding : 1;                      		// 0x003C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bOtherPlayerCanSellTower : 1;                     		// 0x003C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bDisplayCDPortal : 1;                             		// 0x003C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bDisplayCosmeticSet : 1;                          		// 0x003C (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bHideMiniMapTowers : 1;                           		// 0x003C (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bHideMiniMapBillboards : 1;                       		// 0x003C (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bHideGoodEquipmentOverlay : 1;                    		// 0x003C (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bOverrideWaterDetail : 1;                         		// 0x003C (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bHardcore : 1;                                    		// 0x003C (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bHardcoreOpen : 1;                                		// 0x003C (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bQualityOutlineEnabled : 1;                       		// 0x003C (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bCensorItems : 1;                                 		// 0x003C (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      bUseSimpleDamageNumbers : 1;                      		// 0x003C (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bDisableHysteresis : 1;                           		// 0x003C (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bUseOldUpgradingPriority : 1;                     		// 0x003C (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      bShowExtendedWeaponInfo : 1;                      		// 0x003C (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      bShowAllDescriptionQualityNames : 1;              		// 0x003C (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bDisableAllDescriptionQualityNames : 1;           		// 0x003C (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	int                                                ShowDroppedItemQualityFx;                         		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                numSigFigsHVFormat;                               		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AlphaAtHighHealth;                                		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HighHealthThreshold;                              		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LowHealthThreshold;                               		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                maxUpgradeDisplayLevel;                           		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WaterDetailLevel;                                 		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ShowEquipmentQualityCount;                        		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                QualityOutlineFilter;                             		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DamageNumberScaleMulitplier;                      		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HysteresisWeight;                                 		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PublicLobbyLevelRequirement;                      		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           UpgradeTowerPriority;                             		// 0x0070 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                FullyUpgradeTowerFromLevel;                       		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40769 ];

		return pClassPointer;
	};

};

UClass* UCDTSettingsManager::pClassPointer = NULL;

// Class UDKGame.CosmeticSetBonus
// 0x0010 (0x022C - 0x021C)
class ACosmeticSetBonus : public AActor
{
public:
	int                                                numItemsToCompleteSet;                            		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     EffectToSpawn;                                    		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketToSpawnEffectOn;                            		// 0x0224 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 40805 ];

		return pClassPointer;
	};

};

UClass* ACosmeticSetBonus::pClassPointer = NULL;

// Class UDKGame.DunDefGameStats
// 0x0014 (0x00B0 - 0x009C)
class UDunDefGameStats : public UStatSystem
{
public:
	TArray< struct FNewBestStats >                     newBestOfStats;                                   		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CombatStartTime;                                  		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      FullDefenses : 1;                                 		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41051 ];

		return pClassPointer;
	};

	void ReportGameStat ( int StatClassIndex, int Value, class APlayerController* PC, struct FName SplitName, float Time, unsigned long sharedStat );
	bool IsNewBest ( int PlayerIndex, int StatClassIndex );
	void MarkNewBestStat ( int PlayerIndex, int StatClassIndex, unsigned long checkLocal, struct FUniqueNetId PlayerID );
	void GetLevelTime ( int* BuildTime, int* CombatTime );
	void DumpBufferStat ( struct FStatBuffer forBuffer, int I );
	void DumpBuffer ( struct FStatBuffer forBuffer );
	void DumpPlayer ( struct FStatPlayer Player );
	void Dump ( );
	int GetPlayerIndex ( class ADunDefPlayerController* DPC );
	int GetPRIPlayerIndex ( class ADunDefPlayerReplicationInfo* ddPRI );
	bool IsCloseEnough ( float A, float B, float Epsilon );
	struct FString eventGetStatPlayerName ( class APlayerController* PC );
	struct FStatHeroInfo GetStatPlayerHeroData ( int Index );
	void MarkPlayerLeft ( int Index );
	void RegisterStatPlayerHero ( int Index, class ADunDefPlayerController* DPC );
	struct FString GetStatPlayerNameWithHero ( struct FString prefix, class UDunDefHero* theHero );
	void SetupStatName ( int Index, class ADunDefPlayerController* DPC, class UDunDefHero* theHero, struct FString PRIName );
	void SetupHeroMetaData ( int Index, class UDunDefHero* hero );
	void RegisterPlayerController ( class ADunDefPlayerController* DPC );
	void eventStatPlayerAdded ( class APlayerController* PC, int Index );
	void ReportStopCombat ( class ADunDefGameReplicationInfo* Info );
	void ReportStartCombat ( class ADunDefGameReplicationInfo* Info );
};

UClass* UDunDefGameStats::pClassPointer = NULL;

// Class UDKGame.DunDefLocalPlayer
// 0x000C (0x03DC - 0x03D0)
class UDunDefLocalPlayer : public ULocalPlayer
{
public:
	unsigned long                                      IsKeyboardPlayer : 1;                             		// 0x03D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      HasConfirmedAHero : 1;                            		// 0x03D0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsWhiteFade : 1;                                 		// 0x03D0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bRespawning : 1;                                  		// 0x03D0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bRespawningUp : 1;                                		// 0x03D0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              BlackBoxOpacity;                                  		// 0x03D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBlackOverlayUpdateTime;                       		// 0x03D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41252 ];

		return pClassPointer;
	};

	bool UseCursor ( );
	bool IsConsolePlayer ( );
	void MovieCompleted ( );
	void CinematicCompleted ( );
	void ReceivedPlayerController ( class ADunDefPlayerController* MyController );
	void ResetForNewMap ( );
	void RespawningDown ( );
	void RespawningUp ( );
	void DrawBlackOverlay ( class UCanvas* Canvas );
	void PostCanvasRender ( class UCanvas* Canvas );
	void eventPostHUDRender ( class UCanvas* Canvas );
	struct FString GetDunDefNickname ( );
	void Reset ( );
	int GetPlayerIndex ( );
	class UDunDefViewportClient* GetVC ( );
};

UClass* UDunDefLocalPlayer::pClassPointer = NULL;

// Class UDKGame.ToolTipInterface
// 0x0000 (0x003C - 0x003C)
class UToolTipInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41289 ];

		return pClassPointer;
	};

	void eventActiveStateChanged ( class UUIObject* Sender, int PlayerIndex, class UUIState* NewState, class UUIState* OldState );
	class UUIScreenObject* GetAbsoluteParentOverride ( );
	void SearchedForResContainer ( );
	bool HasSearchedForResContainer ( );
	void SetResolutionContainer ( class UUIResolutionContainer* resContainer );
	class UUIResolutionContainer* GetResolutionContainer ( );
	unsigned char GetVerticalAlignment ( );
	unsigned char GetHorizontalAlignment ( );
	struct FVector GetToolTipScale ( );
	bool GetToolTipShouldUse ( );
	bool GetToolTipMouseFollow ( );
	float GetToolTipFadeOutTime ( );
	float GetToolTipFadeInTime ( );
	struct FString GetToolTipString ( );
	class UUIPrefab* GetToolTipPrefabTemplate ( );
	float GetToolTipYOffset ( );
	float GetToolTipXOffset ( );
	float GetToolTipDelay ( );
};

UClass* UToolTipInterface::pClassPointer = NULL;

// Class UDKGame.DunDefUIReplicationInfo
// 0x0014 (0x0230 - 0x021C)
class ADunDefUIReplicationInfo : public AActor
{
public:
	class UDunDefUIScene*                              UISceneTemplate;                                  		// 0x021C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UDunDefUIScene*                              UISceneInstance;                                  		// 0x0220 (0x0004) [0x0000000000000000]              
	unsigned long                                      InitializeAck : 1;                                		// 0x0224 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	struct FName                                       ReplicatedOpeningAnimation;                       		// 0x0228 (0x0008) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41360 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	class UDunDefViewportClient* GetViewportClient ( );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void MulticastUIMessage ( class ADunDefPlayerController* PC, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventDestroyed ( );
	void CheckForGRI ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefUIReplicationInfo::pClassPointer = NULL;

// Class UDKGame.DunDefInput
// 0x002C (0x019C - 0x0170)
class UDunDefInput : public UDunDefInputNative
{
public:
	TArray< struct FString >                           AllowedCommands;                                  		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMobileInput                                MyMobileInput;                                    		// 0x017C (0x0004) [0x0000000000000000]              
	TArray< struct FKeyDescription >                   KeyDescriptions;                                  		// 0x0180 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FBindingDescription >               BindingDescriptions;                              		// 0x018C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      bRotateCamera;                                    		// 0x0198 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bDisplayMiniMap;                                  		// 0x0199 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bTalking;                                         		// 0x019A (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bFreeLook;                                        		// 0x019B (0x0001) [0x0000000000000004]              ( CPF_Input )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41449 ];

		return pClassPointer;
	};

	void SetInvertMouse ( unsigned long doInvertMouse );
	void AdjustControlSchemeForOptions ( struct UDunDefHeroManagerNative_FOptionsFixedStruct* theOptions );
	void ProcessMobileCameraRotation ( float DeltaTime );
	class UTexture2D* GetIcon ( struct FName KeyName, struct FString Command );
	struct FString GetDescription ( struct FName KeyName, struct FString Command );
	struct FString GetBindingDescription ( struct FName KeyName, struct FString Command );
	bool IsKeyBoundToCommand ( struct FName Key, struct FString Command );
	void SetBindingDescription ( struct FString DestBinding, struct FString SrcBinding );
	void SetBinding ( struct FName KeyName, struct FString Command );
	void CleanUpBindings ( );
	struct FString GetBinding ( struct FName KeyName );
	struct FName GetKey ( struct FString Command );
	bool WantsMiniMap ( );
	bool eventIsRotatingCamera ( );
	void Jump ( );
};

UClass* UDunDefInput::pClassPointer = NULL;

// Class UDKGame.UI_PauseMenu
// 0x0178 (0x07B4 - 0x063C)
class UUI_PauseMenu : public UDunDefUIScene
{
public:
	class USoundCue*                                   PauseGameSound;                                   		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ResumeGameSound;                                  		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ResumeGameButton;                                 		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          RestartLevelButton;                               		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          AchievementsButton;                               		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          TradeButton;                                      		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          CenteredTradeButton;                              		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ReturnToLobbyButton;                              		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ReturnToMainMenu;                                 		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          GameSetupButton;                                  		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          HeroInfoButton;                                   		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          CenteredHeroInfoButton;                           		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          GamerInfoButton;                                  		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          InviteFriendsButton;                              		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          KickPlayerButton;                                 		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          VisibleOnlineButton;                              		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 SellableTowerCheckbox;                            		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MissionNameLabel;                                 		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MixModeLabel;                                     		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    AltMissionNameLabel;                              		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MissionObjectiveLabel;                            		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   DifficultyPanel;                                  		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DifficultyLabel;                                  		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel_DataList*                           PlayerDataList;                                   		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LeaveGameString;                                  		// 0x069C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUIButton_Scripted*                          MuteButton;                                       		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ShowControlsButton;                               		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     muteString;                                       		// 0x06B0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     unmuteString;                                     		// 0x06BC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ShowOnlineGameString;                             		// 0x06C8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HideOnlineGameString;                             		// 0x06D4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InvitePartyString;                                		// 0x06E0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExitToMainMenuFromMissionConfirmation;            		// 0x06EC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExitToTavernFromMissionConfirmation;              		// 0x06F8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AchievementsString;                               		// 0x0704 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       WantToUnpauseAnim;                                		// 0x0710 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WantToPauseAnim;                                  		// 0x0718 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ToggleMapInputCommand;                            		// 0x0720 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIButton_Scripted*                          OptionsButton;                                    		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          AddManaButton;                                    		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          AddScoreButton;                                   		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          UnlockAchievementsButton;                         		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          KillAllEnemesButton;                              		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          IncreaseTimeDilation;                             		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          DecreaseTimeDilation;                             		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_OptionsMenu*                             OptionsMenuTemplate;                              		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ManageInvitesButton;                              		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CancelDeletionButton;                             		// 0x0750 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmDeletionButton;                            		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   DeletionPanel;                                    		// 0x0758 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DeletionLabel;                                    		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIObject* >                         ConfirmationButtons;                              		// 0x0760 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AnimShowDeletionConfirmation;                     		// 0x076C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimHideDeletionConfirmation;                     		// 0x0774 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           DeletionConfirmationStrings;                      		// 0x077C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShowingDeletionConfirmation : 1;                 		// 0x0788 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWantToUnpause : 1;                               		// 0x0788 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWantsMiniMap : 1;                                		// 0x0788 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                FocusCounter;                                     		// 0x078C (0x0004) [0x0000000000000000]              
	int                                                DeletionReason;                                   		// 0x0790 (0x0004) [0x0000000000000000]              
	class UOnlineGameSettings*                         OnlineGameSettings;                               		// 0x0794 (0x0004) [0x0000000000000000]              
	int                                                ForceCameraUpdate;                                		// 0x0798 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     InviteFriendsString;                              		// 0x079C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UUIButton_DataListEntry*                     LastPlayerButtonSelected;                         		// 0x07A8 (0x0004) [0x0000000000000000]              
	class UUIButton_Scripted*                          ReportBugButton;                                  		// 0x07AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastVisibleChange;                                		// 0x07B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41587 ];

		return pClassPointer;
	};

	void OpenPauseUIForAllPlayers ( class ULocalPlayer* IgnorePlayer );
	void CloseAllPauseUI ( );
	bool DoAllPauseUIWantToUnpause ( );
	bool WantsToUnpause ( );
	void eventUpdate ( float DeltaTime );
	void ToggleMute ( );
	void CloseWithAnimation ( );
	void NotifyPlayerLeft ( class APlayerReplicationInfo* PRI );
	void NotifyPlayerJoined ( class APlayerReplicationInfo* PRI );
	class ADunDefPlayerReplicationInfo* GetSelectedPRI ( );
	class UDunDefHero* GetSelectedHero ( );
	void RefreshTradeButton ( );
	void PlayerEntrySelected ( class UUIButton_DataListEntry* Button );
	void UpdatePlayerList ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void ShowDeletionConfirmation ( int Reason );
	void PostInitialSceneUpdate ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void eventSceneDeactivated ( );
	void ToggleWantToUnpause ( );
	bool DoesAnyPauseUIWantMiniMap ( );
	void ShowMiniMap ( unsigned long bShow );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
};

UClass* UUI_PauseMenu::pClassPointer = NULL;

// Class UDKGame.UILabel_ToolTip
// 0x0000 (0x04CC - 0x04CC)
class UUILabel_ToolTip : public UUILabel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41602 ];

		return pClassPointer;
	};

};

UClass* UUILabel_ToolTip::pClassPointer = NULL;

// Class UDKGame.UI_MessageBox
// 0x004C (0x0688 - 0x063C)
class UUI_MessageBox : public UDunDefUIScene
{
public:
	unsigned long                                      bDontHandleOKClick : 1;                           		// 0x063C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      hasResponse : 1;                                  		// 0x063C (0x0004) [0x0000000000000000] [0x00000002] 
	class UUIButton_Scripted*                          VersionButton;                                    		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          DLCButton;                                        		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    lblTitle;                                         		// 0x0648 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUILabel*                                    lblMessage;                                       		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnOk;                                            		// 0x0650 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnYes;                                           		// 0x0654 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnNo;                                            		// 0x0658 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnCancel;                                        		// 0x065C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     OriginalVersionButtonString;                      		// 0x0660 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      msgBoxType;                                       		// 0x066C (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnMessageBoxClicked__Delegate;                  		// 0x0670 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnForceClose__Delegate;                         		// 0x067C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41715 ];

		return pClassPointer;
	};

	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void HandleSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void eventSceneDeactivated ( );
	bool OnButtonClicked ( class UUIScreenObject* EventObject, int PlayerIndex );
	void SetMessageBoxType ( unsigned char withType );
	void ShowWidget ( class UUIScreenObject* toEnable );
	void HideWidget ( class UUIScreenObject* toDisable );
	void SetMessage ( struct FString Message );
	void SetTitle ( struct FString Title );
	void SetForceCloseDelegate ( struct FScriptDelegate del );
	void SetOnClickedCallback ( struct FScriptDelegate del );
	void OnForceClose ( class UUI_MessageBox* Sender );
	bool OnMessageBoxClicked ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
};

UClass* UUI_MessageBox::pClassPointer = NULL;

// Class UDKGame.UIButton_Scripted
// 0x0054 (0x0520 - 0x04CC)
class UUIButton_Scripted : public UUILabelButton
{
public:
	int                                                CustomData;                                       		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomDataTwo;                                    		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipDelay;                                     		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipXOffset;                                   		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipYOffset;                                   		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPrefab*                                   ToolTipPrefabTemplate;                            		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ToolTipString;                                    		// 0x04E4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              ToolTipFadeInTime;                                		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipFadeOutTime;                               		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ToolTipMouseFollow : 1;                           		// 0x04F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseToolTip : 1;                                   		// 0x04F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      lookedForResContainer : 1;                        		// 0x04F8 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FVector                                     ToolTipScale;                                     		// 0x04FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ToolTipHorizontalAlignment;                       		// 0x0508 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ToolTipVerticalAlignment;                         		// 0x0509 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             absoluteParentOverride;                           		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIResolutionContainer*                      myResolutionContainer;                            		// 0x0510 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __NotifyWidgetClicked__Delegate;                  		// 0x0514 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41759 ];

		return pClassPointer;
	};

	void eventActiveStateChanged ( class UUIObject* Sender, int PlayerIndex, class UUIState* NewState, class UUIState* OldState );
	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	bool NotifyWidgetClicked ( class UUIObject* Widget );
	struct FVector GetToolTipScale ( );
	class UUIScreenObject* GetAbsoluteParentOverride ( );
	void SearchedForResContainer ( );
	bool HasSearchedForResContainer ( );
	void SetResolutionContainer ( class UUIResolutionContainer* resContainer );
	class UUIResolutionContainer* GetResolutionContainer ( );
	unsigned char GetVerticalAlignment ( );
	unsigned char GetHorizontalAlignment ( );
	bool GetToolTipShouldUse ( );
	bool GetToolTipMouseFollow ( );
	float GetToolTipFadeOutTime ( );
	float GetToolTipFadeInTime ( );
	struct FString GetToolTipString ( );
	class UUIPrefab* GetToolTipPrefabTemplate ( );
	float GetToolTipYOffset ( );
	float GetToolTipXOffset ( );
	float GetToolTipDelay ( );
};

UClass* UUIButton_Scripted::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_ToggleButton
// 0x0024 (0x05E8 - 0x05C4)
class UUIScriptWidget_ToggleButton : public UUIScriptWidget_Button
{
public:
	unsigned long                                      bIsChecked : 1;                                   		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SetValueTrueOnClick : 1;                          		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPreviewCheckedBackground : 1;                    		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDontPlayAnimation : 1;                           		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class USoundCue*                                   SelectedSound;                                    		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SelectedBGColor;                                  		// 0x05CC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SelectedTextColor;                                		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CheckedScaleMultiplier;                           		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    CheckedButtonBackground;                          		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41762 ];

		return pClassPointer;
	};

	void ApplyRenderOffsets ( class UCanvas* C, float* X1, float* X2, float* Y1, float* Y2 );
	float GetScaleMultiplier ( );
	struct FName GetFocusLostName ( );
	struct FName GetFocusGainedName ( );
	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	class USurface* GetBackgroundImage ( );
	void SetValue ( unsigned long bShouldBeChecked );
	bool IsChecked ( );
	struct FColor GetTextDrawColor ( unsigned long bEnabled );
	struct FLinearColor GetBackgroundDrawColor ( unsigned long bEnabled );
};

UClass* UUIScriptWidget_ToggleButton::pClassPointer = NULL;

// Class UDKGame.UIButton_DataListEntry
// 0x0030 (0x0618 - 0x05E8)
class UUIButton_DataListEntry : public UUIScriptWidget_ToggleButton
{
public:
	class UUIPanel_DataList*                           MyDataList;                                       		// 0x05E8 (0x0004) [0x0000000000000000]              
	class UDataListEntryInterface*                     MyDataListEntry;                                  		// 0x05EC (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x05F0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                entryIndex;                                       		// 0x05F4 (0x0004) [0x0000000000000000]              
	int                                                ColumnIndex;                                      		// 0x05F8 (0x0004) [0x0000000000000000]              
	int                                                RowIndex;                                         		// 0x05FC (0x0004) [0x0000000000000000]              
	int                                                ButtonArrayIndex;                                 		// 0x0600 (0x0004) [0x0000000000000000]              
	struct FString                                     AltDisabledString;                                		// 0x0604 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bAllowFocus : 1;                                  		// 0x0610 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreNextDataListClick : 1;                     		// 0x0610 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UUIObject*                                   FocusOnOtherControl;                              		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41761 ];

		return pClassPointer;
	};

	bool DoAllowNavigationAway ( unsigned char Direction );
	void InitializeFromDataListEntry ( class UUIPanel_DataList* DataList, class UDataListEntryInterface* Entry );
	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	void GainedFocus ( );
	class UUIPanel_DataList* GetDataList ( );
};

UClass* UUIButton_DataListEntry::pClassPointer = NULL;

// Class UDKGame.UI_OptionsMenu
// 0x01E4 (0x0820 - 0x063C)
class UUI_OptionsMenu : public UDunDefUIScene
{
public:
	class UUIButton*                                   ConfirmButton;                                    		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConfirmDelay;                                     		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CancelButton;                                     		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ChangeCameraSchemeButton;                         		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MainMenuDelay;                                    		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CloseCue;                                         		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ResetTutorialsButton;                             		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ShowTutorialButton;                               		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ResetMoveCalibration;                             		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 AutoAdjustCameraCheckbox;                         		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 ShowFloatingDamageNumbersCheckbox;                		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 FullScreenCheckbox;                               		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 PostProcessingCheckbox;                           		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 TutorialsCheckbox;                                		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 ShowAutoLevelUpCheckbox;                          		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 ShowTalkerNamesCheckbox;                          		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 InvertMouseCheckbox;                              		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 HideMeleeTargetingReticleCheckbox;                		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 ShowSpawNotificationsCheckbox;                    		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 LockTavernDrops;                                  		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 LockTavernDefenses;                               		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ShowTalkerNamesLabel;                             		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 SwapTriggersAndButtonsCheckbox;                   		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 AlternateControlSchemeCheckbox;                   		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 InvertCameraPitchCheckbox;                        		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 DisableStepTowardsTarget;                         		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 DisableCameraShake;                               		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 FastMenuTransitionsCheckbox;                      		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 DamageFlashingCheckbox;                           		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 ForceFeedbackCheckBox;                            		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUICheckBox_Scripted* >              SplitCheckboxes;                                  		// 0x06B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UUILabel* >                          SplitOptions;                                     		// 0x06C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUISlider*                                   GammaSlider;                                      		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   SaturationSlider;                                 		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   VolumeSFXSlider;                                  		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   VolumeMusicSlider;                                		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   UIScaleSlider;                                    		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   MouseCameraRotationSpeedSlider;                   		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ResetOptions;                                     		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ReportIssueButton;                                		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    ControllerImage;                                  		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USurface* >                          gamepadImages;                                    		// 0x06F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USurface*                                    keyboardImage;                                    		// 0x06FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PlayerNameLabel;                                  		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MouseCameraTurnSpeedLabel;                        		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    CameraSchemeName;                                 		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 HideAccessoryCheckbox;                            		// 0x070C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ItemQualityFilterLabel;                           		// 0x0710 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ItemQualityFilterPlusButton;                      		// 0x0714 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ItemQualityFilterMinusButton;                     		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           ItemQualityDescriptorName;                        		// 0x071C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	int                                                currentItemQualityFilter;                         		// 0x0728 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUISlider*                                   CaptureVolumeSlider;                              		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   PlaybackVolumeSlider;                             		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        PushToTalk;                                       		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        OutgoingVoice;                                    		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        IncomingVoice;                                    		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   NextControlSchemeButton;                          		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   PrevControlSchemeButton;                          		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   PrimaryOptionsPanel;                              		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           ControlSchemeName;                                		// 0x074C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CalibrateMoveString;                              		// 0x0758 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreditsString;                                    		// 0x0764 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ShowTalkerNamesString;                            		// 0x0770 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ResetOptionsString;                               		// 0x077C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MouseCameraStringSpeedString;                     		// 0x0788 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChangeCameraScheme;                               		// 0x0794 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CameraSchemeNames;                                		// 0x07A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      IsClosing : 1;                                    		// 0x07AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                CameraSchemeValue;                                		// 0x07B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConfirmTimer;                                     		// 0x07B4 (0x0004) [0x0000000000000000]              
	float                                              MainMenuTimer;                                    		// 0x07B8 (0x0004) [0x0000000000000000]              
	class UUICheckbox*                                 CanMoveWhenBuildingCheck;                         		// 0x07BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 TowerDynamicLightingCheck;                        		// 0x07C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 bDisplayCDPortal;                                 		// 0x07C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 bDisplayCosmeticSetBonus;                         		// 0x07C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          IncreaseMaxDisplayedTowerUpgrades;                		// 0x07CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          NumSignificantFigures;                            		// 0x07D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ItemQualityOutlineFilterLabel;                    		// 0x07D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ItemQualityOutlineFilterPlusButton;               		// 0x07D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ItemQualityOutlineFilterMinusButton;              		// 0x07DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                currentItemQualityOutlineFilter;                  		// 0x07E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPanelProperties >                  panels;                                           		// 0x07E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                curPanel;                                         		// 0x07F0 (0x0004) [0x0000000000000000]              
	class UUICheckbox*                                 OutlineCheckBox;                                  		// 0x07F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Combobox*                    CB_ResolutionPicker;                              		// 0x07F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           SupportedResolutions;                             		// 0x07FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIScriptWidget_Combobox*                    CB_GraphicsQualityPicker;                         		// 0x0808 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   DamageNumberScaleSlider;                          		// 0x080C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 SimpleDamageNumbersCheckBox;                      		// 0x0810 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 CensorItemsCheckBox;                              		// 0x0814 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   FrameRateLimitSlider;                             		// 0x0818 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    FrameRateLimitLabel;                              		// 0x081C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41779 ];

		return pClassPointer;
	};

	bool eventIsKeyboardOwned ( );
	void NextPanel ( );
	void PreviousPanel ( );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void ActivatePanel ( int panelIndex );
	bool ToggleButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	bool eventNotifyWidgetClickedEvent ( class UUIScreenObject* EventObject, int PlayerIndex );
	void eventUpdate ( float DeltaTime );
	void TransitionToMainMenu ( );
	struct FString GetResolutionString ( );
	unsigned char GetSplitConfig ( );
	void SetSplitScreenConfig ( unsigned char currentConfig );
	void ApplyOptions ( );
	void CloseWithAnimation ( );
	void RefreshKeyBindingLabels ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void DisableSplitScreenOptions ( );
	bool IsDesired ( struct FPanelProperties panel );
};

UClass* UUI_OptionsMenu::pClassPointer = NULL;

// Class UDKGame.UIPanel_DataList
// 0x00FC (0x057C - 0x0480)
class UUIPanel_DataList : public UUIPanel
{
public:
	class UUIPrefab*                                   Button_DataListEntry_Template;                    		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUsePrefabToDataSetArray : 1;                     		// 0x0484 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsePrefabToRowMapping : 1;                       		// 0x0484 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      AllowMultiSelection : 1;                          		// 0x0484 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCenterX : 1;                                     		// 0x0484 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bScalePositonsToViewport : 1;                     		// 0x0484 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSetHighlightOnFocusWithGamepad : 1;              		// 0x0484 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowVerticalIncrementalScrolling : 1;           		// 0x0484 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowHorizontalIncrementalScrolling : 1;         		// 0x0484 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIndividuallyCenterEntries : 1;                   		// 0x0484 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseCyclePageSound : 1;                           		// 0x0484 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUseScrollingCyclePageSound : 1;                  		// 0x0484 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIsInInitialization : 1;                          		// 0x0484 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bDoForcePlaySelectionSound : 1;                   		// 0x0484 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	TArray< class UUIPrefab* >                         Button_DataListEntry_PrefabsToDataSets;           		// 0x0488 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UUIPrefab* >                         Button_DataListEntry_PrefabToRowMapping;          		// 0x0494 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              EntryXOffset;                                     		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EntryYOffset;                                     		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EntryColumnPadding;                               		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EntryRowPadding;                                  		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxEntriesPerRow;                                 		// 0x04B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOfEntry;                                    		// 0x04B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WidthOfEntry;                                     		// 0x04B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                dataSetType;                                      		// 0x04BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIButton_DataListEntry* >           Buttons_DataListEntry;                            		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UUIButton_DataListEntry* >           Buttons_Invisible;                                		// 0x04CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUIButton*                                   NextPageButton;                                   		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   PrevPageButton;                                   		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxEntriesPerPage;                                		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PageLabel;                                        		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    NextPageLabel;                                    		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PreviousPageLabel;                                		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CyclePageSound;                                   		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastListSelectedIndex;                            		// 0x04F4 (0x0004) [0x0000000000000000]              
	int                                                CurrentEntryOffset;                               		// 0x04F8 (0x0004) [0x0000000000000000]              
	int                                                LastNumberOfDataEntries;                          		// 0x04FC (0x0004) [0x0000000000000000]              
	int                                                CurrentPage;                                      		// 0x0500 (0x0004) [0x0000000000000000]              
	int                                                MaxPage;                                          		// 0x0504 (0x0004) [0x0000000000000000]              
	int                                                PrefabsToDataSetsOffset;                          		// 0x0508 (0x0004) [0x0000000000000000]              
	class UDataListProviderInterface*                  theDataListProvider;                              		// 0x050C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0510 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UDataListEntryInterface* >           dataEntries;                                      		// 0x0514 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDataListEntryInterface* >           RootDataEntries;                                  		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentMaxEntriesPerPage;                         		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveFolderID;                                   		// 0x0530 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnButtonSelected__Delegate;                     		// 0x0534 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRefreshList__Delegate;                        		// 0x0540 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __BeforeRefreshList__Delegate;                    		// 0x054C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __BeforeDataListUpdate__Delegate;                 		// 0x0558 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __AfterDataListUpdate__Delegate;                  		// 0x0564 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EntryEnabledCheck__Delegate;                    		// 0x0570 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41802 ];

		return pClassPointer;
	};

	bool EntryEnabledCheck ( class UDataListEntryInterface* dataEntry );
	class UUIScreenObject* GetScreenObjectOwner ( );
	void eventCreated ( );
	bool HasPrevPage ( );
	bool HasNextPage ( );
	void ShowFirstPage ( );
	void ShowPrevPage ( );
	void ShowNextPage ( );
	int InitFromDataListProvider ( class UDataListProviderInterface* dataListProvider, int theDataSetType, class UDataListEntryInterface* defaultSelectionEntry, int EntryOffset, class UUIPrefab* toolTipPrefab, unsigned long ForceSelection, unsigned long KeepFocus, unsigned long bSelectFirstAvailable, unsigned long bSelectLastAvailable, unsigned long bClearFocus, unsigned long bClearOffset, unsigned long bForcePlaySelectionSound );
	void AfterDataListUpdate ( class UUIPanel_DataList* aDataList );
	void BeforeDataListUpdate ( class UUIPanel_DataList* aDataList );
	bool HasAnyEnabledEntries ( class UDataListProviderInterface* dataListProvider, int theDataSetType );
	bool HasAnyEnabledEntriesForPage ( class UPlayer* ForPlayer );
	bool IsFirstEnabledEntry ( class UUIButton_DataListEntry* fromButton, unsigned long bIsVertical );
	bool IsLastEnabledEntry ( class UUIButton_DataListEntry* fromButton, unsigned long bIsVertical );
	bool HandleScrollingUp ( unsigned long bIsVertical, class UUIButton_DataListEntry* fromButton );
	bool HandleScrollingDown ( unsigned long bIsVertical, class UUIButton_DataListEntry* fromButton );
	class UDataListEntryInterface* GetPreviousEnabledDataEntry ( int Index, int numEntriesToCheck );
	class UDataListEntryInterface* GetNextEnabledDataEntry ( int Index, int numEntriesToCheck );
	void BeforeRefreshList ( );
	void OnRefreshList ( );
	void SetFocusedEntry ( class UDataListEntryInterface* Entry );
	class UDataListEntryInterface* GetFocusedEntry ( );
	void RefreshDataList ( );
	void AddNewEntry ( class UDataListEntryInterface* dataEntry, class UUIPrefab* toolTipPrefab, int entryIndex, int numOnThisRow );
	float CalcXCenterPadding ( int numEntriesOnRow );
	int GetNumColumns ( int numEntries );
	int GetNumRows ( int numEntries );
	class UUIButton_DataListEntry* GetButtonAtIndices ( int Row, int column );
	void ClearList ( );
	void UnregisterAllInputEvents ( class UUIObject* Target, unsigned long recurse );
	void MakeSecretHiddenButton ( );
	void ClearInvisibleButtons ( );
	class UUIButton_DataListEntry* GetSelectedButton ( );
	class UDataListEntryInterface* GetSelectedEntry ( );
	void SelectEntry ( class UDataListEntryInterface* Entry, unsigned long ForceSelection, unsigned long dontSetTrueValue, unsigned long SetFocus );
	void SelectButton ( class UUIButton_DataListEntry* Button, unsigned long ForceSelection, unsigned long dontSetTrueValue, unsigned long SetFocus );
	void OnButtonSelected ( class UUIButton_DataListEntry* Button );
	int GetIndexOfButton ( class UUIButton_DataListEntry* Button );
	class UUIButton_DataListEntry* GetFocusedButton ( );
	class UUIButton_DataListEntry* GetButtonForEntry ( class UDataListEntryInterface* Entry );
	int GetSelectedIndex ( );
	class UUIButton_DataListEntry* GetButtonAtIndex ( int Index );
	int GetLastSelectableIndex ( );
	int GetFirstSelectableIndex ( int startAtIndex );
	bool NotifyButtonClicked ( class UUIObject* Widget );
	class UUIPrefab* GetPrefabToUse ( int Row );
	float GetViewportYScaleTo768 ( );
	float GetViewportXScaleTo1024 ( );
};

UClass* UUIPanel_DataList::pClassPointer = NULL;

// Class UDKGame.DunDefMiniMap
// 0x006C (0x0288 - 0x021C)
class ADunDefMiniMap : public AInfo
{
public:
	float                                              OrigMapTexWidth;                                  		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OrigMapTexHeight;                                 		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MapBackgroundOpacity;                             		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MiniMapCenterTexCoords;                           		// 0x0228 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MiniMapDistanceScale;                             		// 0x0234 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MiniMapScreenDrawOffset;                          		// 0x0240 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MiniMapBackgroundTexture;                         		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapScale;                                     		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconScale;                                 		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ForceMapAlwaysOn : 1;                             		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0258 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDroppedEquipmentQualityStatsEnabled : 1;         		// 0x0258 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowing : 1;                                     		// 0x0258 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHideMiniMapBillboards : 1;                       		// 0x0258 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              CurrentCenterDrawPosX;                            		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCenterDrawPosY;                            		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentDrawMapScale;                              		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           DroppedEquipmentQualityText;                      		// 0x0268 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      DroppedEquipmentQualityColor;                     		// 0x0274 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Opacity;                                          		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              RealMiniMapDrawScale;                             		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41833 ];

		return pClassPointer;
	};

	class ADunDefMiniMap* GetMiniMap ( );
	void ToggleDebugMode ( );
	bool DoesAnyPlayerWantMiniMap ( );
	void eventTick ( float DeltaTime );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventPostBeginPlay ( );
	struct FVector ConvertCanvasCoordToWorldCoord ( struct FVector mapCoord, float additionalCoordScale );
	struct FVector ConvertWorldCoordToCenterMapCoord ( struct FVector worldCoord, float additionalCoordScale );
	struct FVector ConvertCenterMapCoordToCanvasCoord ( struct FVector mapCoord );
	struct FRotator GetTileRotationFromWorldRotation ( struct FRotator worldRotation );
	void DrawMiniMap ( class UCanvas* Canvas );
};

UClass* ADunDefMiniMap::pClassPointer = NULL;

// Class UDKGame.UI_GlobalHUD
// 0x00CC (0x0708 - 0x063C)
class UUI_GlobalHUD : public UDunDefUIScene
{
public:
	class UUIObject*                                   GameplayPanel;                                    		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    WaveNumberLabel;                                  		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    WaveNameLabel;                                    		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    TowerUnitCostLabel;                               		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MinionUnitCostLabel;                              		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUILabel* >                          MajorNotificationLabels;                          		// 0x0650 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                TowerUnitCostLabelColorNormal;                    		// 0x065C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TowerUnitCostLabelColorMaxed;                     		// 0x066C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   BuildPhaseIcon;                                   		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   CombatPhaseIcon;                                  		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   LevelVictoryPhaseIcon;                            		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   GameOverPhaseIcon;                                		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   BlackPanel;                                       		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           GPSplitscreenPostTransforms;                      		// 0x0690 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           GPSplitscreenPostTranslationOffsets;              		// 0x069C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                NormalWaveLabelColor;                             		// 0x06A8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FinalWaveLabelColor;                              		// 0x06B8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CombatPhaseAnimation;                             		// 0x06C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BuildPhaseAnimation;                              		// 0x06D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    CompetitivePlayerList;                            		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    CompetitiveScoreLimitLabel;                       		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ScoreLimitString;                                 		// 0x06E0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      wavePanelHidden : 1;                              		// 0x06EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      spawnedInGameOver : 1;                            		// 0x06EC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPlayedBuildPhaseAnimation : 1;                   		// 0x06EC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bPlayedCombatPhaseAnimation : 1;                  		// 0x06EC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bInitializedCompetitiveHUD : 1;                   		// 0x06EC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bBlackPanelVisible : 1;                           		// 0x06EC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      prevBlackPanelVisible : 1;                        		// 0x06EC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	int                                                LastMajorNotificationLabelIndex;                  		// 0x06F0 (0x0004) [0x0000000000000000]              
	int                                                LastMajorNotificationLabelHiddenIndex;            		// 0x06F4 (0x0004) [0x0000000000000000]              
	int                                                LastCurrentTowerUnitCost;                         		// 0x06F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastMaxTowerUnitCost;                             		// 0x06FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastCurrentMinionUnitCost;                        		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HideNotificationTimer;                            		// 0x0704 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41944 ];

		return pClassPointer;
	};

	void CinematicCompleted ( );
	void InitializeCompetitiveHUD ( class ADDGRI_Competitive* ddGRI );
	void UpdateCompetitive ( float DeltaTime );
	class UUI_GlobalHUD* GetGlobalHUD ( );
	void SetInCinematic ( unsigned long InCinematic );
	void DoNotifyPhaseChange ( unsigned long IsCombatPhase, unsigned long IsLevelVictory, unsigned long IsGameOver );
	void NotifyLevelVictory ( );
	void NotifyGameOver ( );
	void NotifyPhaseChange ( unsigned long IsCombatPhase );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void ShowMajorNotificationLabel ( struct FString LabelText, struct FLinearColor LabelColor, float LabelScale, unsigned long DontReplicate, float Timer, class USoundCue* ASound, class ADunDefEnemy* EnemyTemplate );
	bool ShowMajorNotificationLabel_LocalizedKismet ( class UDunDef_SeqVar_LocalizedString* LocalizedSeqVar, struct FLinearColor LabelColor, float LabelScale );
	void ShowMajorNotificationLabel_MapFriendlyName ( struct FLinearColor LabelColor, float LabelScale );
	void ShowMajorNotificationLabel_GameOver ( int GameOverType, struct FLinearColor LabelColor, float LabelScale, unsigned long appendNumber, int numberToAppend );
	void ShowMajorNotificationLabel_PredefinedType ( int MajorNotificationTypeSwitch, struct FLinearColor LabelColor, float LabelScale, unsigned long appendNumber, int numberToAppend );
	void eventUpdate ( float DeltaTime );
	bool IsWavePanelHidden ( );
	void ShowWavePanel ( );
	void HideWavePanel ( );
	bool AllowGlobalVisibilityToggling ( );
	void SetTowerUnitCosts ( int CurrentTowerUnitCost, int CurrentMinionUnitCost, int MaxTowerUnitCost, unsigned long bDontReplicate );
	void SetWaveNumber ( int theWaveNumber, int theFinalWaveNumber );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void ExecReplicatedUIMessage ( struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* UUI_GlobalHUD::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqVar_LocalizedString
// 0x000C (0x00A0 - 0x0094)
class UDunDef_SeqVar_LocalizedString : public USequenceVariable
{
public:
	struct FString                                     StringVar;                                        		// 0x0094 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41999 ];

		return pClassPointer;
	};

	struct FString GetObjectPath ( );
	struct FString GetLocalizedString ( );
};

UClass* UDunDef_SeqVar_LocalizedString::pClassPointer = NULL;

// Class UDKGame.DDGRI_Competitive
// 0x00C0 (0x07E0 - 0x0720)
class ADDGRI_Competitive : public ADunDefGameReplicationInfo
{
public:
	struct FTeamData                                   TeamDatas[ 0x4 ];                                 		// 0x0720 (0x0040) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                WinManaBonus[ 0x5 ];                              		// 0x0760 (0x0014) [0x0000000000000000]              
	int                                                ScoreLimits[ 0x5 ];                               		// 0x0774 (0x0014) [0x0000000000000000]              
	struct FString                                     KilledSelfString;                                 		// 0x0788 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KilledByString;                                   		// 0x0794 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WonGameString;                                    		// 0x07A0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KilledByMonsterString;                            		// 0x07AC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	int                                                ScoreLimit;                                       		// 0x07B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ADunDefPlayerReplicationInfo*                WinningPlayer;                                    		// 0x07BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              PlayerSpawnInvincibilityTime;                     		// 0x07C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              StatsSceneDelay;                                  		// 0x07C4 (0x0004) [0x0000000000000000]              
	float                                              PlayerExtraKnockbackMultiplier;                   		// 0x07C8 (0x0004) [0x0000000000000000]              
	float                                              PlayerGroundSpeedLerp;                            		// 0x07CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USoundCue*                                   WinSound;                                         		// 0x07D0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   LoseSound;                                        		// 0x07D4 (0x0004) [0x0000000000000000]              
	struct FColor                                      DiedMessageColor;                                 		// 0x07D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseCompetitiveHUD : 1;                           		// 0x07DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPreventCompetitivePlayerDeathNotifications : 1;  		// 0x07DC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42024 ];

		return pClassPointer;
	};

	float GetPlayerHealthMultiplier ( class ADunDefPlayer* aPlayer );
	float ModifyPlayerGroundSpeed ( class ADunDefPlayer* aPlayer, float theGroundSpeed );
	bool DoUseFamiliarAbilities ( class UHeroEquipment_Familiar* aFamiliar );
	float GetExtraKnockbackMultiplier ( class AActor* act );
	bool DoUseScoreLabel ( );
	void SetupVictoryShopEquipments ( );
	class ADunDefPlayerReplicationInfo* GetWinningPRI ( );
	bool AllowDeathSpectatorMode ( class ADunDefPlayerController* PC );
	void AwardWaveCompletion ( int theWaveNumber );
	void SellAllTowers ( );
	void eventPostBeginPlay ( );
	bool AllowPlayerDamage ( class ADunDefPlayer* aPlayer );
	struct FString GetCompetitivePlayerList ( );
	int GetAltCurrentTowerUnits ( class ADunDefPlayerReplicationInfo* ddPRI );
	int GetCurrentTowerUnits ( class ADunDefPlayerReplicationInfo* ddPRI );
	bool CanPlaceTowerUnitCost ( int Cost, class ADunDefPlayerController* ForPlayer, class ADunDefTower* Tower );
	void RemovedTower ( class ADunDefTower* Tower );
	void AddedTower ( class ADunDefTower* Tower );
	void ThePauseTimer ( );
	void DoLevelVictory ( );
	void WonGame ( class ADunDefPlayerReplicationInfo* theWinningPlayer, int WinningTeamIndex );
	bool DestroyTowerOnOwnerLeft ( class ADunDefTower* aTower );
	void DoDeathNotification ( class ADunDefPlayerReplicationInfo* Killer, class ADunDefPlayerReplicationInfo* Victim, int damageTypeIndex );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADDGRI_Competitive::pClassPointer = NULL;

// Class UDKGame.DunDefBuffManager
// 0x0030 (0x024C - 0x021C)
class ADunDefBuffManager : public ABuffManager
{
public:
	class UDictionary_IntObj*                          buffDictonary;                                    		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FsBuffArchetypeInstances >          LimitedBuffs;                                     		// 0x0220 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FsBuffArchetypePerOwnerSpawnCount > LimitedBuffsPerOwnerSpawnCounts;                  		// 0x022C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UDunDefBuff* >                       tickingBuffs;                                     		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentID;                                        		// 0x0244 (0x0004) [0x0000000000000000]              
	unsigned long                                      InitializeAck : 1;                                		// 0x0248 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42216 ];

		return pClassPointer;
	};

	void RefreshedBuffValues ( class UObject* CallingObject );
	void RemoveFromTicking ( class UDunDefBuff* tickingBuff );
	void RegisterForTicking ( class UDunDefBuff* tickingBuff );
	void eventTick ( float DeltaTime );
	void ShutDown ( );
	void ReplicateBuff ( class UDunDefBuff* aBuffTemplate, int BuffID, class AActor* BuffOwner, class AActor* BuffTarget );
	void ClientAddBuff ( struct FsBuffNetInfo* BuffInfo );
	class UDunDefBuff* GetBufffromID ( int BuffID );
	int GenerateBuffID ( );
	bool CanAddLimitedBuffPerOwnerSpawnCount ( class UDunDefBuff* buff_template, class AActor* buff_owner );
	bool CanAddLimitedBuff ( class UDunDefBuff* Buff );
	void AddLimitedBuff ( class UDunDefBuff* Buff );
	void AddLimitedBuffsPerOwnerSpawnCount ( class UDunDefBuff* Buff );
	void RemoveBuff ( class UDunDefBuff* oldBuff );
	void AddBuff ( class UDunDefBuff* newBuff );
	void CreatedBuff ( class UDunDefBuff* newBuff );
	void eventPostBeginPlay ( );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefBuffManager::pClassPointer = NULL;

// Class UDKGame.UI_GameStats
// 0x0984 (0x0FC0 - 0x063C)
class UUI_GameStats : public UDunDefUIScene
{
public:
	class UTexture2D*                                  unknownTexture;                                   		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  feedbackButton;                                   		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  gamerCardButton;                                  		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  leftDPadButton;                                   		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  rightDPadButton;                                  		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  HeroPopupBGTexture;                               		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  HardcoreIcon;                                     		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     genericFeedbackString;                            		// 0x0658 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     hideInfoString;                                   		// 0x0664 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUIImage_ProgressBar*                        statsReceivingProgress;                           		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPrefab*                                   LeaderboardPrefab;                                		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    VictoryLabel;                                     		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    GameOverLabel;                                    		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ConfirmReadyToProceedSound;                       		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    MainPanel;                                        		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    panelForHero;                                     		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DifficultyLabel;                                  		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        PopupBackgrounds;                                 		// 0x0690 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIImage*                                    scrollImage;                                      		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroPopUpOffsetX;                                 		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroPopUpOffsetY;                                 		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyStatLineWidth;                               		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerStatLineWidth;                              		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                LineColorEnemySpawn;                              		// 0x06B0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLinearColor >                      LineColorPlayers;                                 		// 0x06C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUILabel*                                    MVPAwardsLabel;                                   		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    ControllerImage;                                  		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USurface* >                          gamepadImages;                                    		// 0x06D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USurface*                                    keyboardImage;                                    		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PlayerNameLabel;                                  		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPrefabInstance*                           LeaderboardInstance;                              		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAllowLeaderboard : 1;                            		// 0x06EC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      hasInitialized : 1;                               		// 0x06EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bReadyToShow : 1;                                 		// 0x06EC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      isPopupRendering : 1;                             		// 0x06EC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      isOnlineGame : 1;                                 		// 0x06EC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      removedMVP : 1;                                   		// 0x06EC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowingDeletionConfirmation : 1;                 		// 0x06EC (0x0004) [0x0000000000000000] [0x00000040] 
	class UUIResolutionContainer*                      ResContainerLink;                                 		// 0x06F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FStatPanelProperties >              panels;                                           		// 0x06F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIButton_Scripted*                          leftPanel;                                        		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          rightPanel;                                       		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          leftWave;                                         		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          rightWave;                                        		// 0x070C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    textColumns[ 0x4 ];                               		// 0x0710 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    selector;                                         		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              lineHeight;                                       		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              lineTopPadding;                                   		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              lineBottomPadding;                                		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    feedbackLabel;                                    		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    gamercardLabel;                                   		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     showGamerCardString;                              		// 0x0738 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUIButton_Scripted*                          pageUpButton;                                     		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          pageDownButton;                                   		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                curPanel;                                         		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                curSelected;                                      		// 0x0750 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefGameStats*                            Stats;                                            		// 0x0754 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UUIObject* >                         curObjects;                                       		// 0x0758 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   selectorMIC;                                      		// 0x0764 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     columnData[ 0x60 ];                               		// 0x0768 (0x0480) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                StartWave;                                        		// 0x0BE8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                endWave;                                          		// 0x0BEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                curWave;                                          		// 0x0BF0 (0x0004) [0x0000000000000000]              
	class UUILineGraph*                                waveTimeline;                                     		// 0x0BF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIPanel* >                          legendPanels;                                     		// 0x0BF8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUILabel*                                    waveTitle;                                        		// 0x0C04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    waveMax;                                          		// 0x0C08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    waveEnd;                                          		// 0x0C0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUILabel* >                          KillLabels;                                       		// 0x0C10 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              KillLabelOffset;                                  		// 0x0C1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeLabelOffset;                                  		// 0x0C20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUILabel* >                          TimeLabels;                                       		// 0x0C24 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture*                                    icon_PlayerDeath;                                 		// 0x0C30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    icon_TowerDestroyed;                              		// 0x0C34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    icon_CrystalAttack;                               		// 0x0C38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    icon_Lord;                                        		// 0x0C3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    icon_Knight;                                      		// 0x0C40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                remainingEnemies;                                 		// 0x0C44 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                waveSeconds;                                      		// 0x0C48 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                lineCounter;                                      		// 0x0C4C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numItems;                                         		// 0x0C50 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                maxItems;                                         		// 0x0C54 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                curItem;                                          		// 0x0C58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct UUI_GameStats_FEnemyStatInfo >      enemyStats;                                       		// 0x0C5C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct UUI_GameStats_FTowerStatInfo >      towerStats;                                       		// 0x0C68 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FHeroStatInfo >                     heroStats;                                        		// 0x0C74 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     colon;                                            		// 0x0C80 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     timeString;                                       		// 0x0C8C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     totalString;                                      		// 0x0C98 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     combatString;                                     		// 0x0CA4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     buildString;                                      		// 0x0CB0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     killsString;                                      		// 0x0CBC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     playersString;                                    		// 0x0CC8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     towersString;                                     		// 0x0CD4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     wavesString;                                      		// 0x0CE0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     chestsString;                                     		// 0x0CEC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     builtString;                                      		// 0x0CF8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     soldString;                                       		// 0x0D04 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     repairedString;                                   		// 0x0D10 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     destroyedString;                                  		// 0x0D1C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     openedString;                                     		// 0x0D28 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bootyString;                                      		// 0x0D34 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     usefulBootyString;                                		// 0x0D40 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     unusefulBootyString;                              		// 0x0D4C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     enemiesEncounteredString;                         		// 0x0D58 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     deathsString;                                     		// 0x0D64 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     totalExpString;                                   		// 0x0D70 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     totalManaString;                                  		// 0x0D7C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mvpString;                                        		// 0x0D88 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     awardsString;                                     		// 0x0D94 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelString;                                      		// 0x0DA0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     teamScoreString;                                  		// 0x0DAC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     waveString;                                       		// 0x0DB8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     enemiesString;                                    		// 0x0DC4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     spawnedString;                                    		// 0x0DD0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     killedString;                                     		// 0x0DDC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     playerDamageString;                               		// 0x0DE8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     upgradedString;                                   		// 0x0DF4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     damageTakenString;                                		// 0x0E00 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     towerString;                                      		// 0x0E0C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     heroString;                                       		// 0x0E18 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     repeatLevelString;                                		// 0x0E24 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     nextLevelString;                                  		// 0x0E30 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     closeString;                                      		// 0x0E3C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     lobbyString;                                      		// 0x0E48 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bestString;                                       		// 0x0E54 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     leastString;                                      		// 0x0E60 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mostString;                                       		// 0x0E6C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     naString;                                         		// 0x0E78 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerString;                                     		// 0x0E84 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     scoreString;                                      		// 0x0E90 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     campaignString;                                   		// 0x0E9C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     pureStrategyString;                               		// 0x0EA8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     survivalString;                                   		// 0x0EB4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     highestString;                                    		// 0x0EC0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     numberString;                                     		// 0x0ECC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	class UUIButton_Scripted*                          nextLevelButton;                                  		// 0x0ED8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          nextLevelButtonTopLevel;                          		// 0x0EDC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_GameStatsPopup*              PopUp;                                            		// 0x0EE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          CloseButton;                                      		// 0x0EE4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeadZone;                                         		// 0x0EE8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MVPIndex;                                         		// 0x0EEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                realMVPIndex;                                     		// 0x0EF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              scrollDir;                                        		// 0x0EF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UDunDefPlayerStats* >                bestOfStats;                                      		// 0x0EF8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UUIToggleButton*                             leaderboardToggle;                                		// 0x0F04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    statsPanel;                                       		// 0x0F08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    receivingLabel;                                   		// 0x0F0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OpenGameOverAnimation;                            		// 0x0F10 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OpenLevelVictoryAnimation;                        		// 0x0F18 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     receivingString;                                  		// 0x0F20 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     exitString;                                       		// 0x0F2C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	int                                                defaultPanel;                                     		// 0x0F38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          nextMode;                                         		// 0x0F3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          PrevMode;                                         		// 0x0F40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIPanel_Leaderboard*                        leaderboardPanel;                                 		// 0x0F44 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                enemyPopupWaveIndex;                              		// 0x0F48 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TheCustomInitIndex;                               		// 0x0F4C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     unknownString;                                    		// 0x0F50 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              fontHeight;                                       		// 0x0F5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     campaignTag;                                      		// 0x0F60 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              checkLoginTimer;                                  		// 0x0F6C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              checkLoginDelay;                                  		// 0x0F70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              selectorPadValueX;                                		// 0x0F74 (0x0004) [0x0000000000000000]              
	float                                              selectorPadValueY;                                		// 0x0F78 (0x0004) [0x0000000000000000]              
	class UUIPanel*                                    popupClipPanel;                                   		// 0x0F7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    popupBackground;                                  		// 0x0F80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              longLine;                                         		// 0x0F84 (0x0004) [0x0000000000000000]              
	int                                                mouseOverSelection;                               		// 0x0F88 (0x0004) [0x0000000000000000]              
	class UUIButton*                                   CancelDeletionButton;                             		// 0x0F8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmDeletionButton;                            		// 0x0F90 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   DeletionPanel;                                    		// 0x0F94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DeletionLabel;                                    		// 0x0F98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIObject* >                         ConfirmationButtons;                              		// 0x0F9C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AnimShowDeletionConfirmation;                     		// 0x0FA8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimHideDeletionConfirmation;                     		// 0x0FB0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                FocusCounter;                                     		// 0x0FB8 (0x0004) [0x0000000000000000]              
	int                                                DeletionReason;                                   		// 0x0FBC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42266 ];

		return pClassPointer;
	};

	void UIPostRender ( class UCanvas* C );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void UnhideLeaderboardTab ( );
	void HideLeaderboardTab ( );
	bool NotifyLoginStatusChanged ( int ControllerId, unsigned char Status );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void CheckLoginForLeaderboard ( );
	void RenderPerWaveBreakdown ( class UCanvas* C, int StatClassIndex );
	bool RenderTowerPopup ( class UCanvas* C, int towerIndex );
	bool RenderEnemyPopup ( class UCanvas* C, int enemyIndex );
	void RenderHeroPopup ( class UCanvas* C, int heroIndex );
	void CheckLongLine ( class UCanvas* C, struct FStatRenderEntry entryToCheck );
	void SetupHeroPopupPanel ( int heroIndex );
	struct FVector2D CenterPopup ( class UCanvas* C, float Width, float Height, float XOffset, float YOffset, class UTexture2D* forceBGTexture, unsigned long clipRight );
	void AdjustPopupBackground ( float Width, float Height, class UTexture2D* forceBGTexture, float* newBufferX, float* newBufferY );
	struct FString BuildBestOfString ( int PlayerIndex, int StatClassIndex, struct FString BufferName, unsigned long isRecent, class UTexture2D** HeroIcon, struct FString* partTwo );
	void RenderBestOfStat ( class UCanvas* C, int StatClassIndex, int PlayerIndex, struct FString headerString, unsigned long Time, float* lineX, float* lineY );
	void RenderCompletionIcons ( class UCanvas* C, int heroIndex, float* lineX, float* lineY );
	void RenderStatEntries ( class UCanvas* C, TArray< struct FStatRenderEntry > statsToRender, struct FString headerString, float* lineX, float* lineY );
	TArray< struct FStatRenderEntry > GetPlayerSpecificNamedTowerStats ( int StatIndex, int PlayerIndex );
	TArray< struct FStatRenderEntry > GetPlayerSpecificNamedKillStats ( int StatIndex, int PlayerIndex );
	void CheckNewBest ( class UCanvas* C, int PlayerIndex, int StatClassIndex );
	int CountAwards ( int heroIndex, unsigned char award );
	void RenderPopup ( class UCanvas* C );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void ToggleEnemyWaveIndex ( int Dir );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool OnInterceptedInputKey ( struct FInputEventParameters* EventParms );
	bool OnReceivedInputAxis ( struct FInputEventParameters* EventParms );
	struct FString BuildAwardsString ( int PlayerIndex, unsigned long bFull );
	void AppendAwardsString ( unsigned char whichAward, int Count, int total, unsigned long bFull, unsigned long bFinalAward, struct FString* Source );
	void SetMVPAwards ( struct FString mvpAwards );
	void SetHeroMIC ( int heroIndex, class UUIObject* Target );
	void UpdateText ( );
	void ClearText ( );
	void SetTextLine ( int Line, struct FString column0, struct FString column1, struct FString column2, struct FString column3 );
	void MoveDown ( );
	void MoveUp ( );
	void DeactivatePopup ( );
	void ActivatePopup ( );
	void ShowHeroObjects ( unsigned long bShouldShow );
	void FocusSelector ( );
	void SetSelected ( int Index );
	struct FString BuildFeedbackString ( struct FString feedbackText );
	void eventUpdate ( float DeltaTime );
	int MouseSelectionIndex ( );
	void ClearSelectorObjects ( );
	void UpdateSelectorObjects ( int numSelectors );
	void SetupSelectorObjects ( );
	void ActivatePanel ( int panelIndex );
	bool RightWaveClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	bool LeftWaveClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	bool RightPanelClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	bool LeftPanelClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	bool ToggleButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	void AddPlayerStats ( int Index );
	void AddEnemyStats ( struct FName enemyName );
	void AddTowerStats ( struct FName towerName );
	void Preprocess ( );
	void CustomInit ( int CustomInitIndex );
	struct FName GetOpenAnimation ( );
	void ShowDeletionConfirmation ( int Reason );
};

UClass* UUI_GameStats::pClassPointer = NULL;

// Class UDKGame.DunDefProjectile
// 0x00F8 (0x0354 - 0x025C)
class ADunDefProjectile : public AProjectile
{
public:
	class ADunDefEmitterSpawnable*                     ProjectileEmitterTemplate;                        		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ImpactEmitterTemplate;                            		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseHitNormalForImpactEmitter : 1;                		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseNetKillArrayIndex : 1;                        		// 0x0264 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowFriendlyImpact : 1;                         		// 0x0264 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceDisableLight : 1;                           		// 0x0264 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      AlsoCreateDownwardDecal : 1;                      		// 0x0264 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEmitterAttachToImpactedPawnSKMesh : 1;           		// 0x0264 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      ScaleHeroDamage : 1;                              		// 0x0264 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSecondScaleDamageStatOnAdditionalDamage : 1;     		// 0x0264 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bSecondScaleDamageStatType : 1;                   		// 0x0264 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      MultiplyProjectileDamageByWeaponDamage : 1;       		// 0x0264 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      ScaleMomentumForPawnMass : 1;                     		// 0x0264 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      OnlyCollideWithIgnoreClasses : 1;                 		// 0x0264 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bScaleImpactEmitterByProjectileSize : 1;          		// 0x0264 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bReplicateWeaponProjectile : 1;                   		// 0x0264 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bLimitDistance : 1;                               		// 0x0264 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bPlayImpactEffectOnHittingPawn : 1;               		// 0x0264 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bScaleVisualsForDamage : 1;                       		// 0x0264 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bMakeEnemyCough : 1;                              		// 0x0264 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bUseProjectilePerDistanceScalling : 1;            		// 0x0264 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bAllowReflect : 1;                                		// 0x0264 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bApplyBuffsOnAoe : 1;                             		// 0x0264 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bAlwaysUseRandomDamageType : 1;                   		// 0x0264 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bForceNoRotClamping : 1;                          		// 0x0264 (0x0004) [0x0000000000002020] [0x00400000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bExpired : 1;                                     		// 0x0264 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      setEmitterColour : 1;                             		// 0x0264 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	float                                              ProjDamage;                                       		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjDamageRadius;                                 		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjMomentumTransfer;                             		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ProjDamageType;                                   		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          ImpactDecalMaterial;                              		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactDecalSizeMin;                               		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactDecalSizeMax;                               		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactDecalDepth;                                 		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadiusFallOffExponent;                      		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactDecalLifespanNonMITV;                       		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileSpeed;                                  		// 0x0290 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              ProjectileMaxSpeed;                               		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      AdditionalDamageType;                             		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AdditionalDamageAmount;                           		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileLifespan;                               		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DamageClassesToIgnore;                            		// 0x02A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      ScaleDamageStatType;                              		// 0x02B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SecondScaleDamageStatType;                        		// 0x02B1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeaponIndex;                                      		// 0x02B2 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      KillArrayIndex;                                   		// 0x02B3 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              ScaleDamageStatExponent;                          		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumDecalRange;                                		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPawnMassMomentumScale;                         		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinPawnMassMomentumScale;                         		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LimitDistanceAmount;                              		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LimitDistanceGRIMultiplier;                       		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PawnImpactSound;                                  		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileDamageVisualScalingExponent;            		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileDamageVisualScalingExponentSmall;       		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileMinimumScaleMult;                       		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileMaximumScaleMult;                       		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileVisualScaleBaseDamageMult;              		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AdditionalProjectileVelocity;                     		// 0x02E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AEmitterSpawnable*                           EmitterToAttachToImpactedActor;                   		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileMaximumScaleGlobalMult;                 		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileDamagePerDistanceTravelled;             		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UDunDefBuff* >                       BuffsToApplyOnImpact;                             		// 0x02FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            RandomDamageTypes;                                		// 0x0308 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     LimitDistanceStartingLocation;                    		// 0x0314 (0x000C) [0x0000000000000000]              
	int                                                MyTargetingTeam;                                  		// 0x0320 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              TimeAlive;                                        		// 0x0324 (0x0004) [0x0000000000000000]              
	class AActor*                                      OtherActorToIgnore;                               		// 0x0328 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      AimAtTarget;                                      		// 0x032C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ProjectileVisualScaleMult;                        		// 0x0330 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ADunDefEmitterSpawnable*                     MyAttachedEmitter;                                		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      HomingTarget;                                     		// 0x0338 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FColor                                      newEmitterColor;                                  		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIActorModifierInterface*                    MyActorStatModifier;                              		// 0x0340 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0344 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnProjectileImpacted__Delegate;                 		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42490 ];

		return pClassPointer;
	};

	class UIActorModifierInterface* GetStatModifierObject ( );
	float GetStatValueByTag ( float initalValue, struct FString StatTag, class UIActorModifierInterface* TagActor, unsigned char statType, unsigned long bBaseValueOnly );
	void InitalizeActorStats ( class UIActorModifierInterface* ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly );
	void DoDestroy ( );
	bool AllowReflect ( );
	void OnProjectileImpacted ( class ADunDefProjectile* theProjectile, class AActor* impactedOn );
	bool HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool AllowDamage ( class AActor* aTarget );
	bool DunDefProjHurtRadius ( float BaseDamage, float TheDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void EndRadiusDamage ( );
	void AffectVictim ( class AActor* Victim );
	void StartRadiusDamage ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	bool SpawnImpactDecal ( class UMaterialInterface* impactMat, struct FVector HitLocation, struct FVector HitNormal, float SizeChange, unsigned long bDontCheckImpactedActor );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	void ScaleForHeroModifiers ( unsigned long IsFirstTime, class UDunDefHero* MyHero );
	bool AllowHeroGUID ( int GUID1, int GUID2, int GUID3, int GUID4 );
	void InitializeDD ( );
	void ScaleProjectileVisualEffect ( );
	void Init ( struct FVector Direction );
	void InitProjectile ( struct FVector Direction, class APawn* MyInstigator, float baseDamageForScaling, class AActor* myHomingTarget, class UIActorModifierInterface* MyActorModifier );
	void eventDestroyed ( );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	bool IsImpactAllowed ( class AActor* Other );
	void Expire ( );
	void RefreshSpeedLifeSpan ( );
	void eventPostBeginPlay ( );
	void SetRandomDamageType ( );
	void SetClientSideLocation ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefProjectile::pClassPointer = NULL;

// Class UDKGame.UI_EquipmentInfo
// 0x0020 (0x065C - 0x063C)
class UUI_EquipmentInfo : public UDunDefUIScene
{
public:
	struct FName                                       ItemBoxCloseAnimation;                            		// 0x063C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ItemBoxOpenAnimation;                             		// 0x0644 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UHeroEquipment*                              myEquipment;                                      		// 0x064C (0x0004) [0x0000000000000000]              
	class UUI_HeroInfo*                                OwnerHeroInfoUI;                                  		// 0x0650 (0x0004) [0x0000000000000000]              
	class UDunDefHero*                                 MyHero;                                           		// 0x0654 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsInForge : 1;                                   		// 0x0658 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsInEquipmentBox : 1;                            		// 0x0658 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsInShop : 1;                                    		// 0x0658 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      WasInvesting : 1;                                 		// 0x0658 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsRemoteHero : 1;                                		// 0x0658 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42601 ];

		return pClassPointer;
	};

	void InitForEquipment ( class UDunDefHero* hero, class UHeroEquipment* theEquipment, unsigned long IsInForge, class UUI_HeroInfo* heroInfoUI, unsigned long IsRemoteHero, unsigned long IsInEquipmentBox, class AActor* forgeActor, unsigned long bIsInTrade, unsigned long bIsInPlayerShop );
	void eventSceneDeactivated ( );
};

UClass* UUI_EquipmentInfo::pClassPointer = NULL;

// Class UDKGame.UI_SwapHero
// 0x0058 (0x0694 - 0x063C)
class UUI_SwapHero : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           HeroDataList;                                     		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SwapButton;                                       		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CloseButton;                                      		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DeleteButton;                                     		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   HeroInfoButton;                                   		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CreateNewHeroButton;                              		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CancelDeletionButton;                             		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmDeletionButton;                            		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   DeletionPanel;                                    		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DeletionHeroNameLabel;                            		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIObject* >                         ConfirmationButtons;                              		// 0x0664 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AnimShowDeletionConfirmation;                     		// 0x0670 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimHideDeletionConfirmation;                     		// 0x0678 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              CreateHeroUIScene;                                		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DeleteHeroSound;                                  		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ChangingUser : 1;                                 		// 0x0688 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      RefreshHeroListOnUpdate : 1;                      		// 0x0688 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bShowingDeletionConfirmation : 1;                 		// 0x0688 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDontRefreshHeroList : 1;                         		// 0x0688 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bDontRecurse : 1;                                 		// 0x0688 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSwappingHeroes : 1;                              		// 0x0688 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	int                                                FocusCounter;                                     		// 0x068C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefHero*                                 SwappingHero;                                     		// 0x0690 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42602 ];

		return pClassPointer;
	};

	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void SelectHeroNumber ( int Num );
	void Update ( float DeltaTime );
	void InstantSwapHero ( int HeroOffset );
	void swapHero ( );
	void RefreshedList ( );
	void RefreshHeroList ( class UDunDefHero* defaultSelectedHero, unsigned long bSelectFirstAvailable );
	bool EntryEnabledCheck ( class UDataListEntryInterface* dataEntry );
	void PrepareToRefreshHeroList ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void DeleteSelectedHero ( );
	void HeroEntrySelected ( class UUIButton_DataListEntry* Button );
	void PostInitialSceneUpdate ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	class UDunDefHeroManager* GetHeroManager ( );
};

UClass* UUI_SwapHero::pClassPointer = NULL;

// Class UDKGame.DunDefManaToken
// 0x0065 (0x0371 - 0x030C)
class ADunDefManaToken : public AKActorSpawnable
{
public:
	float                                              ManaPower;                                        		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraAttractionForceMultiplier;                   		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     CollectedEmitterTemplate;                         		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ExpiredEmitterTemplate;                           		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExpirationTime;                                   		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttractionForceStabilizationScalar;               		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstigatorWaitTime;                               		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttractionForceMultiplier;                        		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttractAfterInitialTime;                          		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowCollectionAtMaxManaPower : 1;               		// 0x0330 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDontDestroyOverLimit : 1;                        		// 0x0330 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseCombatLifeSpan : 1;                           		// 0x0330 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAllowAttraction : 1;                             		// 0x0330 (0x0004) [0x0000000000000021] [0x00000008] ( CPF_Edit | CPF_Net )
	unsigned long                                      WasCollected : 1;                                 		// 0x0330 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bFellOutOfWorld : 1;                              		// 0x0330 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bHasBeenLocallyCollected : 1;                     		// 0x0330 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWasCollectedByLocalPlayer : 1;                   		// 0x0330 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bUsingFallingPhysics : 1;                         		// 0x0330 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bDontPlayDestroyedEffect : 1;                     		// 0x0330 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bWasCollected : 1;                                		// 0x0330 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIsPrivate : 1;                                   		// 0x0330 (0x0004) [0x0000000000002020] [0x00000800] ( CPF_Net | CPF_Transient )
	float                                              CollideWithOtherTokensTime;                       		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FramerateForceBase;                               		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FramerateForceExponent;                           		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FramerateMaxForceMultiplier;                      		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FallingPhysicsAttractionSpeed;                    		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnableAttractionAfterTime;                        		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumAttractionDistance;                        		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 HighPerformanceMesh;                              		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefPlayer*                               MyAttractor;                                      		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefPlayer*                               InitialAttractor;                                 		// 0x0358 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              ServerCombatLifeSpan;                             		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefPawn*                                 IgnorePawn;                                       		// 0x0360 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AActor*                                      LocalIgnoreAttractor;                             		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 AllowedController;                                		// 0x0368 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              MyRating;                                         		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      collisionChannel;                                 		// 0x0370 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42605 ];

		return pClassPointer;
	};

	float GetRating ( );
	void ClearLocalCollection ( );
	void SetClearLocalCollectionTimer ( );
	int DestroyAllManaTokens ( unsigned long bBankMana );
	float GetFramerateForceScale ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void UpdateCombatLifeSpan ( float DeltaTime );
	void ClearLocalIgnoreAttractor ( );
	void AttractTo ( class ADunDefPlayer* Attractor );
	void ClearInstigator ( );
	void ReenableCollision ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void eventDestroyed ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventTornOff ( );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, class UObject* WhatHitMe );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	int GetManaPower ( );
	void Collected ( class ADunDefPlayer* byPlayer );
	void ReEnableattraction ( );
	void SetAttractionEnabled ( unsigned long newAllowAttraction );
	void ClearInitialAttractor ( );
	void SetInitialAttractor ( class ADunDefPlayer* anAttractor );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefManaToken::pClassPointer = NULL;

// Class UDKGame.DunDefGamePhaseSubscriberInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefGamePhaseSubscriberInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42609 ];

		return pClassPointer;
	};

	void ChangedGamePhases ( unsigned long IsCombatPhase );
};

UClass* UDunDefGamePhaseSubscriberInterface::pClassPointer = NULL;

// Class UDKGame.DunDefGasCloud
// 0x0074 (0x0348 - 0x02D4)
class ADunDefGasCloud : public ADunDefEmitterSpawnable
{
public:
	float                                              CloudLifeSpan;                                    		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloudRadius;                                      		// 0x02D8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned long                                      DoCough : 1;                                      		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DoDamage : 1;                                     		// 0x02DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      DoFullDamage : 1;                                 		// 0x02DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      OnlyDamageClosestActor : 1;                       		// 0x02DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      StealEnemyElementalEffect : 1;                    		// 0x02DC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RenderEnemiesUnableToAttack : 1;                  		// 0x02DC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bScaleForHeroDefenseModifiers : 1;                		// 0x02DC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseParticleParamForScale : 1;                    		// 0x02DC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseParticleParamForInverseScale : 1;             		// 0x02DC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIsAbility : 1;                                   		// 0x02DC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bdisableRateScaling : 1;                          		// 0x02DC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bNotifyWeaponDidDamage : 1;                       		// 0x02DC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      HasFadedOut : 1;                                  		// 0x02DC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      HasTicked : 1;                                    		// 0x02DC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	float                                              EffectInterval;                                   		// 0x02E0 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              DamageAmount;                                     		// 0x02E4 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UClass*                                      MyDamageType;                                     		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageMomentum;                                   		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            IgnoreActorClasses;                               		// 0x02F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CloudLifeSpanMultiplierExponent;                  		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloudDamageMultiplierExponent;                    		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloudAOEMultiplierExponent;                       		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloudEffectRateMultiplierExponent;                		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageFalloffExponent;                            		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FActorTypeDamageMultiplier >        ActorTypeDamageMultipliers;                       		// 0x0310 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       ParticleScaleParamName;                           		// 0x031C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloudEffectRadius;                                		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScalarStat;                                       		// 0x0328 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ClosestTarget;                                    		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADunDefTower*                                SpawnerTower;                                     		// 0x0330 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              lastTowerSpeed;                                   		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeLastSpeedUpdate;                              		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BaseSpeed;                                        		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              lastTowerDamage;                                  		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              timeLastDamageUpdate;                             		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42614 ];

		return pClassPointer;
	};

	bool eventAllowSpawn ( class AActor* theArchetype, struct FVector theLoc, struct FRotator theRot );
	float StaticGetCloudLifeSpan ( float lifeSpanStatModifier, class ADunDefGasCloud* gCloud );
	float StaticGetAttackRange ( float attackRangeStatModifier, class ADunDefGasCloud* gCloud );
	float StaticGetAttackDamage ( float damageStatModifier, class ADunDefGasCloud* gCloud );
	float StaticGetAttackRate ( float attackRateStatModifier, class ADunDefGasCloud* gCloud );
	void UpdateEffectInterval ( );
	float GetDamageMult ( );
	void ScaleRadiusEffect ( );
	void ScaleForHeroModifiers ( unsigned long IsFirstTime );
	bool AllowHeroGUID ( int GUID1, int GUID2, int GUID3, int GUID4 );
	void InitializeDD ( );
	void SetLifeSpanTimeout ( );
	void eventPostBeginPlay ( );
	float GetTargetDesirability ( class UDunDefTargetableInterface* aTarget );
	void EffectTimer ( );
	float GetRadiusDamage ( float theBaseDamage, class AActor* Victim );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool IsClassOnIgnoreList ( class UClass* ActorClass );
	void FadeOut ( float theLightFadeOutTime );
	void eventReplicatedEvent ( struct FName VarName );
	void NotifyWeapon ( class AActor* Target );
};

UClass* ADunDefGasCloud::pClassPointer = NULL;

// Class UDKGame.UI_BuildTimer
// 0x0070 (0x06AC - 0x063C)
class UUI_BuildTimer : public UDunDefUIScene
{
public:
	class UDunDef_SeqAct_OpenBuildUI*                  BuildTimerUIAction;                               		// 0x063C (0x0004) [0x0000000000000000]              
	class UUILabel*                                    BuildTimerLabel;                                  		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BuildSkipLabel;                                   		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    KillCountLabel;                                   		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   BuildReadyPanel;                                  		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TimerBeep;                                        		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimerBeepStartTime;                               		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimerBeepMinVolume;                               		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimerBeepMaxVolume;                               		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           SplitscreenPostTransforms;                        		// 0x0660 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           SplitscreenPostTranslationOffsets;                		// 0x066C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaximumBuildTime;                                 		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     KillCountString;                                  		// 0x067C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              TotalBuildTime;                                   		// 0x0688 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ServerLastSentBuildTime;                          		// 0x068C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OpenSceneTime;                                    		// 0x0690 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTimerBeepTime;                                		// 0x0694 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NextKillCount;                                    		// 0x0698 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     OldBuildSkipString;                               		// 0x069C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bFinishedBuildPhase : 1;                          		// 0x06A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42619 ];

		return pClassPointer;
	};

	void FinishBuildPhase ( );
	void Update ( float DeltaTime );
	void RefreshKillCount ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void ExecReplicatedUIMessage ( struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* UUI_BuildTimer::pClassPointer = NULL;

// Class UDKGame.DunDefWaveBillboard
// 0x01B4 (0x03D0 - 0x021C)
class ADunDefWaveBillboard : public AInfo
{
public:
	struct FVector                                     BillboardOffset;                                  		// 0x021C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              BillboardScale;                                   		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MainLabelColor;                                   		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EnemyLabelColor;                                  		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            AssociatedSpawnPoints;                            		// 0x0234 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MiniMapScale;                                     		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  HeaderBGTexture;                                  		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  HeaderBGTextureMiniMap;                           		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeaderBGScale;                                    		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeaderBGSizeX;                                    		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeaderBGSizeY;                                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeaderOffsetX;                                    		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeaderOffsetY;                                    		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeaderTextScale;                                  		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  TileBGTexture;                                    		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  TileBGTextureMiniMap;                             		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileBGScale;                                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileBGSizeX;                                      		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileBGSizeY;                                      		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileOffsetX;                                      		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileOffsetY;                                      		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileTextScale;                                    		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileTextOffsetX;                                  		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileTextOffsetY;                                  		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyIconOffsetX;                                 		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyIconOffsetY;                                 		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyIconSizeX;                                   		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyIconSizeY;                                   		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeaderTextOffsetY;                                		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  EnemyIconBGTexture;                               		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  EnemyIconBGTextureMiniMap;                        		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MiniMapOffset;                                    		// 0x02A8 (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FString                                     enemiesString;                                    		// 0x02B4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UTextComponent*                              TheTextComponent;                                 		// 0x02C0 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MinFadeDistance;                                  		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeDistanceOffset;                               		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinFadeOpacity;                                   		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeDotExponent;                                  		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FirstNewWaveDrawTime;                             		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCombatPhaseBeginTime;                         		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bWasCombatPhase : 1;                              		// 0x02DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FWaveDisplayEntry                           WaveDisplayEntries[ 0xF ];                        		// 0x02E0 (0x00F0) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42622 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	int GetEntryIndexForEnemyType ( class ADunDefEnemy* EnemyArchetype );
	int GetFreeDisplayEntryIndex ( );
	void RefreshBillboard ( );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	void DrawBillboard ( class UCanvas* C, struct FVector ScreenPos, float Scale, float Opacity, unsigned long bIsMiniMap );
	bool DrawMyHUD ( class ADunDefHUD* H );
	bool OnlyDrawHUDForOwner ( );
	void ClearEnemyEntries ( );
	void ChangedGamePhases ( unsigned long IsCombatPhase );
};

UClass* ADunDefWaveBillboard::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Generic
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Generic : public UDunDefDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42687 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Generic::pClassPointer = NULL;

// Class UDKGame.DunDefForge
// 0x017C (0x0398 - 0x021C)
class ADunDefForge : public AActor
{
public:
	struct FColor                                      ToolTipDrawColor;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipOutOfRangeColor;                           		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipInvalidUseColor;                           		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      MySkeletalMesh;                                   		// 0x0228 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    AmbientParticleEffect;                            		// 0x022C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUI_ForgeMenu*                               ForgeUITemplate;                                  		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationDistance;                               		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeaderboardScaleInterpSpeed;                      		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x023C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ActiveBlenderName;                                		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ActiveParticleEffect;                             		// 0x0248 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ActiveSoundComp;                                  		// 0x024C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   ActivateSound;                                    		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DeactivateSound;                                  		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   topLeaderboardSound;                              		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationString_FailureDuringCombatPhase;        		// 0x025C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationString_Use;                             		// 0x0268 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AltActivationString;                              		// 0x0274 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DescriptiveName;                                  		// 0x0280 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     topLeaderboardMessageString;                      		// 0x028C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      topLeaderboardMessageColor;                       		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowActivationInCombatPhase : 1;                		// 0x029C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseLeaderboardStringTest : 1;                    		// 0x029C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableActivation : 1;                           		// 0x029C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowTopLeaderboardMessage : 1;                   		// 0x029C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceEnableControllerWeighting : 1;              		// 0x029C (0x0004) [0x0000000000000021] [0x00000010] ( CPF_Edit | CPF_Net )
	unsigned long                                      IsActive : 1;                                     		// 0x029C (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      WasActive : 1;                                    		// 0x029C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bHidingLeaderboardSign : 1;                       		// 0x029C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShowingLeaderboardSign : 1;                      		// 0x029C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDisplayingLeaderboardEntry : 1;                  		// 0x029C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      SuccessfulLeaderBoardRead : 1;                    		// 0x029C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      shouldHideSign : 1;                               		// 0x029C (0x0004) [0x0000000000000000] [0x00000800] 
	struct FString                                     LeaderboardStringTest;                            		// 0x02A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UStaticMeshComponent*                        LeaderboardSignComp;                              		// 0x02AC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTextComponent*                              LeaderboardSignTextComp;                          		// 0x02B0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTextComponent*                              LeaderboardSignTextShadowComp;                    		// 0x02B4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPointLightComponent*                        ActivatedPointLightComp;                          		// 0x02B8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LightBrightnessUpSpeed;                           		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightBrightnessDownSpeed;                         		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeBlend*                              ActiveBlender;                                    		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CurrentLeaderboardNickName;                       		// 0x02C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CurrentLeaderboardHeroName;                       		// 0x02D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FRotator                                    ReplicatedRotation;                               		// 0x02E0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	TArray< class ADunDefPlayerController* >           UsingPCs;                                         		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FOnlineStatsRow                             CachedOnlineStatsRow;                             		// 0x02F8 (0x0030) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UTexture2D*                                  MiniMapIconTexture;                               		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSize;                                  		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconColor;                                 		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconColorDisabled;                         		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       ForgeFont;                                        		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefDataStore_OnlineStats*                statsStore;                                       		// 0x033C (0x0004) [0x0000000000000000]              
	struct FString                                     leaderboardSignPrefix;                            		// 0x0340 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     leaderboardEmptyString1;                          		// 0x034C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     leaderboardEmptyString2;                          		// 0x0358 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     scoreString;                                      		// 0x0364 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelString;                                      		// 0x0370 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     unknownClassString;                               		// 0x037C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	int                                                LeaderboardRetryCount;                            		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LeaderboardRetries;                               		// 0x038C (0x0004) [0x0000000000000000]              
	struct FName                                       SMAttachToSocketName;                             		// 0x0390 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42852 ];

		return pClassPointer;
	};

	bool PreventTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point, float towerRadius );
	bool AllowTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point );
	bool CheckAllowance ( );
	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	class ADunDefForge* GetAForge ( );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	bool shouldShowAltActivation ( class ULocalPlayer* ForPlayer );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	void SetLeaderboardSignString ( struct FString Value );
	void RemoveLeaderboardSign ( );
	void UpdateUnhiding ( float DeltaTime );
	void UpdateHiding ( float DeltaTime );
	void eventTick ( float DeltaTime );
	float GetActivationOffset ( );
	void ShowLobbyLevelGamerTag ( int ControllerId );
	void ShowLeaderboardEntryGamerTag ( int ControllerId );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	float GetActivationWeighting ( );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	void ChangedGamePhases ( unsigned long IsCombatPhase );
	void UpdateLeaderboardSign ( );
	void ShowLeaderboardSign ( );
	void HideLeaderboardSign ( );
	void CheckCombatPhase ( );
	void eventDestroyed ( );
	void ClearLeaderboardDelegate ( );
	void GetLeaderboardSignString ( );
	void OnLeaderboardReadComplete ( unsigned long bWasSuccessful );
	void ServerAnalyzeHighScoresAgainstCache ( );
	void ClientUpdateLeaderBoardString ( struct FString UberString, int HighScore );
	void CheckForLeaderboardHUDMessage ( struct FString NickName, struct FString HeroName, int Score );
	void RefreshLeaderboardSign ( unsigned long shouldHide );
	void eventPostBeginPlay ( );
	void Deactivate ( );
	void LightInterpDown ( );
	void LightInterpUp ( );
	void Activate ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefForge::pClassPointer = NULL;

// Class UDKGame.DunDefCustomNode
// 0x000C (0x0234 - 0x0228)
class ADunDefCustomNode : public ANote
{
public:
	int                                                CustomData;                                       		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefCustomNode*                           LinkedNode;                                       		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      LinkedActor;                                      		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43074 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefCustomNode::pClassPointer = NULL;

// Class UDKGame.HeroEquipment_Familiar_TowerBooster
// 0x0064 (0x0B54 - 0x0AF0)
class UHeroEquipment_Familiar_TowerBooster : public UHeroEquipment_Familiar
{
public:
	float                                              BaseBoostRange;                                   		// 0x0AF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostRangeExponent;                               		// 0x0AF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MyTowerBoostType;                                 		// 0x0AF8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoostTowerAnim;                                   		// 0x0AFC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ETBAttackRateExponent;                            		// 0x0B04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ETBAttackRangeExponent;                           		// 0x0B08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ETBDamageExponent;                                		// 0x0B0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ETBResistanceExponent;                            		// 0x0B10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostAmountMultiplier;                            		// 0x0B14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRangeBoostStat;                                		// 0x0B18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BoostTowerEffect;                                 		// 0x0B1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTowerBoostStat;                                		// 0x0B20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TowerBoostStatUpgradeInterval;                    		// 0x0B24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxNumberOfTowersToBoost;                         		// 0x0B28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SoftMaxNumberOfTowersToBoost;                     		// 0x0B2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxBoostStatValue;                                		// 0x0B30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefTargetableInterface*                  BestTargetRef;                                    		// 0x0B34 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0B38 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UDunDefTargetableInterface* >        AdditionalTargetRefs;                             		// 0x0B3C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoreTowerForMyBoost;                            		// 0x0B48 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43112 ];

		return pClassPointer;
	};

	int GetStatLevelUpAmountIterations ( unsigned char EQS, int Value, int statSubIndex );
	int GetNextStatLevelUpValue ( unsigned char EQS, int statSubIndex, unsigned long SetAsValue );
	int GetShiftClickUpgradeCount ( );
	void InitFromNetInfo ( struct FEquipmentNetInfo Info, class UObject* fromDroppedEquipment );
	void AddRandomizeValues ( float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear );
	bool CheckStatLevelUpIterations ( unsigned char EQS, int statSubIndex, int EquipmentLevelToCheck, float Value );
	bool AllowStatLevelUp ( unsigned char EQS, int statSubIndex, unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement );
	void NotifyEquipment_PawnAttacked ( int FireMode );
	struct FRotator GetDesiredSphereRotationalPlacement ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget );
	struct FRotator GetDesiredDirection ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	void GetFurthestAdditionalTarget ( struct FVector playerLoc, class AActor** furthestTarget, float* furthestRangeSq );
	void UpdateAdditionaBoostTargets ( );
	void RemoveAllTargets ( );
	void ShutDown ( unsigned long isDestruction );
	class UDunDefTargetableInterface* GetBestAdditionalBoostTarget ( );
	class UDunDefTargetableInterface* GetBestTarget ( );
	float GetBoostRange ( );
	float GetTowerBoostAmount ( unsigned char boostType );
	bool HasTowerBoostingType ( unsigned char checkType );
	class UDunDefTargetableInterface* GetTowerBoostingTarget ( );
};

UClass* UHeroEquipment_Familiar_TowerBooster::pClassPointer = NULL;

// Class UDKGame.HeroEquipment_Familiar_TowerHealer
// 0x0044 (0x0B34 - 0x0AF0)
class UHeroEquipment_Familiar_TowerHealer : public UHeroEquipment_Familiar
{
public:
	float                                              HealInterval;                                     		// 0x0AF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAttackAnimationSpeed;                          		// 0x0AF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealRange;                                        		// 0x0AF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     PawnHealEffect;                                   		// 0x0AFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseHealAmount;                                   		// 0x0B00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealAmountMultiplier;                             		// 0x0B04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostPerHealUnit;                              		// 0x0B08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaCostPerTrapCharge;                            		// 0x0B0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTowerHealthPercentToRepair;                    		// 0x0B10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareHealingMultiplier;                       		// 0x0B14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DetonationTypeHealInterval;                       		// 0x0B18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHealOverRadius : 1;                              		// 0x0B1C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFixedHealSpeed : 1;                           		// 0x0B1C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bScaleRepairWithTowerHealthScaler : 1;            		// 0x0B1C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoingHealing : 1;                                		// 0x0B1C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              HealRadius;                                       		// 0x0B20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastHealTime;                                     		// 0x0B24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefTargetableInterface*                  BestTargetRef;                                    		// 0x0B28 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0B2C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                detonationTypeHealCounter;                        		// 0x0B30 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43113 ];

		return pClassPointer;
	};

	void NotifyEquipment_AnimNotifyAttachment ( int NotifyID, class USkeletalMeshComponent* equipmentSkelComp );
	void DoHealing ( );
	int GetWeaponDamage ( );
	void ApplyPrimaryDamageMultiplierDisplay ( int* StatValue );
	float GetEquipmentStatValue ( unsigned char equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp );
	float GetAttackInterval ( );
	float GetHealAmount ( );
	void NotifyEquipment_PawnAttacked ( int FireMode );
	struct FRotator GetDesiredSphereRotationalPlacement ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget );
	struct FRotator GetDesiredDirection ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer );
	void UpdateAI ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	void ShutDown ( unsigned long isDestruction );
	class UDunDefTargetableInterface* GetBestTarget ( );
	void AttachedComponent ( class UPrimitiveComponent* aComp );
};

UClass* UHeroEquipment_Familiar_TowerHealer::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqEvent_CustomEvent
// 0x0010 (0x0110 - 0x0100)
class UDunDef_SeqEvent_CustomEvent : public USequenceEvent
{
public:
	struct FName                                       CustomEventName;                                  		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomEventID;                                    		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CustomEventActor;                                 		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43133 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqEvent_CustomEvent::pClassPointer = NULL;

// Class UDKGame.UI_LoadingScreen
// 0x003C (0x0678 - 0x063C)
class UUI_LoadingScreen : public UDunDefUIScene
{
public:
	TArray< class UUIImage* >                          LoadingBGImages;                                  		// 0x063C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UUIImage* >                          AltLoadingBGImages;                               		// 0x0648 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   LoadingBGMaterial;                                		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   AltLoadingBGMaterial;                             		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ProTipLabel;                                      		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ProTipShowAnimation;                              		// 0x0660 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceCloseAllUITimer;                             		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   LoadingBGMaterialInstance;                        		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   AltLoadingBGMaterialInstance;                     		// 0x0670 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OpenCounter;                                      		// 0x0674 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43316 ];

		return pClassPointer;
	};

	void ShowProTip ( );
	bool AllowGlobalVisibilityToggling ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void Update ( float DeltaTime );
	void CloseWithAnimation ( );
	bool eventCloseScene ( class UUIScene* SceneToClose, unsigned long bCloseChildScenes, unsigned long bForceCloseImmediately );
};

UClass* UUI_LoadingScreen::pClassPointer = NULL;

// Class UDKGame.UILabel_ScoreIndicator
// 0x0078 (0x0544 - 0x04CC)
class UUILabel_ScoreIndicator : public UUILabel
{
public:
	float                                              InterpSpeedFactor;                                		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LerpSpeedFactor;                                  		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScoreAddedAnimationName;                          		// 0x04D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ScoreAddingColor;                                 		// 0x04DC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ScoreNormalColor;                                 		// 0x04EC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              AwardInterval;                                    		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUILabel* >                          MajorNotificationLabels;                          		// 0x0500 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     scoreString;                                      		// 0x050C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              CurrentScore;                                     		// 0x0518 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TargetScore;                                      		// 0x051C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastDisplayScore;                                 		// 0x0520 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentInterpSpeed;                               		// 0x0524 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FScoreAwardEntry >                  ScoreAwardEntries;                                		// 0x0528 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastScoreAwardTime;                               		// 0x0534 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastPlaySpeed;                                    		// 0x0538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastMajorNotificationLabelIndex;                  		// 0x053C (0x0004) [0x0000000000000000]              
	int                                                LastMajorNotificationLabelHiddenIndex;            		// 0x0540 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43382 ];

		return pClassPointer;
	};

	void eventCreated ( );
	void eventUpdate ( float DeltaTime );
	void ShowMajorNotificationLabel ( struct FString LabelText, struct FLinearColor LabelColor, float LabelScale, float playSpeed );
	void AddPopUp ( struct FString aString, float playSpeed, struct FLinearColor* aColor );
	void AddToScore ( int TotalScore, int AmountToAdd, struct FString ScoreAwardReason, struct FLinearColor ScoreAwardColor, float playSpeed, int ScoreTagReason, int ScoreTagAdditionalNum, int ScoreTagSecondaryNum, class AActor* ActorArchetype );
};

UClass* UUILabel_ScoreIndicator::pClassPointer = NULL;

// Class UDKGame.DunDefHUDInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefHUDInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43386 ];

		return pClassPointer;
	};

	bool OnlyDrawHUDForOwner ( );
	bool DrawMyHUD ( class ADunDefHUD* H );
};

UClass* UDunDefHUDInterface::pClassPointer = NULL;

// Class UDKGame.DunDefTower_AuraStrengthDrain
// 0x0008 (0x08BC - 0x08B4)
class ADunDefTower_AuraStrengthDrain : public ADunDefTower_Aura
{
public:
	float                                              DrainagePercent;                                  		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumStrength;                                  		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43424 ];

		return pClassPointer;
	};

	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float GetStrengthDrainMultiplier ( );
	void ExitEffect ( class ADunDefPawn* P );
	void EntryEffect ( class ADunDefPawn* P );
};

UClass* ADunDefTower_AuraStrengthDrain::pClassPointer = NULL;

// Class UDKGame.DunDefTower_DetonationType
// 0x00C4 (0x08E4 - 0x0820)
class ADunDefTower_DetonationType : public ADunDefTower_NonPhysical
{
public:
	class AActor*                                      TrapResultTemplate;                               		// 0x0820 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpringTrapLocationOffset;                         		// 0x0824 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    SpringTrapRotationOffset;                         		// 0x0830 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TrapSprungSound;                                  		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ClassTypesToSpringOn;                             		// 0x0840 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      ReplicateTrapResult : 1;                          		// 0x084C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckDetonationTouchUponReset : 1;               		// 0x084C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSetInitialRadiusScale : 1;                       		// 0x084C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDrawNumDetonations : 1;                          		// 0x084C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUsesAttackDuration : 1;                          		// 0x084C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUsesAttackRange : 1;                             		// 0x084C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUsesAttackDamage : 1;                            		// 0x084C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUsesAttackRate : 1;                              		// 0x084C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDestroyTrapResultUponSelling : 1;                		// 0x084C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	float                                              MaximumDetonations;                               		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AdditionalDetonations;                            		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetonationResetTime;                              		// 0x0858 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              DetonationResetTimeMultiplier;                    		// 0x085C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       DetonationNumberHUDFont;                          		// 0x0860 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ResettingColor;                                   		// 0x0864 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationRangeString;                            		// 0x0870 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaximumDetonationsString;                         		// 0x087C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttackDurationString;                             		// 0x0888 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DetonationResetTimeString;                        		// 0x0894 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttackDamagePerSecondString;                      		// 0x08A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              IconDistanceScalar;                               		// 0x08AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                repairHealthPerCharge;                            		// 0x08B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                partialRepairCount;                               		// 0x08B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReplicatedStatModifier_DefenseAttackRate;         		// 0x08B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedStatModifier_DefenseAOE;                		// 0x08BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedStatModifier_DefenseHealth;             		// 0x08C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ADunDefPawn*                                 TrapSprungVictim;                                 		// 0x08C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      TrapResult;                                       		// 0x08C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RadiusScale;                                      		// 0x08CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                NumDetonations;                                   		// 0x08D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxDetonations;                                   		// 0x08D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              StartRepairEnergy;                                		// 0x08D8 (0x0004) [0x0000000000000000]              
	float                                              baseCollisionRadius;                              		// 0x08DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              baseCollisionHeight;                              		// 0x08E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43428 ];

		return pClassPointer;
	};

	bool UsesRange ( );
	float GetGlobalTowerHealthMultiplier ( );
	float GetDamageMultiplier ( );
	bool CanTargetInvisibleTarget ( class UDunDefTargetableInterface* aTarget );
	void HealPctOfMaxHealth ( float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers );
	void HealDetonationStyle ( int HealAmt, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void AddHealth ( int howMuch, unsigned long bDontDisplayFloatingNumber );
	void PlaySellFX ( );
	bool UseForTowerSelectionPassThrough ( );
	class UClass* GetDamageType ( );
	void PerformFullHeal ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float IncrementRepair ( float CurrentMana, float DeltaTime );
	float GetCurrentRepairPercentage ( float StartRepairTime, float RepairSpeed );
	void StartRepair ( );
	float GetTimeOfTotalRepair ( );
	float GetTimeToRepair ( );
	float GetCostToRepair ( );
	bool NeedsRepair ( unsigned long requireFullHealth );
	int GetMaxDetonations ( );
	float StaticGetTowerScale ( class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler );
	float StaticGetAttackRange ( class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler );
	float GetAttackDamage ( );
	float GetAttackRate ( );
	float GetAttackDuration ( );
	float GetAttackRange ( );
	float GetCollisionRadius ( );
	void SetRadiusScale ( float theRadiusScale );
	struct FString GetToolTipText ( );
	void RemoveTowerBooster ( class UTowerBoosterInterface* aBooster, int indexOverride );
	void AddTowerBooster ( class UTowerBoosterInterface* aBooster );
	void ScaleForHeroModifiers ( unsigned long IsFirstTime );
	void ScaleHealthMultiplier ( );
	void eventPostBeginPlay ( );
	int GetHealth ( unsigned long bGetMax );
	float GetHealthPercent ( );
	bool DrawMyHUD ( class ADunDefHUD* H );
	bool CanDetonate ( );
	void CheckOverlappedTouchingDetonation ( );
	bool CheckTouchingDetonation ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void Detonate ( int SetDetonationsNumber );
	void SpringTrap ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
	void OnDestroy_RemoveFromTargetableList ( );
	void OnPostBeginPlay_AddToTargetableList ( );
};

UClass* ADunDefTower_DetonationType::pClassPointer = NULL;

// Class UDKGame.DecalActorMovableSpawnable
// 0x0000 (0x0220 - 0x0220)
class ADecalActorMovableSpawnable : public ADecalActorMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43612 ];

		return pClassPointer;
	};

};

UClass* ADecalActorMovableSpawnable::pClassPointer = NULL;

// Class UDKGame.Dictionary_IntObj
// 0x0010 (0x004C - 0x003C)
class UDictionary_IntObj : public UObject
{
public:
	class UDictionary*                                 pDictionary;                                      		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UObject* >                           ObjList;                                          		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43615 ];

		return pClassPointer;
	};

	bool IsEmpty ( );
	void Clear ( );
	void ToArray ( unsigned long bIgnoreNullRefs, TArray< class UObject* >* OutValues );
	bool GetKeyByValue ( class UObject* ObjValue, int* OutKey );
	bool Remove ( int InKey );
	bool Get ( int InKey, class UObject** OutValue );
	void Add ( int InKey, class UObject* ObjValue );
	void Init ( );
	class UDictionary_IntObj* Create ( );
};

UClass* UDictionary_IntObj::pClassPointer = NULL;

// Class UDKGame.DLCDataListProvider
// 0x000C (0x0048 - 0x003C)
class UDLCDataListProvider : public UObject
{
public:
	TArray< class UDLCListEntry* >                     DLCListEntries;                                   		// 0x003C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43649 ];

		return pClassPointer;
	};

	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
};

UClass* UDLCDataListProvider::pClassPointer = NULL;

// Class UDKGame.DLCListEntry
// 0x0034 (0x0070 - 0x003C)
class UDLCListEntry : public UObject
{
public:
	class USurface*                                    DLCImage;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DLCAppID;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      DLCAppIDs;                                        		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DLCFriendlyName;                                  		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PurchaseURL;                                      		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                Priority;                                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPCOnly : 1;                                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMacOnly : 1;                                     		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43652 ];

		return pClassPointer;
	};

	bool IsRootEntry ( );
	int GetFolderID ( );
	void GetDataProps ( int dataSetType, struct FDataEntryProps* dProps );
	struct FString GetDataString ( int dataSetType );
	bool GetEntryEnabled ( class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject );
};

UClass* UDLCListEntry::pClassPointer = NULL;

// Class UDKGame.DunDef3DNote_Gameplay
// 0x0000 (0x0220 - 0x0220)
class ADunDef3DNote_Gameplay : public ADunDef3DNote
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43711 ];

		return pClassPointer;
	};

};

UClass* ADunDef3DNote_Gameplay::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ActivateNetworkEvent
// 0x001C (0x0104 - 0x00E8)
class UDunDef_SeqAct_ActivateNetworkEvent : public USequenceAction
{
public:
	struct FName                                       EventName;                                        		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomEventID;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bActivateForLocalPlayers : 1;                     		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      EventInstigator;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      EventOriginator;                                  		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      EventActor;                                       		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43721 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ActivateNetworkEvent::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_AddMana
// 0x0014 (0x00FC - 0x00E8)
class UDunDef_SeqAct_AddMana : public USequenceAction
{
public:
	int                                                ManaAmount;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      AddForEveryone : 1;                               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OnlyAddMinimumMana : 1;                           		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bScaleManaByPlayers : 1;                          		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bOnlyAddForActivePlayers : 1;                     		// 0x00EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bOnlyAddForPrimaryLocalPlayer : 1;                		// 0x00EC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIgnoreBankLimit : 1;                             		// 0x00EC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	TArray< float >                                    PlayerManaScales;                                 		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43732 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_AddMana::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_AddScore
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_AddScore : public USequenceAction
{
public:
	int                                                ScoreAmount;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      AddForEveryone : 1;                               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OnlyAddMinimumScore : 1;                          		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                Points;                                           		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43748 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_AddScore::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_AppPurchased
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_AppPurchased : public USequenceAction
{
public:
	int                                                APP_ID;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsDLC : 1;                                       		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43757 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_AppPurchased::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_AwardWaveCompletion
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_AwardWaveCompletion : public USequenceAction
{
public:
	int                                                WaveNumberOverride;                               		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43762 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_AwardWaveCompletion::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_BankAllDrops
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_BankAllDrops : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43767 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_BankAllDrops::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_BasicActorSpawner
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_BasicActorSpawner : public USequenceAction
{
public:
	class AActor*                                      ActorTemplate;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NetworkRemoteRole;                                		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActorDrawScaleMultiplier;                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43770 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_BasicActorSpawner::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_CheckForLevelUps
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_CheckForLevelUps : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43779 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_CheckForLevelUps::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ConcatString
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_ConcatString : public USequenceAction
{
public:
	int                                                NumFloatDecimals;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43783 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ConcatString::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_DestroyAllType
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_DestroyAllType : public USequenceAction
{
public:
	class UClass*                                      ActorClass;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseInterface : 1;                                		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UClass*                                      InterfaceClass;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43795 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_DestroyAllType::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_DisablePlayerInput
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_DisablePlayerInput : public USequenceAction
{
public:
	unsigned long                                      DisablePlayerInput : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43805 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_DisablePlayerInput::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_DisplayTutorialText
// 0x0024 (0x011C - 0x00F8)
class UDunDef_SeqAct_DisplayTutorialText : public USeqAct_Latent
{
public:
	float                                              DisplayTime;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplayAfterPlaySound;                            		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_TutorialText*                            TutorialSceneTemplate;                            		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHideIsConsideredAborted : 1;                     		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHideJustAdvanceTimer : 1;                        		// 0x0104 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisplayOnBottom : 1;                             		// 0x0104 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      forceHide : 1;                                    		// 0x0104 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPlayedSound : 1;                                 		// 0x0104 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bWasEverActivated : 1;                            		// 0x0104 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	float                                              SoundTimer;                                       		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DisplayOnBottomAnimationName;                     		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUI_TutorialText*                            MyTutText;                                        		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   MySound;                                          		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43809 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void Hide ( );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_DisplayTutorialText::pClassPointer = NULL;

// Class UDKGame.UI_TutorialText
// 0x000C (0x0648 - 0x063C)
class UUI_TutorialText : public UDunDefUIScene
{
public:
	class UUILabel*                                    TutorialTextLabel;                                		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    BottomTutorialTextLabel;                          		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDef_SeqAct_DisplayTutorialText*          MySequenceAction;                                 		// 0x0644 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43812 ];

		return pClassPointer;
	};

	void SetDisplayText ( struct FString displayText, unsigned long bDisplayOnBottom );
};

UClass* UUI_TutorialText::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqVar_TutorialData
// 0x0054 (0x00E8 - 0x0094)
class UDunDef_SeqVar_TutorialData : public USequenceVariable
{
public:
	struct FTutorialData                               PCTutorialDefault;                                		// 0x0094 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FTutorialData                               XboxTutorial;                                     		// 0x00A8 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FTutorialData                               PS3Tutorial;                                      		// 0x00BC (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FTutorialData                               MobileTutorial;                                   		// 0x00D0 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUseConsoleTutorialIfPCGamepad : 1;               		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43827 ];

		return pClassPointer;
	};

	struct FString ParsePCString ( struct FString theString );
	struct FTutorialData GetTutorialData ( );
};

UClass* UDunDef_SeqVar_TutorialData::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_EnablePostMissionCinematic
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_EnablePostMissionCinematic : public USequenceAction
{
public:
	unsigned long                                      bEnablePostMissionCinematic : 1;                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43847 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_EnablePostMissionCinematic::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_EndTBRTimer
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_EndTBRTimer : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43851 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_EndTBRTimer::pClassPointer = NULL;

// Class UDKGame.UI_KillCount
// 0x0058 (0x0694 - 0x063C)
class UUI_KillCount : public UDunDefUIScene
{
public:
	class UUIObject*                                   KillCountPanel;                                   		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage_HealthBar*                          BossHealthBar;                                    		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage_HealthBar*                          EnemyKillCountBar;                                		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefTargetableInterface*                  HealthBarBoss;                                    		// 0x0648 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x064C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                KillCountRemaining;                               		// 0x0650 (0x0004) [0x0000000000000000]              
	int                                                TotalKillCount;                                   		// 0x0654 (0x0004) [0x0000000000000000]              
	unsigned char                                      LastBossSplitType;                                		// 0x0658 (0x0001) [0x0000000000000000]              
	class UDunDef_SeqAct_OpenKillCountUI*              KillCountUIAction;                                		// 0x065C (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           SplitscreenPostTransforms;                        		// 0x0660 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           SplitscreenPostTranslationOffsets;                		// 0x066C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           BossSplitscreenPostTransforms;                    		// 0x0678 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           BossSplitscreenPostTranslationOffsets;            		// 0x0684 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bSurvivalTimeLimitGameType : 1;                   		// 0x0690 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43983 ];

		return pClassPointer;
	};

	bool IsSurvivalTimeLimitGameType ( );
	void eventSceneDeactivated ( );
	void NotifyLevelVictory ( );
	void NotifyGameOver ( );
	void StaticHideBossHealthBar ( );
	void StaticShowBossHealthBar ( class UDunDefTargetableInterface* forBoss );
	void StaticSubtractFromKillCount ( int Num );
	void eventUpdate ( float DeltaTime );
	void HideBossHealthBar ( );
	void ShowBossHealthBar ( class UDunDefTargetableInterface* forBoss );
	void SubtractFromKillCount ( int amountToSubtract );
	void HideKillCountPanel ( );
	void AddKillCountFromWaveEntries ( TArray< struct FEnemyWaveEntry >* waveEntries );
	void SetKillCountRemaining ( int theKillCountRemaining );
	void SetTotalKillCount ( int theTotalKillCount );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
	void ExecReplicatedUIMessage ( struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* UUI_KillCount::pClassPointer = NULL;

// Class UDKGame.DunDefEnemyController
// 0x01D4 (0x060C - 0x0438)
class ADunDefEnemyController : public ANativeDunDefEnemyController
{
public:
	unsigned long                                      CurrentTargetIsReachable : 1;                     		// 0x0438 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      AddAggroUponAcquiringTarget : 1;                  		// 0x0438 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDoObstructionJumpJump : 1;                       		// 0x0438 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreMoveAroundBlockade : 1;                    		// 0x0438 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bReachedInitialTarget : 1;                        		// 0x0438 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAddAggroFromBumpingTarget : 1;                   		// 0x0438 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowChoosingUntargetableTargets : 1;            		// 0x0438 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDoStuckChecks : 1;                               		// 0x0438 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bClearPlayerIgnoreOnBump : 1;                     		// 0x0438 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bForceLineOfSightWithinAttackRangeMelee : 1;      		// 0x0438 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bClearIgnoreTargetsOnAttack : 1;                  		// 0x0438 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bForceTargetReachable : 1;                        		// 0x0438 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseStuckOnBlockadeTargetingHack : 1;             		// 0x0438 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIgnoreDTMaxNumberOfAttackers : 1;                		// 0x0438 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      HasReachedNewTarget : 1;                          		// 0x0438 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bIsInPathfinding : 1;                             		// 0x0438 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bUseAlternateMovePoint : 1;                       		// 0x0438 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bUseNonCustomAttackRangeBoosting : 1;             		// 0x0438 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bDamageInterruptsAttacking : 1;                   		// 0x0438 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bIgnoreReturnPoint : 1;                           		// 0x0438 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bForceMove : 1;                                   		// 0x0438 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bForceFollow : 1;                                 		// 0x0438 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bDoNegativeAggroForUnreachableTargets : 1;        		// 0x0438 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	float                                              AttackRange;                                      		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackInterval;                                   		// 0x0440 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackIntervalRandomPercent;                      		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttackStateName;                                  		// 0x0448 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReachTargetTimeout;                               		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DestroyTargetAfterReachingTimeout;                		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClearIgnoreAttackRangeOffset;                     		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnLocationChangeTimeout;                        		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumAttackRangeDeltaZCheck;                    		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StuckOnBlockadeTargetingHackBoundsAddition;       		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NavMeshArrivalDistance;                           		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NavMeshMoveToDestinationOffset;                   		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAggroValue;                                    		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ObstructionJumpLimit;                             		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DamageClassesToIgnore;                            		// 0x0478 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AggroFactorDamagePercentageMultiplier;            		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackRotationRange;                              		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StuckOnBlockadeTargetingHackAggroAdd;             		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideReachCheckDuration;                       		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FailedReachDestinationOffset;                     		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NavActorReachableMinimumDistance;                 		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NavMeshSpreadMultiplier;                          		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddAggroFromTouchingBlockade;                     		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitialTargetNodeID;                              		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitialTargetNodeSelectionRange;                  		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitialMoveAllowanceTime;                         		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BumpAddAgroInterval;                              		// 0x04B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LocationSampleInterval;                           		// 0x04B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LocationSampleMinDistance;                        		// 0x04B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ObstructionJumpSideVec;                           		// 0x04BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ObstructionJumpFrontVec;                          		// 0x04C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastBlockadeCheckTime;                            		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CoughingAnimName;                                 		// 0x04D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastMovingAroundBlockadeActor;                    		// 0x04E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MovingAroundBlockadePoint;                        		// 0x04E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MovingAroundBlockadeDirection;                    		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastMovingAroundBlockadeTime;                     		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastBlockadeHitNormal;                            		// 0x04F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBlockadeWidth;                                		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAttackEndTime;                                		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              tempAttackInterval;                               		// 0x050C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     targetDestinationPosition;                        		// 0x0510 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UDunDefTargetableInterface* >        DarknessIgnoredTargets;                           		// 0x051C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastNewTargetTime;                                		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastReachedNewTargetTime;                         		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttackIntervalRandomizer;                         		// 0x0530 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastTimedOutPawnLocation;                         		// 0x0534 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastObstructionJumpTime;                          		// 0x0540 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ObstructionJumpCount;                             		// 0x0544 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     lastTargetDestinationPosition;                    		// 0x0548 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCheckAttackRangePawnLocation;                 		// 0x0554 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCheckAttackRangeTargetLocation;               		// 0x0560 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCheckAttackRangeClosestPoint;                 		// 0x056C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastCheckAttackRangeTarget;                       		// 0x0578 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastLineCheckPolySearch;                          		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastNavMeshPath_SearchExtent_Modifier;            		// 0x0580 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZeroSizeSearchExtentAfterSpawnTime;               		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBumpAddAgroTime;                              		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ObstructionDir;                                   		// 0x0594 (0x0004) [0x0000000000000000]              
	class AActor*                                      InitialMoveToTarget;                              		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastLocationSampleTime;                           		// 0x059C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastSamplePawnLocation;                           		// 0x05A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                TargetingTeam;                                    		// 0x05AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StartMovingAroundBlockadeLocation;                		// 0x05B0 (0x000C) [0x0000000000000000]              
	float                                              spreadValue;                                      		// 0x05BC (0x0004) [0x0000000000000000]              
	struct FVector                                     PreviousGoalLocation;                             		// 0x05C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredMovementLocation;                          		// 0x05CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxFollowDistance;                                		// 0x05D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetableRange;                                  		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            NoTargetElementTypes;                             		// 0x05E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      FriendlyFollowTarget;                             		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ReturnPoint;                                      		// 0x05F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       currentCommandStateName;                          		// 0x05FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              lastBounceTime;                                   		// 0x0604 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              distanceOffset;                                   		// 0x0608 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43998 ];

		return pClassPointer;
	};

	int GetAttackDamage ( );
	bool WithinFollowRange ( class AActor* checkTarget );
	bool WithinRangeOfMovementPoint ( struct FVector MovementPoint );
	struct FVector eventGeneratePathToPoint ( struct FVector GoalPoint, float WithinDistance, unsigned long bAllowPartialPath );
	bool NavPointReachable ( struct FVector V );
	bool GetNearestWalkablePointFromPoint ( struct FVector Checkpoint, unsigned long bMustBeUnderneath, unsigned long bDoLineChecks, struct FVector* Dest );
	bool TestPathLength ( );
	class AActor* FindTargetWithinRange ( struct FVector Checkpoint, float checkRadius, unsigned long bDontSetAsTarget );
	bool IsWithinTargetableRange ( class AActor* Other, struct FVector inRangeOfPoint, unsigned long bCheckAttackRange, float AttackRangeOffset, unsigned long bCheckDeltaZ );
	bool IsWithinReturnPointRange ( );
	bool IsCommandState ( );
	void SetMaxFollowRange ( float newFollowRange );
	bool ForceAttackTarget ( class AActor* NewTarget, unsigned long bKeepStateStack );
	bool SetDesiredMovementLocation ( struct FVector NewDestination, unsigned long bAllowAttacking, unsigned long bKeepStateStack );
	bool SetFollowTarget ( class AActor* newFollowTarget, unsigned long bSetForceFollow );
	struct FVector GetReturnPoint ( );
	void SetReturnPoint ( struct FVector newReturnPoint );
	void SetTargetableRange ( float newRange );
	float GetTargetableRange ( unsigned long bCheckAttackRange );
	void SetIdleEnemy ( unsigned long bSetLocationAsReturnPoint, unsigned long bForce );
	bool CheckValidPathNodeID ( class AActor* checkActor );
	int GetTargetingTeam ( );
	bool CanChooseUntargetableTarget ( class UDunDefTargetableInterface* aTargetInterface );
	void EnableDarkness ( );
	float GetAttackInterval ( class AActor* Victim );
	float eventGetSpreadValue ( );
	struct FVector eventGeneratePathToActor ( class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath );
	bool GetWalkablePoint ( struct FVector* Dest );
	bool NavActorReachable ( class AActor* A );
	void InitNavigationHandle ( );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void DoAttack ( );
	bool WantsHurtAnimation ( );
	void Cough ( struct FName coughAnimName );
	void StuckNotification ( );
	void CheckForCustomAttacks ( );
	void ObstructionJump ( struct FVector jumpForwardDir, struct FVector jumpSideDir );
	void CancelMoveAround ( );
	void TryOtherBlockadeDirection ( );
	bool MoveAroundBlockade ( class AActor* blockadeActor, float BlockadeWidth, struct FVector HitNormal, unsigned long SkipBlockingCheck );
	void BumpedATarget ( class UDunDefTargetableInterface* aTarget );
	bool CheckMoveAroundBlockadePoint ( struct FVector moveToPoint );
	void CancelCurrentTarget ( int Reason );
	void CheckDirectReachability ( );
	void CheckIndirectReachability ( );
	bool IsWithinAttackRange ( class AActor* Other, float AttackRangeOffset, unsigned long bCheckDeltaZ );
	bool IsWithinLineOfSight ( class AActor* Other, unsigned long bIsWithinAttackRange );
	void PawnDied ( class APawn* inPawn );
	void eventSetTarget ( class AActor* NewTarget, unsigned long bDontClearIgnoreList );
	class UDunDefTargetableInterface* GetATarget ( class UDunDefTargetableInterface* ignoreTarget, unsigned long ReturnIgnoreTargetIfNoOthers, TArray< class UDunDefTargetableInterface* >* theIgnoreTargets );
	void eventDestroyed ( );
	float GetReachCheckDuration ( );
	bool IsValidTarget ( class UDunDefTargetableInterface* testTarget );
	void AddActorTargetingMultiplier ( struct FActorTargetingMultiplier actorMult );
	bool eventIsWithinTargetingPreventionVolume ( class AActor* testTarget );
	void AddToAggro ( class UDunDefTargetableInterface* Attacker, float DamagePercent );
	void UpdateAggro ( );
	float GetToolTipAttackRange ( );
	float GetAttackRange ( );
	bool AllowMovingAroundPawn ( );
	bool IgnoreDamageByClass ( class AActor* damagee );
	bool DrawMyHUD ( class ADunDefHUD* H );
	float GetGlobalSpreadValue ( );
	void PostSpawnTargetingTeam ( );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void eventPostBeginPlay ( );
	void InitialMoveTimeOut ( );
	bool OnlyDrawHUDForOwner ( );
};

UClass* ADunDefEnemyController::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqVar_EnemyWaveEntries
// 0x0054 (0x00E8 - 0x0094)
class UDunDef_SeqVar_EnemyWaveEntries : public USequenceVariable
{
public:
	TArray< struct FEnemyWaveEntry >                   EnemyWaveEntries;                                 		// 0x0094 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ADunDefEnemy* >                      MixDisallowedEnemyArchetypes;                     		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ADunDefEnemy* >                      MixAdditionalEnemyArchetypes;                     		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            MixDisallowedEnemyClasses;                        		// 0x00B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MixPercentChanceForElemental;                     		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MixDifficultyOffsetRandomFactor;                  		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MixNumberOfEnemiesRandomFactor;                   		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MixTimeOfWaveRandomFactor;                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      MixAllowRandomEnemyTemplate : 1;                  		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MixDisable : 1;                                   		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bMixDontRandomize : 1;                            		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< struct FEnemyWaveEntry >                   MixBackupEnemyWaveEntries;                        		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MixLastPhaseCycleID;                              		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44021 ];

		return pClassPointer;
	};

};

UClass* UDunDef_SeqVar_EnemyWaveEntries::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_FinishedWaveScaling
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_FinishedWaveScaling : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44030 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_FinishedWaveScaling::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GameLogicInt
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GameLogicInt : public USequenceAction
{
public:
	unsigned long                                      bSetGameLogicInt : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                GameLogicIntIndex;                                		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GameLogicIntValue;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44033 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GameLogicInt::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GameOver
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_GameOver : public USequenceAction
{
public:
	int                                                theGameOverReason;                                		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44039 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GameOver::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GameplayMovie
// 0x0008 (0x0100 - 0x00F8)
class UDunDef_SeqAct_GameplayMovie : public USeqAct_Latent
{
public:
	int                                                AdditionalMovieID;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      justEnabled : 1;                                  		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44043 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
};

UClass* UDunDef_SeqAct_GameplayMovie::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetCampaignLevelObject
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GetCampaignLevelObject : public USequenceAction
{
public:
	struct FString                                     LevelFriendlyName;                                		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44052 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetCampaignLevelObject::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetGameInfo
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_GetGameInfo : public USequenceAction
{
public:
	unsigned long                                      bReturnGRI : 1;                                   		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44058 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetGameInfo::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetGameSettings
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_GetGameSettings : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44063 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetGameSettings::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetMissionSwitchValue
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_GetMissionSwitchValue : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44067 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetMissionSwitchValue::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetNumItemBoxItems
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GetNumItemBoxItems : public USequenceAction
{
public:
	unsigned long                                      bConsumeItems : 1;                                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                NumItemsToConsume;                                		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UHeroEquipment*                              EquipmentTemplate;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44073 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetNumItemBoxItems::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetRandomInt
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_GetRandomInt : public USequenceAction
{
public:
	int                                                Min;                                              		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Max;                                              		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44083 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetRandomInt::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetStartWave
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_GetStartWave : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44088 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetStartWave::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetTouchingActors
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GetTouchingActors : public USequenceAction
{
public:
	unsigned long                                      bUseBaseActorClass : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UClass*                                      ActorClassType;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      aToucher;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44091 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetTouchingActors::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GetWaveCompletionPercent
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_GetWaveCompletionPercent : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44098 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GetWaveCompletionPercent::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GiveEquipmentToPlayers
// 0x0028 (0x0110 - 0x00E8)
class UDunDef_SeqAct_GiveEquipmentToPlayers : public USequenceAction
{
public:
	TArray< struct FGiveEquipmentEntry >               GiveEquipmentEntries;                             		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bGiveToEveryone : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyUser : 1;                                  		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoLockEquipment : 1;                           		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceEquipmentIntoItemBox : 1;                   		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bOnlyGiveToUniqueProfile : 1;                     		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOnlyGiveToPrimaryLocalPlayer : 1;                		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUseNightmareRandomizerMultiplier : 1;            		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowTranscendentGear : 1;                       		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bForceGiveEquipmentEvenOnFirstWave : 1;           		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bChooseRandomRewardEntry : 1;                     		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	class USoundCue*                                   GivenEquipmentSound;                              		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareRandomizerMultiplier;                    		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HardcoreRandomizerMultiplier;                     		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraInsaneRandomizerMultiplier;                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraInsaneHardcoreRandomizerMultiplier;          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HardcoreMinimumTranscendentRandomizerMultiplier;  		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44105 ];

		return pClassPointer;
	};

	void GiveEquipment ( class ADunDefPlayerController* PC );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GiveEquipmentToPlayers::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GlobalHUDMessage
// 0x0028 (0x0110 - 0x00E8)
class UDunDef_SeqAct_GlobalHUDMessage : public USequenceAction
{
public:
	struct FString                                     theString;                                        		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                FontSize;                                         		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                msgColor;                                         		// 0x00F8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeToDisplay;                                    		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ForTeam;                                          		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44162 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GlobalHUDMessage::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_GotoURL
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GotoURL : public USequenceAction
{
public:
	struct FString                                     URLToVisit;                                       		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44170 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_GotoURL::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_HasPendingInvite
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqAct_HasPendingInvite : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44174 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_HasPendingInvite::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_KeyboardConsoleCommand
// 0x0010 (0x0108 - 0x00F8)
class UDunDef_SeqAct_KeyboardConsoleCommand : public USeqAct_Latent
{
public:
	unsigned long                                      RunCompareToString : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      TransformString : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSetConsoleCommandHack : 1;                       		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bKeyboardReturn : 1;                              		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bKeyboardFail : 1;                                		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	struct FString                                     compareString;                                    		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44179 ];

		return pClassPointer;
	};

	void ShowUIKeyboard ( );
	void KeyboardInputDone ( unsigned long Success );
	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_KeyboardConsoleCommand::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_KillAllEnemies
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_KillAllEnemies : public USequenceAction
{
public:
	float                                              pctToKill;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseSpecificKillType : 1;                         		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UClass*                                      KillType;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44200 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_KillAllEnemies::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_ForceKill
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ForceKill : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44207 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_ForceKill::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_LevelVictory
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_LevelVictory : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44209 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_LevelVictory::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_LoadLevel
// 0x0010 (0x00F8 - 0x00E8)
class UDunDef_SeqAct_LoadLevel : public USequenceAction
{
public:
	struct FString                                     LevelName;                                        		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      ProceedToNextGameplayLevel : 1;                   		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsGameplayLevel : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44212 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_LoadLevel::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_LockContent
// 0x0018 (0x0100 - 0x00E8)
class UDunDef_SeqAct_LockContent : public USequenceAction
{
public:
	unsigned long                                      bLockLevel : 1;                                   		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     MissionTag;                                       		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UDunDefHero*                                 aHeroTemplate;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                costumeIndex;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44222 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_LockContent::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_OpenBuildUI
// 0x0014 (0x010C - 0x00F8)
class UDunDef_SeqAct_OpenBuildUI : public USeqAct_Latent
{
public:
	class UUI_BuildTimer*                              BuildUITemplate;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuildTime;                                        		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuildTimeExtraMultiplier;                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_BuildTimer*                              InstanceBuildUI;                                  		// 0x0104 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsTimerFinished : 1;                              		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44229 ];

		return pClassPointer;
	};

	void eventBuildTimerFinished ( );
	bool eventUpdate ( float DeltaTime );
	void eventReset ( );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_OpenBuildUI::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_OpenKillCountUI
// 0x0010 (0x0108 - 0x00F8)
class UDunDef_SeqAct_OpenKillCountUI : public USeqAct_Latent
{
public:
	class UUI_KillCount*                               KillCountUITemplate;                              		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CloseUIWhenCompletedKillCount : 1;                		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseRegisteredWaveEntries : 1;                    		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceTotalKillCount : 1;                         		// 0x00FC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      IsAllKilled : 1;                                  		// 0x00FC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIgnoreAllKilled : 1;                             		// 0x00FC (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                ForceTotalKillCount;                              		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_KillCount*                               InstanceKillCountUI;                              		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44246 ];

		return pClassPointer;
	};

	void eventAllKilled ( );
	bool eventUpdate ( float DeltaTime );
	void eventReset ( );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_OpenKillCountUI::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_PauseGame
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_PauseGame : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44269 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_PauseGame::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_PlayerCountSwitch
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_PlayerCountSwitch : public USequenceAction
{
public:
	unsigned long                                      OnlyCountLocalPlayers : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44272 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_PlayerCountSwitch::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_RateLimiter
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_RateLimiter : public USequenceAction
{
public:
	float                                              RefireTimeLimit;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastSuccessfulActivationTime;                     		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44278 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_RateLimiter::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_RefreshWaveEntries
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_RefreshWaveEntries : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44283 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_RefreshWaveEntries::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_RegisterEnemyWaveEntry
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_RegisterEnemyWaveEntry : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44286 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_RegisterEnemyWaveEntry::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ResetEnemyWaveEntries
// 0x0008 (0x0100 - 0x00F8)
class UDunDef_SeqAct_ResetEnemyWaveEntries : public USeqAct_Latent
{
public:
	class UDunDef_SeqVar_EnemyWaveEntries*             TheEnemyWaveEntries;                              		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                lockAttempts;                                     		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44296 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ResetEnemyWaveEntries::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_RessurectPlayers
// 0x0020 (0x0108 - 0x00E8)
class UDunDef_SeqAct_RessurectPlayers : public USequenceAction
{
public:
	int                                                waveNumber;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WaveIntervalForCoreHeal;                          		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceHealCore : 1;                               		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceNoHealingCore : 1;                          		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FLinearColor                                NotificationColor;                                		// 0x00F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     HealPlayerEffect;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44306 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_RessurectPlayers::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SaveHeroes
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_SaveHeroes : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44322 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SaveHeroes::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ScaleEnemyWave
// 0x0018 (0x0100 - 0x00E8)
class UDunDef_SeqAct_ScaleEnemyWave : public USequenceAction
{
public:
	float                                              NumEnemiesScalar;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveIntervalScalar;                               		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NumGroupsScalar;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DifficultySetOffset;                              		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AbsoluteMaximumNumberOfEnemiesPerEntry;           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                      		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44325 ];

		return pClassPointer;
	};

	void eventActivated ( );
	float GetTotalWaveTime ( TArray< struct FEnemyWaveEntry >* waveEntries );
};

UClass* UDunDef_SeqAct_ScaleEnemyWave::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ScaleFloatForPlayerCount
// 0x0040 (0x0128 - 0x00E8)
class UDunDef_SeqAct_ScaleFloatForPlayerCount : public USequenceAction
{
public:
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOverrideIdentityArray : 1;                       		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< float >                                    ScaleValueForNumberOfPlayers;                     		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    IdentityArray1;                                   		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverridenIdentityArray1;                          		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    IdentityArray2;                                   		// 0x0110 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverridenIdentityArray2;                          		// 0x011C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44364 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ScaleFloatForPlayerCount::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ScaleIntForPlayerCount
// 0x0010 (0x00F8 - 0x00E8)
class UDunDef_SeqAct_ScaleIntForPlayerCount : public USequenceAction
{
public:
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< float >                                    ScaleValueForNumberOfPlayers;                     		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44384 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ScaleIntForPlayerCount::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetActorCollision
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetActorCollision : public USequenceAction
{
public:
	unsigned long                                      bNewBlockActors : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNewCollideActors : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNewIgnoreEncroachers : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44392 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetActorCollision::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetAllowPlayerSpawns
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetAllowPlayerSpawns : public USequenceAction
{
public:
	unsigned long                                      bAllowPlayerSpawns : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44401 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetAllowPlayerSpawns::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetCheckboxWithLabelValue
// 0x0014 (0x0100 - 0x00EC)
class UDunDef_SeqAct_SetCheckboxWithLabelValue : public UUIAction
{
public:
	class UUICheckbox*                                 checkbox;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    Label;                                            		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     NewString;                                        		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44405 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetCheckboxWithLabelValue::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetCombatPhase
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetCombatPhase : public USequenceAction
{
public:
	unsigned long                                      bCombatPhase : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44411 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetCombatPhase::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetCursorPosition
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_SetCursorPosition : public USequenceAction
{
public:
	struct FVector                                     CursorPosXY;                                      		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44415 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetCursorPosition::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetDifficulty
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetDifficulty : public USequenceAction
{
public:
	unsigned char                                      newDifficulty;                                    		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHardcoreMode : 1;                                		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44419 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetDifficulty::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetDTDamageMultiplier
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetDTDamageMultiplier : public USequenceAction
{
public:
	class ADunDefDamageableTarget*                     DTActor;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DTDamageMultiplier;                               		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44424 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetDTDamageMultiplier::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetFinalWaveNumber
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetFinalWaveNumber : public USequenceAction
{
public:
	int                                                FinalWaveNumber;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44430 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetFinalWaveNumber::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetHidden
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetHidden : public USequenceAction
{
public:
	class AActor*                                      TargetActor;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHide : 1;                                        		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bToggle : 1;                                      		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44434 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetHidden::pClassPointer = NULL;

// Class UDKGame.ReplicatedInterpActor
// 0x0004 (0x0258 - 0x0254)
class AReplicatedInterpActor : public ADynamicSMActor
{
public:
	unsigned long                                      ReplicatedHidden : 1;                             		// 0x0254 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44441 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AReplicatedInterpActor::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetHiddenEnemyIcons
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetHiddenEnemyIcons : public USequenceAction
{
public:
	unsigned long                                      bDisableEnemyIcons : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44444 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetHiddenEnemyIcons::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetKeyBinding
// 0x0014 (0x00FC - 0x00E8)
class UDunDef_SeqAct_SetKeyBinding : public USequenceAction
{
public:
	struct FName                                       KeyName;                                          		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Command;                                          		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44448 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetKeyBinding::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetMaxFramerate
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetMaxFramerate : public USequenceAction
{
public:
	float                                              MaxFramerate;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44453 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetMaxFramerate::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetMaximumNumberOfEnemies
// 0x0010 (0x00F8 - 0x00E8)
class UDunDef_SeqAct_SetMaximumNumberOfEnemies : public USequenceAction
{
public:
	TArray< int >                                      MaximumNumberOfEnemies;                           		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bFixedSet : 1;                                    		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44457 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetMaximumNumberOfEnemies::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetMissionObjectiveText
// 0x0010 (0x00F8 - 0x00E8)
class UDunDef_SeqAct_SetMissionObjectiveText : public USequenceAction
{
public:
	struct FLinearColor                                MissionObjectiveColor;                            		// 0x00E8 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44465 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetMissionObjectiveText::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetMixEnemies
// 0x0018 (0x0100 - 0x00E8)
class UDunDef_SeqAct_SetMixEnemies : public USequenceAction
{
public:
	TArray< class ADunDefEnemy* >                      MixEnemyArchetypes;                               		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMixEnemyDifficultyThreshold >      MixEnemyDifficultyThresholds;                     		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44469 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetMixEnemies::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetNightmareUnlocked
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetNightmareUnlocked : public USequenceAction
{
public:
	unsigned long                                      bSetUnlocked : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActuallyDoSet : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44484 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetNightmareUnlocked::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetProjectileDistanceLimit
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetProjectileDistanceLimit : public USequenceAction
{
public:
	unsigned long                                      bLimitProjectileDistance : 1;                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLimitTowerProjectileDistance : 1;                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLimitProjectileDistancesUsePlayerRangeMultiplier : 1;		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              ProjectileDistanceLimit;                          		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44489 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetProjectileDistanceLimit::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetSkeletalMesh
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetSkeletalMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               aSkeletalMesh;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      anActor;                                          		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44496 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetSkeletalMesh::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetSpeedyBuild
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetSpeedyBuild : public USequenceAction
{
public:
	unsigned long                                      bSpeedyBuild : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44502 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetSpeedyBuild::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetTowerUnits
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetTowerUnits : public USequenceAction
{
public:
	int                                                newTowerUnits;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44506 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetTowerUnits::pClassPointer = NULL;

// Class UDKGame.UI_MainMenu
// 0x0108 (0x0744 - 0x063C)
class UUI_MainMenu : public UDunDefUIScene
{
public:
	class UUIButton_Scripted*                          PlayButton;                                       		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          MultiplayerButton;                                		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          BuyFullGameButton;                                		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          DLCButton;                                        		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ExitButton;                                       		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   CreditsButton;                                    		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              OptionsButton;                                    		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              StatsButton;                                      		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_NetworkMultiplayer*                      NetworkMultiplayerUITemplate;                     		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_CharacterSelect*                         CharacterSelectScene;                             		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_CharacterSelect*                         CharacterSelectScene3D;                           		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CloseCue;                                         		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OptionsMenuDelay;                                 		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_OptionsMenu*                             OptionsMenuScene;                                 		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_GameSpyLogin*                            LoginScene;                                       		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_TitleScreen*                             TitleScene;                                       		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TitleSceneDelay;                                  		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimatedLogoTag;                                  		// 0x0680 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDontAllowBackToTitleScreen : 1;                  		// 0x0688 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FString                                     MSG_UnlockGame;                                   		// 0x068C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_UnlockGameDescription;                        		// 0x0698 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_OnlineNotSupported;                           		// 0x06A4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_OnlineNotSupportedDescription;                		// 0x06B0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RedeemSteamCodeString;                            		// 0x06BC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              OptionsMenuTimer;                                 		// 0x06C8 (0x0004) [0x0000000000000000]              
	float                                              TitleSceneTimer;                                  		// 0x06CC (0x0004) [0x0000000000000000]              
	class ULocalPlayer*                                OptionsMenuPlayer;                                		// 0x06D0 (0x0004) [0x0000000000000000]              
	float                                              BlendTitleOpenTimer;                              		// 0x06D4 (0x0004) [0x0000000000000000]              
	float                                              LogoHideTimer;                                    		// 0x06D8 (0x0004) [0x0000000000000000]              
	struct FString                                     StatisticsString;                                 		// 0x06DC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeaderboardString;                                		// 0x06E8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DLCString;                                        		// 0x06F4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FullVersionString;                                		// 0x0700 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              DeadZone;                                         		// 0x070C (0x0004) [0x0000000000000000]              
	float                                              AxisRepeatDelay;                                  		// 0x0710 (0x0004) [0x0000000000000000]              
	struct FmyUIKeyRepeatData                          controllerInputs[ 0x4 ];                          		// 0x0714 (0x0030) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44562 ];

		return pClassPointer;
	};

	void UIPostRender ( class UCanvas* Canvas );
	void HideLogos ( );
	void eventSceneDeactivated ( );
	float PlayDunDefUIAnim ( struct FName DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn, unsigned long forceNoSound, float playSpeed );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	bool NotifyLoginStatusChanged ( int ControllerId, unsigned char NewStatus );
	bool OnReceivedInputAxis ( struct FInputEventParameters* EventParms );
	void Update ( float DeltaTime );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool UnlockFullGame ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	int LiveSignInValidation ( int ControllerId );
	void OpenOptions ( class ULocalPlayer* forWho );
	void PlayGame ( );
	void UpdateNetworkButtonState ( unsigned long bDoForceValue, unsigned long bForcedValue );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void SetLastControl ( class UUIObject* theControl );
	void RefocusLastControl ( );
};

UClass* UUI_MainMenu::pClassPointer = NULL;

// Class UDKGame.DunDefToolTipInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefToolTipInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44896 ];

		return pClassPointer;
	};

	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
};

UClass* UDunDefToolTipInterface::pClassPointer = NULL;

// Class UDKGame.TradeManager
// 0x00D4 (0x02F0 - 0x021C)
class ATradeManager : public AActor
{
public:
	TArray< class UHeroEquipment* >                    Trader1HeroEquipments;                            		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UHeroEquipment* >                    Trader2HeroEquipments;                            		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APlayerReplicationInfo*                      Trader1;                                          		// 0x0234 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APlayerReplicationInfo*                      Trader2;                                          		// 0x0238 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APlayerReplicationInfo*                      AutoOpenForTrader;                                		// 0x023C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     MSG_InitiateTradeWithYou;                         		// 0x0240 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_TradeWith;                                    		// 0x024C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_HasBeenCancelled;                             		// 0x0258 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_HasBeenCompleted;                             		// 0x0264 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_YouHaveInitiatedTradeWith;                    		// 0x0270 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      TradeWithYouColor;                                		// 0x027C (0x0004) [0x0000000000000000]              
	class UUI_Trade*                                   TradeSceneTemplate;                               		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SendManaInterval;                                 		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TradeInitiatedSound;                              		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TradeConfirmedSound;                              		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TradeUnconfirmedSound;                            		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TradeCancelledSound;                              		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TradeCompletedSound;                              		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_Trade*                                   tradeScene1;                                      		// 0x029C (0x0004) [0x0000000000000000]              
	class UUI_Trade*                                   tradeScene2;                                      		// 0x02A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      Trader1FinalConfirmed : 1;                        		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      Trader2FinalConfirmed : 1;                        		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSentFinalTradeConfirmation : 1;                  		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      Trader1Confirmed : 1;                             		// 0x02A4 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      Trader2Confirmed : 1;                             		// 0x02A4 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bTrader1Executed : 1;                             		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bTrader2Executed : 1;                             		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	struct FHighDigitInt                               Trader1Mana;                                      		// 0x02A8 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FHighDigitInt                               Trader2Mana;                                      		// 0x02B8 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FHighDigitInt                               LastSentTrader1Mana;                              		// 0x02C8 (0x0010) [0x0000000000000000]              
	struct FHighDigitInt                               LastSentTrader2Mana;                              		// 0x02D8 (0x0010) [0x0000000000000000]              
	float                                              LastSentTrader1ManaTime;                          		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              LastSentTrader2ManaTime;                          		// 0x02EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44948 ];

		return pClassPointer;
	};

	struct FHighDigitInt ClampItemBoxInfo ( struct FHighDigitInt Value, struct FHighDigitInt Min, struct FHighDigitInt Max );
	bool GetFinalTradeConfirmation ( class APlayerReplicationInfo* aTrader );
	bool GetTradeConfirmation ( class APlayerReplicationInfo* aTrader );
	bool IsPlayerInTrade ( class APlayerReplicationInfo* PRI );
	bool AllowAddingMoreEquipments ( class APlayerReplicationInfo* aTrader );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void CancelTrade ( );
	void InitializeDD ( );
	void CloseTradeScenes ( );
	void eventDestroyed ( );
	void SetTradeConfirmation ( class APlayerReplicationInfo* forTrader, unsigned long bConfirm );
	void RefreshTradeUI ( );
	void SetTradeMana ( class APlayerReplicationInfo* PRI, struct FHighDigitInt mana );
	bool GetConfirmation ( class APlayerReplicationInfo* PRI, unsigned long bReturnOtherIndex );
	struct FHighDigitInt GetTradeMana ( class APlayerReplicationInfo* PRI, unsigned long bReturnOtherIndex );
	int GetTraderIndex ( class APlayerReplicationInfo* PRI, unsigned long bReturnOtherIndex );
	void TradeSceneClosed ( class UUI_Trade* TradeScene );
	void ShowTradeUI ( class APlayerReplicationInfo* forTrader, unsigned char ForceSceneStackPriority );
	bool IsInTrade ( struct FEquipmentNetInfo* netInfo );
	void LocalAddHeroEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo netInfo );
	void LocalRemoveHeroEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo netInfo );
	void LocalUpdateHeroEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo netInfo );
	void UpdateLocalTradingInfo ( class APlayerReplicationInfo* forTrader, unsigned long bIsFinalConfirmed, unsigned long bDontCheckMana, TArray< class UHeroEquipment* >* HeroEquipments, struct FHighDigitInt* traderMana, struct FHighDigitInt* lastSentTraderMana, float* lastSentTraderManaTime );
	void eventPostBeginPlay ( );
	class ADunDefPlayerReplicationInfo* GetOtherTrader ( class APlayerReplicationInfo* PRI );
	void RemoveLocalTradeItems ( class APlayerReplicationInfo* forTrader );
	bool LocalFinalConfirmTrade ( class APlayerReplicationInfo* forTrader );
	void ExecuteTrade ( class APlayerReplicationInfo* forTrader );
	void AcknowledgeFinalTradeConfirmation ( class ADunDefPlayerReplicationInfo* forTrader );
	void SendFinalTradeConfirmation ( );
	void Tick ( float DeltaTime );
	void UpdateHeroEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo* Info );
	void RemoveHeroEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo* Info );
	void AddHeroEquipment ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo* Info );
	bool IsEquipmentIDInTrade ( int EquipmentID1, int EquipmentID2 );
	int GetTradeEquipmentIndex ( class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo* tInfo );
	void eventReplicatedEvent ( struct FName VarName );
	void ResetTradeConfirmations ( );
	TArray< class UDataListEntryInterface* > GetDataListEntries ( int dataSetType, int PlayerIndex, int FolderID );
};

UClass* ATradeManager::pClassPointer = NULL;

// Class UDKGame.UI_HeroSelection
// 0x00A8 (0x06E4 - 0x063C)
class UUI_HeroSelection : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           HeroDataList;                                     		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmButton;                                    		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DeleteButton;                                     		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   InfoButton;                                       		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CreateNewHeroButton;                              		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ExitGameButton;                                   		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   EditHeroButton;                                   		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CustomizeCoreButton;                              		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SelectProfileButton;                              		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              CreateHeroInGameUIScene;                          		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SelectHeroSound;                                  		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DeleteHeroSound;                                  		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LostTopSceneAnimation;                            		// 0x066C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GainedTopSceneAnimation;                          		// 0x0674 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CancelString;                                     		// 0x067C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUIButton*                                   CancelDeletionButton;                             		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmDeletionButton;                            		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   DeletionPanel;                                    		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    DeletionHeroNameLabel;                            		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PlayerNameLabel;                                  		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIObject* >                         ConfirmationButtons;                              		// 0x069C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AnimShowDeletionConfirmation;                     		// 0x06A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimHideDeletionConfirmation;                     		// 0x06B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    ControllerImage;                                  		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USurface* >                          gamepadImages;                                    		// 0x06BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USurface*                                    keyboardImage;                                    		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bShowingDeletionConfirmation : 1;                 		// 0x06CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPlayedTopSceneAnimation : 1;                     		// 0x06CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ConfirmedHero : 1;                                		// 0x06CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      ChangingUser : 1;                                 		// 0x06CC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      RefreshHeroListOnUpdate : 1;                      		// 0x06CC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsInCancelMode : 1;                              		// 0x06CC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSwappingHeroes : 1;                              		// 0x06CC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	class UDunDefHero*                                 StartingHero;                                     		// 0x06D0 (0x0004) [0x0000000000000000]              
	int                                                FocusCounter;                                     		// 0x06D4 (0x0004) [0x0000000000000000]              
	float                                              ShowCreateHeroTimer;                              		// 0x06D8 (0x0004) [0x0000000000000000]              
	class UDataListEntryInterface*                     SwappingHero;                                     		// 0x06DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x06E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45018 ];

		return pClassPointer;
	};

	void ShowCharacterSelectionCreateHero ( );
	void Update ( float DeltaTime );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void SelectHeroNumber ( int Num );
	void DeleteSelectedHero ( );
	bool HandleConfirmation ( );
	void InstantChooseHero ( int HeroOffset );
	void RefreshedList ( );
	void RefreshHeroList ( class UDunDefHero* defaultSelectedHero );
	void PrepareToRefreshHeroList ( );
	void EditCurrentHero ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void HeroEntrySelected ( class UUIButton_DataListEntry* Button );
	void PostInitialSceneUpdate ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	class UDunDefHeroManager* GetHeroManager ( );
};

UClass* UUI_HeroSelection::pClassPointer = NULL;

// Class UDKGame.DunDefActivatableInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefActivatableInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45176 ];

		return pClassPointer;
	};

	float GetActivationOffset ( );
	float GetActivationWeighting ( );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
};

UClass* UDunDefActivatableInterface::pClassPointer = NULL;

// Class UDKGame.HeroEquipmentManualReplicationInterface
// 0x0000 (0x003C - 0x003C)
class UHeroEquipmentManualReplicationInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45291 ];

		return pClassPointer;
	};

	void ClientProcessEquipmentManualReplication ( int AdditionalData1, int AdditionalData2, int AdditionalData3, struct FEquipmentNetInfo* equipmentInfo );
};

UClass* UHeroEquipmentManualReplicationInterface::pClassPointer = NULL;

// Class UDKGame.DunDefManualReplicationInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefManualReplicationInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45294 ];

		return pClassPointer;
	};

	void ReplicateToNewPlayerController ( class ADunDefPlayerController* PC );
};

UClass* UDunDefManualReplicationInterface::pClassPointer = NULL;

// Class UDKGame.UI_Spectating
// 0x0008 (0x0644 - 0x063C)
class UUI_Spectating : public UDunDefUIScene
{
public:
	class UUILabel*                                    MainWaitLabel;                                    		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    SpectateeLabel;                                   		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45599 ];

		return pClassPointer;
	};

	void CloseWithAnimation ( );
	void NotifyGameOver ( );
	void ToggleSpectatorLabel ( );
	void ToggleWaitLabel ( );
	void SetSpectatee ( class ADunDefPlayerReplicationInfo* Spectatee );
};

UClass* UUI_Spectating::pClassPointer = NULL;

// Class UDKGame.DunDefBoss
// 0x0028 (0x0CF4 - 0x0CCC)
class ADunDefBoss : public ADunDefEnemy
{
public:
	float                                              MiniMapCoordinateScale;                           		// 0x0CCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDunDefCheckForEncroachers : 1;                   		// 0x0CD0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDunDefEncroachersOnlyCheckEnemies : 1;           		// 0x0CD0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawRotatedMiniMapIcon : 1;                      		// 0x0CD0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              BumpTowerDamage;                                  		// 0x0CD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EncroachmentExtraRadius;                          		// 0x0CD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnPushBackSpeed;                                		// 0x0CDC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TowerPushBackSpeed;                               		// 0x0CE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    MiniMapIconRotationOffset;                        		// 0x0CE4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProtonChargeBlastDamageMultiplier;                		// 0x0CF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45768 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void CheckForEncroachers ( float DeltaTime );
	void eventTick ( float DeltaTime );
	bool ForceFriendlyFire ( class AActor* Target );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void EnableDarkness ( );
	void PlayJumpAnimation ( );
	void EnemyExpired ( );
	void ForceSkelUpdating ( unsigned long Force, unsigned long bOnlyForceTickAnimNodes );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
};

UClass* ADunDefBoss::pClassPointer = NULL;

// Class UDKGame.DunDefTower_GasTrap
// 0x0044 (0x0928 - 0x08E4)
class ADunDefTower_GasTrap : public ADunDefTower_DetonationType
{
public:
	class UParticleSystemComponent*                    AmbientParticleEffect;                            		// 0x08E4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ADecalActorMovableSpawnable*                 DecalActorTemplate;                               		// 0x08E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DecalOffset;                                      		// 0x08EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TheDecalMaterial;                                 		// 0x08F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalFarPlaneAddition;                            		// 0x08FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlaneWidthMultiplier;                          		// 0x0900 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADecalActorMovableSpawnable*                 MyDecalActor;                                     		// 0x0904 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   DecalMat;                                         		// 0x0908 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                DecalColor;                                       		// 0x090C (0x0010) [0x0000000000000000]              
	class UMaterialInterface*                          TowerRatingMaterial;                              		// 0x091C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDontSpringTrap : 1;                              		// 0x0920 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFirstReset : 1;                                  		// 0x0920 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class ATrapLargeCylinderTriggerWrapper*            GroundTriggerVolume;                              		// 0x0924 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45789 ];

		return pClassPointer;
	};

	void ClientSingleSetMovement ( struct FVector endLoc, struct FRotator endRot, unsigned long bShouldCollideWorld );
	bool ForceSingleMove ( struct FVector NewLoc, struct FRotator endRot, unsigned long bShouldCollideWorld );
	void InitTowerRatingMaterial ( );
	void UpdateTowerRatingMaterial ( );
	void SetRadiusScale ( float theRadiusScale );
	void CheckOverlappedTouchingDetonation ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefTower_GasTrap::pClassPointer = NULL;

// Class UDKGame.UI_DLCSplash
// 0x0014 (0x0650 - 0x063C)
class UUI_DLCSplash : public UDunDefUIScene
{
public:
	class UUIButton*                                   CloseButton;                                      		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel_DataList*                           DLCDataList;                                      		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDLCDataListProvider*                        DLCProvider;                                      		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EntryOffset;                                      		// 0x0648 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCloseNextFrame : 1;                              		// 0x064C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46671 ];

		return pClassPointer;
	};

	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void RefreshDLC ( );
	void Update ( float DeltaTime );
	void PostInitialSceneUpdate ( );
};

UClass* UUI_DLCSplash::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ShowNotification
// 0x002C (0x0114 - 0x00E8)
class UDunDef_SeqAct_ShowNotification : public USequenceAction
{
public:
	struct FString                                     NotificationText;                                 		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                NotificationColor;                                		// 0x00F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              LabelScale;                                       		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ShowMapFriendlyNameNotification : 1;              		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      PredefinedType_AppendNumber : 1;                  		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                PredefinedType;                                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PredefinedType_NumberToAppend;                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46716 ];

		return pClassPointer;
	};

	class UDunDef_SeqVar_LocalizedString* GetLocalizedStringSeqVar ( );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ShowNotification::pClassPointer = NULL;

// Class UDKGame.DunDefTwoWayRPCInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefTwoWayRPCInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46740 ];

		return pClassPointer;
	};

	void ServerExecCommand ( class ADunDefPlayerController* fromPC, struct FName CommandName, struct FName nameParam1, struct FName nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, struct FVector vecParam1, struct FVector VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2 );
	void ClientExecCommand ( struct FName CommandName, struct FName nameParam1, struct FName nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, struct FVector vecParam1, struct FVector VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2 );
};

UClass* UDunDefTwoWayRPCInterface::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqEvent_SkipToWave
// 0x0004 (0x0104 - 0x0100)
class UDunDef_SeqEvent_SkipToWave : public USequenceEvent
{
public:
	int                                                ToWave;                                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46949 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqEvent_SkipToWave::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqEvent_PlayerLeft
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_PlayerLeft : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47121 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqEvent_PlayerLeft::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqEvent_PlayerJoined
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_PlayerJoined : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47224 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqEvent_PlayerJoined::pClassPointer = NULL;

// Class UDKGame.DunDefOgre
// 0x0060 (0x0D54 - 0x0CF4)
class ADunDefOgre : public ADunDefBoss
{
public:
	struct FName                                       PoundGroundAnimation;                             		// 0x0CF4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootPoisonAnimation;                             		// 0x0CFC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MajorHurtAnimation;                               		// 0x0D04 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     PoundImpactEffect;                                		// 0x0D0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PoundImpactEffectOffset;                          		// 0x0D10 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ProjectileSpawnSocketName;                        		// 0x0D1C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GloveEffectSocketName;                            		// 0x0D24 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    PoisonGloveEffectComponent;                       		// 0x0D2C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          InDangerHUDWaypointMat;                           		// 0x0D30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IndicateDamageTime;                               		// 0x0D34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   EnemyHealthBarMaterialTemplate;                   		// 0x0D38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    OgreJouseKnockbackMultipliers;                    		// 0x0D3C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   LandedSound;                                      		// 0x0D48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWantsAllyHUD : 1;                                		// 0x0D4C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoAllowAllyHeal : 1;                             		// 0x0D4C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayLandedSoundOnce : 1;                         		// 0x0D4C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UMaterialInstanceConstant*                   MyUniqueHealthBarMIC;                             		// 0x0D50 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47365 ];

		return pClassPointer;
	};

	bool UseMaxSimultaneousAllowedForPlayers ( class ADunDefEnemy* anEnemyTemplate );
	void EnemyExpired ( );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void eventDestroyed ( );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	class UMaterialInstanceConstant* GetHealthBarMIC ( class ADunDefPlayerController* PC );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	bool DrawMyHUD ( class ADunDefHUD* H );
	bool OnlyDrawHUDForOwner ( );
	void eventPoisonAttackShoot ( );
	void eventPoisonAttackBegin ( );
	void eventPostBeginPlay ( );
	void GetProjectileSpawnTransformation ( struct FVector* Position, struct FRotator* Orientation );
	bool IsCurrentlyPlayingAttackAnimation ( );
	float PlayAttackAnimation ( );
	float PlayShootPoisonAnimation ( );
	float PlayPoundAnimation ( );
	bool IsCurrentlyPlayingHurtAnimation ( );
	void PlayMajorHurtAnimation ( );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	void PlayJumpAnimation ( );
	struct FVector GetAMeleeSwingLocation ( struct FName SocketName );
	void eventPoundedTheGround ( );
	void eventMeleeSwingEnd ( );
	void eventMeleeSwingStart ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	bool AllowTrapSpringing ( class ADunDefTower_DetonationType* trap );
	bool ForceFriendlyFire ( class AActor* Target );
};

UClass* ADunDefOgre::pClassPointer = NULL;

// Class UDKGame.DunDefHeroOverrideList
// 0x000C (0x0048 - 0x003C)
class UDunDefHeroOverrideList : public UObject
{
public:
	TArray< class UDunDefHero* >                       HeroTemplates;                                    		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47472 ];

		return pClassPointer;
	};

	class UDunDefHero* GetHeroOverride ( class UDunDefHero* BaseHero );
};

UClass* UDunDefHeroOverrideList::pClassPointer = NULL;

// Class UDKGame.GameInfo_PureStrategy
// 0x0000 (0x0548 - 0x0548)
class AGameInfo_PureStrategy : public AMain
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47543 ];

		return pClassPointer;
	};

	void AdjustPawnDamage ( class ADunDefPawn* forPawn, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum );
};

UClass* AGameInfo_PureStrategy::pClassPointer = NULL;

// Class UDKGame.DunDefOnlineGameSettings
// 0x0000 (0x00E8 - 0x00E8)
class UDunDefOnlineGameSettings : public UOnlineGameSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47544 ];

		return pClassPointer;
	};

};

UClass* UDunDefOnlineGameSettings::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetTutorialFlag
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetTutorialFlag : public USequenceAction
{
public:
	unsigned char                                      flagType;                                         		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FlagValue : 1;                                    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      JustClearAllFlags : 1;                            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47545 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetTutorialFlag::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetTutorialMode
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetTutorialMode : public USequenceAction
{
public:
	unsigned long                                      EnableTutorialMode : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47551 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetTutorialMode::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetWaterDetail
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_SetWaterDetail : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47555 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetWaterDetail::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetWaveBillboardSpawnPoints
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetWaveBillboardSpawnPoints : public USequenceAction
{
public:
	class ADunDefWaveBillboard*                        waveBillboard;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47561 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetWaveBillboardSpawnPoints::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetWaveEntries
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetWaveEntries : public USequenceAction
{
public:
	class UDunDef_SeqVar_EnemyWaveEntries*             Original;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	class UDunDef_SeqVar_EnemyWaveEntries*             Value;                                            		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47567 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetWaveEntries::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SetWaveNumber
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetWaveNumber : public USequenceAction
{
public:
	int                                                waveNumber;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47572 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SetWaveNumber::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ShowBossHealthBar
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_ShowBossHealthBar : public USequenceAction
{
public:
	class AActor*                                      BossActor;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47576 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ShowBossHealthBar::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ShowGlobalUIScene
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_ShowGlobalUIScene : public USequenceAction
{
public:
	class UDunDefUIScene*                              aUIScene;                                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOpenForPlayer : 1;                               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCloseAllOtherScenes : 1;                         		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                CustomInitIndex;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47580 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ShowGlobalUIScene::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ShowLoginUI
// 0x0004 (0x00F0 - 0x00EC)
class UDunDef_SeqAct_ShowLoginUI : public UUIAction
{
public:
	class UUI_GameSpyLogin*                            LoginScene;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47588 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ShowLoginUI::pClassPointer = NULL;

// Class UDKGame.UI_GameSpyLogin
// 0x0094 (0x06D0 - 0x063C)
class UUI_GameSpyLogin : public UDunDefUIScene
{
public:
	class UUIEditBox*                                  UserID;                                           		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIEditBox*                                  Password;                                         		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          LoginButton;                                      		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          CreateButton;                                     		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          CancelButton;                                     		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          LANButton;                                        		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 SaveLoginCheckBox;                                		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MSG_InvalidCharacterTitle;                        		// 0x0658 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_InvalidCharacterDescription1;                 		// 0x0664 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_InvalidCharacterDescription2;                 		// 0x0670 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_LoggingInTitle;                               		// 0x067C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_LoginFailedTitle;                             		// 0x0688 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_LoginSucceededTitle;                          		// 0x0694 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_LoginSucceededDescription;                    		// 0x06A0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      fromMultiplayerMenu : 1;                          		// 0x06AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      LeftShiftIsDown : 1;                              		// 0x06AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      RightShiftIsDown : 1;                             		// 0x06AC (0x0004) [0x0000000000000000] [0x00000004] 
	class UUI_MultiplayerMenu*                         MultiplayerUI;                                    		// 0x06B0 (0x0004) [0x0000000000000000]              
	class UUI_NetworkMultiplayer*                      ServerListUI;                                     		// 0x06B4 (0x0004) [0x0000000000000000]              
	struct FString                                     CreateLoginURL;                                   		// 0x06B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              LoginTimer;                                       		// 0x06C4 (0x0004) [0x0000000000000000]              
	float                                              LoginTimeout;                                     		// 0x06C8 (0x0004) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x06CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47590 ];

		return pClassPointer;
	};

	bool eventIsGamepadOwned ( );
	bool eventIsKeyboardOwned ( );
	struct FString ConvertKeyNameToSymbol ( struct FName Key );
	bool OnInterceptedInputKey ( struct FInputEventParameters* EventParms );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void eventPostInitialize ( );
	void eventInitialized ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	bool LoginCancelled ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void Update ( float DeltaTime );
	void OnLoginStatusChange ( unsigned char NewStatus, struct FUniqueNetId NewId );
	void SaveLogin ( );
	void OnLoginChanged ( unsigned char LocalUserNum );
	void ClearLoginSuccessMsg ( );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	unsigned char ValidateUserPass ( struct FString UserIdString, struct FString PassString );
	bool HasChr ( struct FString Str, struct FString Chr );
};

UClass* UUI_GameSpyLogin::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ShowTitleScreen
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqAct_ShowTitleScreen : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47609 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ShowTitleScreen::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ShowUIScene
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_ShowUIScene : public USequenceAction
{
public:
	class UDunDefUIScene*                              theUIScene;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDontShowIfTemplateAlreadyOpen : 1;               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOpenForPlayer : 1;                               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                UICustomValue;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47613 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ShowUIScene::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_SplitTBRTimer
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SplitTBRTimer : public USequenceAction
{
public:
	int                                                targetSplit;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47622 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_SplitTBRTimer::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_StartTBRTimer
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_StartTBRTimer : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47635 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_StartTBRTimer::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ToggleBossMode
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_ToggleBossMode : public USequenceAction
{
public:
	unsigned long                                      BossModeEnabled : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47648 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ToggleBossMode::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ToggleDemonElectricPylon
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_ToggleDemonElectricPylon : public USequenceAction
{
public:
	unsigned long                                      EnablePylon : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class ADunDefDemonElectricPylon*                   dPylon;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47652 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ToggleDemonElectricPylon::pClassPointer = NULL;

// Class UDKGame.DunDefDemonElectricPylon
// 0x0088 (0x0590 - 0x0508)
class ADunDefDemonElectricPylon : public ADunDefDamageableTarget
{
public:
	class UParticleSystemComponent*                    ChargedParticleEffect;                            		// 0x0508 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    TargetableParticleEffect;                         		// 0x050C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    BeamParticleEffect;                               		// 0x0510 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    SuperChargeEffect;                                		// 0x0514 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RemainChargedTime;                                		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PostSuperChargeResetTime;                         		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BeamStartOffset;                                  		// 0x0520 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                theDamageAmount;                                  		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageInterval;                                   		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MyDamageType;                                     		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ActivatedSound;                                   		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DeactivatedSound;                                 		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TargetableOnSound;                                		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TargetableOffSound;                               		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    DifficultyHealthMultipliers;                      		// 0x0548 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaxDifficultySets;                                		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ChargedOnParticleEffect;                          		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     SuperChargedParticleEffect;                       		// 0x055C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MiniMapIconTexture;                               		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSize;                                  		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapTargetableColor;                           		// 0x0568 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapChargedColor;                              		// 0x056C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapSuperChargedColor;                         		// 0x0570 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapInactiveColor;                             		// 0x0574 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             LoopingActiveSound;                               		// 0x0578 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             LoopingElectrocutingSound;                        		// 0x057C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             LoopingTargetableSound;                           		// 0x0580 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastDamageTime;                                   		// 0x0584 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTargetable : 1;                                  		// 0x0588 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bCharged : 1;                                     		// 0x0588 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bSuperCharged : 1;                                		// 0x0588 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	class AActor*                                      Target;                                           		// 0x058C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47654 ];

		return pClassPointer;
	};

	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	bool DrawMyHUD ( class ADunDefHUD* H );
	void SetTargetable ( unsigned long targetable );
	void SetCharged ( unsigned long charged );
	void CheckCharges ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void EnableTargeting ( );
	void Decharge ( );
	bool IgnoreFriendlyFireDamage ( class UDunDefTargetableInterface* instigatorActor, class AController* OptionalController );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void Died ( class AController* EventInstigator, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser );
	float DTGetEnemyTargetingDesirability ( class ADunDefEnemyController* forController );
	float DTGetTowerTargetingDesirability ( class ADunDefTower* forTower );
	float DTGetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	int GetTargetingTeam ( );
	void eventReplicatedEvent ( struct FName VarName );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
};

UClass* ADunDefDemonElectricPylon::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_ToggleEmitter
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_ToggleEmitter : public USequenceAction
{
public:
	class AEmitter*                                    TheEmitter;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47658 ];

		return pClassPointer;
	};

	void DoWork ( class AEmitter* anEmitter );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_ToggleEmitter::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_TogglePostProcessEffects
// 0x0028 (0x0120 - 0x00F8)
class UDunDef_SeqAct_TogglePostProcessEffects : public USeqAct_Latent
{
public:
	TArray< struct FPostProcessEffectToggle >          EffectToggles;                                    		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      ToggleForEveryone : 1;                            		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FPostProcessEffectToggle >          TurnOnEffects;                                    		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPostProcessEffectToggle >          TurnOffEffects;                                   		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47666 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	bool UpdateEffects ( float DeltaTime );
	void AddEffectToList ( struct FPostProcessEffectToggle effectToggle, class UPostProcessEffect* Effect, unsigned long bTurnOn );
	void MakeMaterialEffectConstantUnique ( class UMaterialEffect* Effect );
	void EnableEffect ( unsigned long bTurnOn );
};

UClass* UDunDef_SeqAct_TogglePostProcessEffects::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_UnlockAchievement
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_UnlockAchievement : public USequenceAction
{
public:
	unsigned char                                      Achievement;                                      		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UnlockForEveryone : 1;                            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRequirePawnPossession : 1;                       		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      onlyUnlockLocal : 1;                              		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47709 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_UnlockAchievement::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_UnlockCostumes
// 0x0014 (0x00FC - 0x00E8)
class UDunDef_SeqAct_UnlockCostumes : public USequenceAction
{
public:
	TArray< struct FGiveCostumeEntry >                 GiveCostumeEntries;                               		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bGiveToEveryone : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyUser : 1;                                  		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyGiveToPrimaryLocalPlayer : 1;                		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class USoundCue*                                   GivenCostumeSound;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47717 ];

		return pClassPointer;
	};

	void GiveCostume ( class ADunDefPlayerController* PC );
	void eventActivated ( );
};

UClass* UDunDef_SeqAct_UnlockCostumes::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_UnlockMission
// 0x0020 (0x0108 - 0x00E8)
class UDunDef_SeqAct_UnlockMission : public USequenceAction
{
public:
	struct FString                                     MissionTag;                                       		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bNotify : 1;                                      		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     NotificationString;                               		// 0x00F8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   UnlockedSoundCue;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47737 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_UnlockMission::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_UnlockRestrictedDifficultyMission
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_UnlockRestrictedDifficultyMission : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47745 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_UnlockRestrictedDifficultyMission::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqAct_UpgradeTowers
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_UpgradeTowers : public USequenceAction
{
public:
	int                                                TargetingTeam;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseTeam : 1;                                     		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDowngradeTowers : 1;                             		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                numLevelsToUpgrade;                               		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47751 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqAct_UpgradeTowers::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_CustomMetaFlag
// 0x000C (0x00DC - 0x00D0)
class UDunDef_SeqCond_CustomMetaFlag : public USequenceCondition
{
public:
	int                                                FlagIndex;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CheckValue;                                       		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SetToValue : 1;                                   		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDontOutputToLinkedVariable : 1;                  		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlySetOnSpawnedPlayer : 1;                      		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47763 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_CustomMetaFlag::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_DifficultySwitch
// 0x0004 (0x00D4 - 0x00D0)
class UDunDef_SeqCond_DifficultySwitch : public USequenceCondition
{
public:
	unsigned long                                      bClampToInsane : 1;                               		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47773 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_DifficultySwitch::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_GetGraphicsQuality
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_GetGraphicsQuality : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47777 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_GetGraphicsQuality::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_GetMultiplayerMode
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_GetMultiplayerMode : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47780 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_GetMultiplayerMode::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_GetPlatform
// 0x0004 (0x00D4 - 0x00D0)
class UDunDef_SeqCond_GetPlatform : public USequenceCondition
{
public:
	unsigned long                                      bReturnMacSeparately : 1;                         		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47783 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_GetPlatform::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IntSwitch
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IntSwitch : public USequenceCondition
{
public:
	unsigned long                                      TreatValuesOutsideOfRangeAsZero : 1;              		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                ModuloBase;                                       		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47787 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IntSwitch::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IntSwitchMega
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IntSwitchMega : public USequenceCondition
{
public:
	unsigned long                                      TreatValuesOutsideOfRangeAsZero : 1;              		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                ModuloBase;                                       		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47794 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IntSwitchMega::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsAchievementUnlocked
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IsAchievementUnlocked : public USequenceCondition
{
public:
	unsigned char                                      Achievement;                                      		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsUnlockedByAnyLocalPlayer : 1;                   		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyCheckPrimaryLocalPlayer : 1;                 		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47801 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsAchievementUnlocked::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsCostumeUnlocked
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IsCostumeUnlocked : public USequenceCondition
{
public:
	class UDunDefHero*                                 heroArchetype;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                costumeIndex;                                     		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47809 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsCostumeUnlocked::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsDemoMode
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsDemoMode : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47814 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsDemoMode::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsDLCInstalled
// 0x0004 (0x00D4 - 0x00D0)
class UDunDef_SeqCond_IsDLCInstalled : public USequenceCondition
{
public:
	int                                                DlcID;                                            		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47817 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsDLCInstalled::pClassPointer = NULL;

// Class UDKGame.DunDefDLCSummary
// 0x001C (0x0098 - 0x007C)
class UDunDefDLCSummary : public UUIResourceDataProvider
{
public:
	int                                                DlcID;                                            		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FCampaignLevelEntry >               DLCLevelEntries;                                  		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDLCEquipmentEntry >                DLCEquipmentEntries;                              		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47822 ];

		return pClassPointer;
	};

	bool HasLevelEntry ( struct FCampaignLevelEntry levelEntry );
};

UClass* UDunDefDLCSummary::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsGameOver
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsGameOver : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47828 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsGameOver::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsHardcore
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsHardcore : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47831 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsHardcore::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsHeroTemplate
// 0x000C (0x00DC - 0x00D0)
class UDunDef_SeqCond_IsHeroTemplate : public USequenceCondition
{
public:
	class UDunDefHero*                                 HeroTemplate;                                     		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CheckAllPlayers : 1;                              		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UObject*                                     theObject;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47834 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsHeroTemplate::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsInCombatPhase
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsInCombatPhase : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47841 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsInCombatPhase::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsInVolume
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IsInVolume : public USequenceCondition
{
public:
	unsigned long                                      CheckAllPlayers : 1;                              		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UObject*                                     TheActor;                                         		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47844 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsInVolume::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsLocalPlayer
// 0x000C (0x00DC - 0x00D0)
class UDunDef_SeqCond_IsLocalPlayer : public USequenceCondition
{
public:
	int                                                MatchLocalPlayerIndex;                            		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsPrimaryProfilePlayer : 1;                       		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UObject*                                     theObject;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47857 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsLocalPlayer::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsMissionUnlocked
// 0x0011 (0x00E1 - 0x00D0)
class UDunDef_SeqCond_IsMissionUnlocked : public USequenceCondition
{
public:
	unsigned long                                      bCheckBeaten : 1;                                 		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyCheckLocal : 1;                              		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsMinimumDifficulty : 1;                         		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsHardcore : 1;                                  		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseCurrentMissionSettingForHardcore : 1;         		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseCurrentMissionSettingForDifficulty : 1;       		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	struct FString                                     MissionTag;                                       		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      CheckBeatenDifficulty;                            		// 0x00E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47864 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsMissionUnlocked::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsOfClass
// 0x000C (0x00DC - 0x00D0)
class UDunDef_SeqCond_IsOfClass : public USequenceCondition
{
public:
	struct FName                                       ClassName;                                        		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     theObject;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47875 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsOfClass::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsPlayerUsingGamepad
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsPlayerUsingGamepad : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47880 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsPlayerUsingGamepad::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsPureStrategy
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsPureStrategy : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47883 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsPureStrategy::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsSceneOpen
// 0x0004 (0x00D4 - 0x00D0)
class UDunDef_SeqCond_IsSceneOpen : public USequenceCondition
{
public:
	class UClass*                                      UISceneClass;                                     		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47886 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsSceneOpen::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsStandaloneGame
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsStandaloneGame : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47890 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsStandaloneGame::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_IsStereoscopic3D
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsStereoscopic3D : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47893 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_IsStereoscopic3D::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_ShowTutorial
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_ShowTutorial : public USequenceCondition
{
public:
	int                                                TutorialSet;                                      		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DisableTutorialSet : 1;                           		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47896 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_ShowTutorial::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqCond_SignedIn
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_SignedIn : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47902 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqCond_SignedIn::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqEvent_CoreDeath
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_CoreDeath : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47908 ];

		return pClassPointer;
	};

};

UClass* UDunDef_SeqEvent_CoreDeath::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqEvent_DifficultyChanged
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_DifficultyChanged : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47912 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqEvent_DifficultyChanged::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqEvent_OptionsChanged
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_OptionsChanged : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47915 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqEvent_OptionsChanged::pClassPointer = NULL;

// Class UDKGame.DunDef_SeqEvent_SkipBossTimer
// 0x0004 (0x0104 - 0x0100)
class UDunDef_SeqEvent_SkipBossTimer : public USequenceEvent
{
public:
	int                                                NewBossTime;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47922 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_SeqEvent_SkipBossTimer::pClassPointer = NULL;

// Class UDKGame.DunDef_TickableAnimNodeInterface
// 0x0000 (0x003C - 0x003C)
class UDunDef_TickableAnimNodeInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47955 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
};

UClass* UDunDef_TickableAnimNodeInterface::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_CheckAllPlayersLoggedIn
// 0x0018 (0x0104 - 0x00EC)
class UDunDef_UIAction_CheckAllPlayersLoggedIn : public UUIAction
{
public:
	struct FString                                     MessageTitle;                                     		// 0x00EC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MessageText;                                      		// 0x00F8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47959 ];

		return pClassPointer;
	};

	void eventActivated ( );
	bool AcceptedSaveWarning ( class UUI_MessageBox* theMessageBox, struct FString ButtonPressed, int whichPlayer );
};

UClass* UDunDef_UIAction_CheckAllPlayersLoggedIn::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_CloseSceneWithAnimation
// 0x0000 (0x00EC - 0x00EC)
class UDunDef_UIAction_CloseSceneWithAnimation : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47970 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UIAction_CloseSceneWithAnimation::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_GotoURL
// 0x000C (0x00F8 - 0x00EC)
class UDunDef_UIAction_GotoURL : public UUIAction
{
public:
	struct FString                                     URLToVisit;                                       		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47973 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UIAction_GotoURL::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_LoadLevel
// 0x001C (0x0108 - 0x00EC)
class UDunDef_UIAction_LoadLevel : public UUIAction
{
public:
	struct FString                                     CampaignLevelTag;                                 		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LevelName;                                        		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      IsGameplayLevel : 1;                              		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47977 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UIAction_LoadLevel::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_PlayAnimation
// 0x000C (0x00F8 - 0x00EC)
class UDunDef_UIAction_PlayAnimation : public UUIAction
{
public:
	unsigned long                                      PlayOnSelf : 1;                                   		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       AnimationName;                                    		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47983 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UIAction_PlayAnimation::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_PlayMusic
// 0x0024 (0x0110 - 0x00EC)
class UDunDef_UIAction_PlayMusic : public UUIAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                       		// 0x00EC (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47998 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UIAction_PlayMusic::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_PlaySound
// 0x0004 (0x00F0 - 0x00EC)
class UDunDef_UIAction_PlaySound : public UUIAction
{
public:
	class USoundCue*                                   CueToPlay;                                        		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48002 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UIAction_PlaySound::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_SetDunDefUICustomValue
// 0x0008 (0x00F4 - 0x00EC)
class UDunDef_UIAction_SetDunDefUICustomValue : public UUIAction
{
public:
	class UUIScene*                                    SceneToSetOn;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomValue;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48006 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UIAction_SetDunDefUICustomValue::pClassPointer = NULL;

// Class UDKGame.DunDef_UIAction_UnlockAchievement
// 0x0008 (0x00F4 - 0x00EC)
class UDunDef_UIAction_UnlockAchievement : public UUIAction
{
public:
	unsigned char                                      Achievement;                                      		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UnlockForEveryone : 1;                            		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48011 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UIAction_UnlockAchievement::pClassPointer = NULL;

// Class UDKGame.DunDef_UICond_DunDefUIValue
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_UICond_DunDefUIValue : public USequenceCondition
{
public:
	class UUIObject*                                   ownerObject;                                      		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueToCheck;                                     		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48017 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UDunDef_UICond_DunDefUIValue::pClassPointer = NULL;

// Class UDKGame.DunDefAchievementTrophy
// 0x009C (0x02B8 - 0x021C)
class ADunDefAchievementTrophy : public AActor
{
public:
	unsigned char                                      myAchievement;                                    		// 0x021C (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              ActivationWeighting;                              		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationOffset;                                 		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipTextScale;                                 		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipTextDescriptionScale;                      		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipDescriontYOffset;                          		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      AchievementDescriptionColor;                      		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ToolTipWorldOffset;                               		// 0x0238 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ToolTipScreenOffset;                              		// 0x0244 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        MyStaticMeshComp;                                 		// 0x0250 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0254 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bDrawToolTip : 1;                                 		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAchievementUnlocked : 1;                         		// 0x0258 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	int                                                MaterialIndexForAchievementIcon;                  		// 0x025C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FName                                       TextureParamForAchievementIcon;                   		// 0x0260 (0x0008) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FString                                     ActivationString_Use;                             		// 0x0268 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FAchievementEntry                           theAchievement;                                   		// 0x0274 (0x002C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UStaticMesh*                                 ReplicatedStaticMesh;                             		// 0x02A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedScale;                                  		// 0x02A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ReplicatedStaticMeshTranslation;                  		// 0x02A8 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInstanceConstant*                   AchievementIconMaterialInstance;                  		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48065 ];

		return pClassPointer;
	};

	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	float GetActivationOffset ( );
	float GetActivationWeighting ( );
	void ShowAchievementInfo ( class ADunDefPlayerController* activatedByPC );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	void SetAchievementUnlocked ( unsigned long bUnlocked );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void UpdateMaterialIcon ( );
	void UpdateAchievementBinding ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefAchievementTrophy::pClassPointer = NULL;

// Class UDKGame.PawnBoosterInterface
// 0x0000 (0x003C - 0x003C)
class UPawnBoosterInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48272 ];

		return pClassPointer;
	};

	void GetBoostedTargets ( TArray< class APawn* >* boostedTargets );
	void NotifyOfBoostedRemoval ( class APawn* removedBoostee );
	float GetPawnBoostAmount ( unsigned char boostType );
	bool HasPawnBoostingType ( unsigned char boostType );
};

UClass* UPawnBoosterInterface::pClassPointer = NULL;

// Class UDKGame.DunDefTower_ChainLightning
// 0x00B8 (0x08D0 - 0x0818)
class ADunDefTower_ChainLightning : public ADunDefTower
{
public:
	float                                              AttackRange;                                      		// 0x0818 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxChainLength;                                   		// 0x081C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackChargeUpTime;                               		// 0x0820 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackDuration;                                   		// 0x0824 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackInterval;                                   		// 0x0828 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AttackBeamTemplate;                               		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackDamageInterval;                             		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackDamageAmount;                               		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackDamagePercent;                              		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      AttackDamageType;                                 		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     AttackMuzzleEffectTemplate;                       		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AttackMuzzleEffectSpawnOffset;                    		// 0x0844 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttackAnimBlenderName;                            		// 0x0850 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MuzzleSocketName;                                 		// 0x0858 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    AmbientMuzzleEffect;                              		// 0x0860 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    AmbientGroundEffect;                              		// 0x0864 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             BeamEmitterTemplate;                              		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIUpdateInterval;                                 		// 0x086C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ChainLightningCharge;                             		// 0x0870 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ChainLightningShootBegin;                         		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             LoopingShootSoundComponent;                       		// 0x0878 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     ChainLengthString;                                		// 0x087C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttackDamagePerSecondString;                      		// 0x0888 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChainTargetsString;                               		// 0x0894 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	int                                                MaxChainTargetsBase;                              		// 0x08A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxChainTargetsStatExponent;                      		// 0x08A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FEnemyChainLink >                   EnemyChainLinks;                                  		// 0x08A8 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class ADunDefEmitterSpawnable*                     AttackMuzzleEffect;                               		// 0x08B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastApplyDamageTime;                              		// 0x08B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAttackTime;                                   		// 0x08BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeBlend*                              MyAttackAnimBlender;                              		// 0x08C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      Target;                                           		// 0x08C4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      IsDoingAttackDamage : 1;                          		// 0x08C8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              LastAIUUpdate;                                    		// 0x08CC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48277 ];

		return pClassPointer;
	};

	bool UsesRange ( );
	class UClass* GetDamageType ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	int GetMaxChainTargets ( );
	float StaticGetAttackRange ( class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler );
	float GetRateDivisor ( );
	float GetAttackDamage ( );
	float GetMaxChainLength ( );
	float GetAttackRange ( );
	float GetAttackDuration ( );
	struct FVector GetMuzzleLocation ( );
	void GetMuzzleTransformation ( struct FVector* Position, struct FRotator* Orientation );
	void SetTarget ( class AActor* theTarget );
	class UDunDefTargetableInterface* FindBestTarget ( );
	void UpdateAI ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefTower_ChainLightning::pClassPointer = NULL;

// Class UDKGame.DunDefBuffEffectInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefBuffEffectInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48485 ];

		return pClassPointer;
	};

	void ReportHeroSwapped ( );
	void AdjustTargetDamage ( class AActor* forActor, class AController* fromController, class UClass* TheDamageType, class UObject* WhatHitMe, struct FsLastDamageInfo damageInfo, int* howMuchDamage, struct FVector* Momentum );
	void ReportBuffRemoved ( class UDunDefBuff* BuffRemoved );
	void ReportBuffAdded ( class UDunDefBuff* BuffAdded );
	void TriggerEvent ( unsigned char EventToTrigger );
	void ReportOwnerDeath ( );
	void ReportOwnerJumped ( );
	void ReportHealedActor ( int healedAmount, class AActor* healed );
	void ReportKilledActor ( class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem );
	void ReportHealed ( int healedAmount, class AActor* Healer );
	void ReportTookDamage ( int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage );
	void ReportActorDealtDamage ( int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage );
	void AdjustDealtDamage ( class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum );
	void GetStatValue ( class AActor* forActor, unsigned char levelUpValue, unsigned long bAdditivePass, float* buffVal );
	class USurface* GetBuffIcon ( class UDunDefTargetableInterface* aTarget );
	struct FString GetBuffDescription ( class UDunDefTargetableInterface* aTarget );
	struct FString GetBuffName ( class UDunDefTargetableInterface* aTarget );
};

UClass* UDunDefBuffEffectInterface::pClassPointer = NULL;

// Class UDKGame.DunDefBuffInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefBuffInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48486 ];

		return pClassPointer;
	};

	void AdjustDealtDamage ( class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum );
	void ReportBuffRemoved ( class UDunDefBuff* BuffRemoved );
	void ReportBuffAdded ( class UDunDefBuff* BuffAdded );
	void ReportActorDealtDamage ( int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage );
	void ReportTookDamage ( int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage );
	void ReportHealedActor ( int healedAmount, class AActor* healed );
	void ReportKilledActor ( class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem );
	struct FVector GetLocation ( );
	int GetHealth ( unsigned long bGetMax );
	void OnBuffRemoved ( class UObject* BuffRemoved );
	void OnBuffAdded ( class UObject* BuffAdded );
};

UClass* UDunDefBuffInterface::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Silly
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Silly : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48532 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Silly::pClassPointer = NULL;

// Class UDKGame.DunDefInventoryManager
// 0x0000 (0x0238 - 0x0238)
class ADunDefInventoryManager : public AInventoryManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48605 ];

		return pClassPointer;
	};

	void DestroyAllWeapons ( );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void TearOffInventory ( );
	class AInventory* CreateInventoryFromTemplate ( class AActor* InventoryActorTemplate, unsigned long bDoNotActivate );
	void OwnerDied ( );
};

UClass* ADunDefInventoryManager::pClassPointer = NULL;

// Class UDKGame.DunDefManaItemInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefManaItemInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49106 ];

		return pClassPointer;
	};

	int GetManaPower ( );
	void Collected ( class ADunDefPlayer* byPlayer );
};

UClass* UDunDefManaItemInterface::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Invincible
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Invincible : public UDunDefDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49414 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Invincible::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_ProxMine
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ProxMine : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49415 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_ProxMine::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Poison
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Poison : public UDunDefDamageType_Elemental
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49589 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Poison::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Fire
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Fire : public UDunDefDamageType_Elemental
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49652 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Fire::pClassPointer = NULL;

// Class UDKGame.DunDefMiniMapIconInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefMiniMapIconInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49755 ];

		return pClassPointer;
	};

	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
};

UClass* UDunDefMiniMapIconInterface::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Lightning
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Lightning : public UDunDefDamageType_Elemental
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49756 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Lightning::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_ForceKnockBack
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ForceKnockBack : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49825 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_ForceKnockBack::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_ProtonChargeBlast
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ProtonChargeBlast : public UDunDefDamageType_ForceKnockBack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49824 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_ProtonChargeBlast::pClassPointer = NULL;

// Class UDKGame.DunDefPracticeDummy
// 0x00BC (0x05C4 - 0x0508)
class ADunDefPracticeDummy : public ADunDefDamageableTarget
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0508 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      DummyChestMeshComp;                               		// 0x050C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< int >                                      DamageThresholds;                                 		// 0x0510 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             BehindAnimationsOneForDamageThresholds;           		// 0x051C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             BehindAnimationsTwoForDamageThresholds;           		// 0x0528 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             AnimationsOneForDamageThresholds;                 		// 0x0534 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             AnimationsTwoForDamageThresholds;                 		// 0x0540 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DamagePerSecondString;                            		// 0x054C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DamageTotalString;                                		// 0x0558 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FLinearColor                                DPSColor;                                         		// 0x0564 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              AveragingTimeForDPS;                              		// 0x0574 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReportTextTime;                                   		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ResistsDamage;                                    		// 0x057C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                   		// 0x0588 (0x0004) [0x0000000000000000]              
	struct FHighDigitInt                               DamageSinceDPSBegin;                              		// 0x058C (0x0010) [0x0000000000000000]              
	float                                              FirstDamageTime;                                  		// 0x059C (0x0004) [0x0000000000000000]              
	float                                              LastDamageTime;                                   		// 0x05A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTargetableByFamiliars : 1;                       		// 0x05A4 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	float                                              enemyDrainResistanceModifier;                     		// 0x05A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UPawnBoosterInterface* >             PawnDeBoosters;                                   		// 0x05AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UPawnBoosterInterface* >             PawnBoosters;                                     		// 0x05B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49969 ];

		return pClassPointer;
	};

	void ReportPercentage ( float fraction, struct FString Text, float Offset );
	float GetBoostAmount ( unsigned char boostType );
	class UPawnBoosterInterface* GetPawnDeBooster ( unsigned char boostType, float* boostValue );
	void RemovePawnDeBooster ( class UPawnBoosterInterface* aBooster, int indexOverride );
	void AddPawnDeBooster ( class UPawnBoosterInterface* aBooster );
	class UPawnBoosterInterface* GetPawnBooster ( unsigned char boostType, float* boostValue );
	void RemoveAllPawnBoosters ( );
	void RemovePawnBooster ( class UPawnBoosterInterface* aBooster, int indexOverride );
	void AddPawnBooster ( class UPawnBoosterInterface* aBooster );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	struct FString GetToolTipText ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void PlayHitAnim ( unsigned char hitAnimIndex, unsigned long fromBehind );
	void AdjustDamage ( class UClass* DamageType, class AController* InstigatedBy, struct FVector HitLocation, struct FTraceHitInfo HitInfo, int* DamageAmount, struct FVector* Momentum );
	void StartTimer ( );
	void eventNotifyTookDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void SubtractHealth ( int DamageAmount );
	void DPSEnd ( float TimePassed, unsigned long noRestart );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
};

UClass* ADunDefPracticeDummy::pClassPointer = NULL;

// Class UDKGame.IStatusEffectHandler
// 0x0000 (0x003C - 0x003C)
class UIStatusEffectHandler : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49973 ];

		return pClassPointer;
	};

	bool HasStatusEffect ( unsigned char StatusToCheck );
	void RemoveStatusEffect ( unsigned char Status );
	void AddStatusEffect ( unsigned char Status );
};

UClass* UIStatusEffectHandler::pClassPointer = NULL;

// Class UDKGame.DunDefCagedPet
// 0x0024 (0x0240 - 0x021C)
class ADunDefCagedPet : public AActor
{
public:
	int                                                ShopPetIndex;                                     		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0220 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     FamMeshOffset;                                    		// 0x0224 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleFactor;                                      		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      myMeshComp;                                       		// 0x0234 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UHeroEquipment*                              LastHeroEquipment;                                		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   FamMat;                                           		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50376 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void UpdateMesh ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefCagedPet::pClassPointer = NULL;

// Class UDKGame.DunDefConsole
// 0x0000 (0x01E0 - 0x01E0)
class UDunDefConsole : public UConsole
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50399 ];

		return pClassPointer;
	};

};

UClass* UDunDefConsole::pClassPointer = NULL;

// Class UDKGame.UI_PlayerStats
// 0x0564 (0x0BA0 - 0x063C)
class UUI_PlayerStats : public UDunDefUIScene
{
public:
	class UUIScriptWidget_Button*                      CloseButton;                                      		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel_DataList*                           LevelList;                                        		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                CampaignButton;                                   		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                ChallengeButton;                                  		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                AllTimeButton;                                    		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                BestOfButton;                                     		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                LeaderboardButton;                                		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                AchievementButton;                                		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                KillButton;                                       		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                TowerButton;                                      		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                EnemyButton;                                      		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                TreasureButton;                                   		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                NightmareButton;                                  		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    StatOwnerLabel;                                   		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      PrevStatButton;                                   		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      NextStatButton;                                   		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPrefab*                                   LeaderboardPrefab;                                		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   displayPanel;                                     		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       statFont;                                         		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    scrollUpImage;                                    		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    scrollDownImage;                                  		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  XBoxLeftShoulder;                                 		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  XBoxRightShoulder;                                		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    gamercardLabel;                                   		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  gamerCardButton;                                  		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  HardcoreIcon;                                     		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     showGamerCardString;                              		// 0x06A4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              tabAmount;                                        		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    statDisplayLabel;                                 		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_GameStatsPopup*              newStatDisplayWidget;                             		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      earnedAchievementNameColor;                       		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      earnedAchievementDescColor;                       		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      unearnedAchievementNameColor;                     		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      unearnedAchievementDescColor;                     		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefGameStats*                            GameStats;                                        		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefPlayerStats*                          Stats;                                            		// 0x06D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIPrefabInstance*                           LeaderboardInstance;                              		// 0x06D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                statsIndex;                                       		// 0x06D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCampaignLevelEntryObject*                   SelectedButton;                                   		// 0x06DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIPanel_Leaderboard*                        theLeaderboard;                                   		// 0x06E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                difficulty;                                       		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              retryDelay;                                       		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              retryTimer;                                       		// 0x06EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              lineX;                                            		// 0x06F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              lineY;                                            		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              startY;                                           		// 0x06F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                scrollDir;                                        		// 0x06FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              checkLoginTimer;                                  		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              checkLoginDelay;                                  		// 0x0704 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      curViewMode;                                      		// 0x0708 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct UUI_PlayerStats_FEnemyStatInfo >    enemyStats;                                       		// 0x070C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct UUI_PlayerStats_FTowerStatInfo >    towerStats;                                       		// 0x0718 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FClassToTextureMapping >            nameTextures;                                     		// 0x0724 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  unknownTexture;                                   		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     unknownString;                                    		// 0x0734 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     campaignTag;                                      		// 0x0740 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                campaignIndex;                                    		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      isHostMode : 1;                                   		// 0x0750 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      isChallenge : 1;                                  		// 0x0750 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      isBestOf : 1;                                     		// 0x0750 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      isLeaderboard : 1;                                		// 0x0750 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      isAward : 1;                                      		// 0x0750 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      CurrentUserRemote : 1;                            		// 0x0750 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FString                                     totalString;                                      		// 0x0754 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bestString;                                       		// 0x0760 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     leastString;                                      		// 0x076C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mostString;                                       		// 0x0778 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     killString;                                       		// 0x0784 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerString;                                     		// 0x0790 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     towerString;                                      		// 0x079C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     towersString;                                     		// 0x07A8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     builtString;                                      		// 0x07B4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     repairString;                                     		// 0x07C0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     destroyString;                                    		// 0x07CC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     soldString;                                       		// 0x07D8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     timeString;                                       		// 0x07E4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     chestString;                                      		// 0x07F0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     manaString;                                       		// 0x07FC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     expString;                                        		// 0x0808 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     scoreString;                                      		// 0x0814 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     damageString;                                     		// 0x0820 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathString;                                      		// 0x082C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     naString;                                         		// 0x0838 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     pureStrategyString;                               		// 0x0844 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     survivalString;                                   		// 0x0850 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     highestString;                                    		// 0x085C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     waveString;                                       		// 0x0868 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     endingsAchieved;                                  		// 0x0874 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     towerButtonString;                                		// 0x0880 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     enemyButtonString;                                		// 0x088C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     treasureButtonString;                             		// 0x0898 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     generalString;                                    		// 0x08A4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     awardString;                                      		// 0x08B0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     flawlessVictoryString;                            		// 0x08BC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     immortalString;                                   		// 0x08C8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     invincibleString;                                 		// 0x08D4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mvpString;                                        		// 0x08E0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strategistString;                                 		// 0x08EC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     triggerHappyString;                               		// 0x08F8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bankerString;                                     		// 0x0904 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     chillaxString;                                    		// 0x0910 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     janitorString;                                    		// 0x091C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     knightString;                                     		// 0x0928 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     lordString;                                       		// 0x0934 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     handymanString;                                   		// 0x0940 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     campaignString;                                   		// 0x094C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	class UUIButton_Scripted*                          nextMode;                                         		// 0x0958 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          PrevMode;                                         		// 0x095C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          nextGameMode;                                     		// 0x0960 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          prevGameMode;                                     		// 0x0964 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UUIScriptWidget_ToggleButton* >      DifficultyButtons;                                		// 0x0968 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UUIScriptWidget_ToggleButton* >      ModeButtons;                                      		// 0x0974 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentMode;                                      		// 0x0980 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentUserID;                                    		// 0x0984 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct UDunDefHeroManagerNative_FAchievementInfo   curAchievements;                                  		// 0x0988 (0x01F4) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct UDunDefHeroManagerNative_FLevelProgressInfo > curProgress;                                      		// 0x0B7C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     earnedString;                                     		// 0x0B88 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     unearnedString;                                   		// 0x0B94 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50914 ];

		return pClassPointer;
	};

	bool eventIsKeyboardOwned ( );
	void UnhideLeaderboardTab ( );
	void HideLeaderboardTab ( );
	bool NotifyLoginStatusChanged ( int ControllerId, unsigned char Status );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void CheckLoginForLeaderboard ( );
	void RenderPopup ( class UCanvas* C );
	void RenderCompletionIcons ( class UCanvas* C );
	void RenderAchievements ( class UCanvas* C );
	void RenderTreasureStats ( class UCanvas* C );
	void RenderEnemyStats ( class UCanvas* C );
	void RenderTowerStats ( class UCanvas* C );
	void RenderKillStats ( class UCanvas* C );
	void RenderSingleLine ( class UCanvas* C, struct FString toRender, float XOffset, class UTexture2D* Icon, unsigned long bDoWrap, float EndX );
	void RenderBestOfStat ( class UCanvas* C, int StatClassIndex, struct FString prefixString, unsigned long Time );
	void RenderViewedEndings ( class UCanvas* C );
	struct FString BuildBestOfString ( int StatClassIndex, struct FString BufferName, int theDifficulty, class UTexture2D** Icon, struct FString* partTwo );
	void CycleMode ( int Dir );
	void CycleDifficulty ( int Dir );
	bool AnyDifficultiesEnabled ( );
	int Cycle ( int Start, int Dir, int Min, int Max, unsigned long shouldCycle );
	bool OnInterceptedInputKey ( struct FInputEventParameters* EventParms );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void Update ( float DeltaTime );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void GetNextStat ( unsigned long bMoveForward, int failsafedepth );
	void SetupLeaderboardDifficulty ( );
	void GetDifficulty ( int OverrideDifficulty );
	void RefreshStats ( );
	int RenderAwards ( class UCanvas* C );
	bool AppendAwardString ( class UCanvas* C, int whichAward );
	void SetHostMode ( unsigned long isHost );
	void SetCampaignTag ( struct FString newTag );
	void EnableAllButtons ( unsigned long bEnabled );
	void eventSceneDeactivated ( );
	void LevelSelected ( class UUIButton_DataListEntry* Button );
	void SelectAButton ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void SetStatReadIndex ( );
	bool CheckSetupUI ( );
	void AddEnemyStats ( struct FName enemyName, int curDifficulty );
	void AddTowerStats ( struct FName towerName, int curDifficulty );
	void Preprocess ( );
	void eventPostInitialSceneUpdate ( );
	void eventPostInitialize ( );
	void eventInitialized ( );
};

UClass* UUI_PlayerStats::pClassPointer = NULL;

// Class UDKGame.DunDefGameplayMessage
// 0x0000 (0x0164 - 0x0164)
class UDunDefGameplayMessage : public UDunDefGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50993 ];

		return pClassPointer;
	};

};

UClass* UDunDefGameplayMessage::pClassPointer = NULL;

// Class UDKGame.DunDefTowerPreventOrAllowInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefTowerPreventOrAllowInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51081 ];

		return pClassPointer;
	};

	bool AllowTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point );
	bool CheckAllowance ( );
	bool PreventTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point, float towerRadius );
};

UClass* UDunDefTowerPreventOrAllowInterface::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Blunt
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Blunt : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51106 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Blunt::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Cutting
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Cutting : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51111 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Cutting::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Debug
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Debug : public UDunDefDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51116 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Debug::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_ElectricCutting
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ElectricCutting : public UDunDefDamageType_Cutting
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51120 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_ElectricCutting::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_EnemySharp
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_EnemySharp : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51128 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_EnemySharp::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_EtherealSpike
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_EtherealSpike : public UDunDefDamageType_Lightning
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51138 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_EtherealSpike::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Fire_Passive
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Fire_Passive : public UDunDefDamageType_Fire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51147 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Fire_Passive::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_FullMomentum
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_FullMomentum : public UDunDefDamageType_Blunt
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51157 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_FullMomentum::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Holy
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Holy : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51161 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Holy::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_IgnoreResistance
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_IgnoreResistance : public UDunDefDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51165 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_IgnoreResistance::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_InfernoTrap
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_InfernoTrap : public UDunDefDamageType_Fire_Passive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51169 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_InfernoTrap::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_LightingTower
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_LightingTower : public UDunDefDamageType_Lightning
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51176 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_LightingTower::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Lightning_FullMomentum
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Lightning_FullMomentum : public UDunDefDamageType_Lightning
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51180 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Lightning_FullMomentum::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Lightning_Passive
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Lightning_Passive : public UDunDefDamageType_Lightning
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51184 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Lightning_Passive::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Love
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Love : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51188 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Love::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_MegaDamage
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_MegaDamage : public UDunDefDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51192 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_MegaDamage::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Passive
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Passive : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51196 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Passive::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Poison_Passive
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Poison_Passive : public UDunDefDamageType_Poison
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51205 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Poison_Passive::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Special
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Special : public UDunDefDamageType_Generic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51218 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Special::pClassPointer = NULL;

// Class UDKGame.DunDefDamageType_Suction
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Suction : public UDunDefDamageType_ForceKnockBack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51222 ];

		return pClassPointer;
	};

};

UClass* UDunDefDamageType_Suction::pClassPointer = NULL;

// Class UDKGame.DunDefDarkElf
// 0x003C (0x0D08 - 0x0CCC)
class ADunDefDarkElf : public ADunDefEnemy
{
public:
	struct FName                                       ProjectileSpawnSocketName;                        		// 0x0CCC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ArrowAttachmentSocketName;                        		// 0x0CD4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               ArrowMesh;                                        		// 0x0CDC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ArrowMeshTranslationOffset;                       		// 0x0CE0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ArrowMeshRotationOffset;                          		// 0x0CEC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ArrowMeshScale;                                   		// 0x0CF8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      ArrowMeshComponent;                               		// 0x0D04 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51226 ];

		return pClassPointer;
	};

	void GetProjectileSpawnTransformation ( struct FVector* Position, struct FRotator* Orientation );
	void eventEndedAttack ( );
	void eventMeleeSwingEnd ( );
	void eventMeleeSwingStart ( );
};

UClass* ADunDefDarkElf::pClassPointer = NULL;

// Class UDKGame.DunDefDarkElfController
// 0x002C (0x0638 - 0x060C)
class ADunDefDarkElfController : public ADunDefEnemyController
{
public:
	class ADunDefProjectile*                           AttackProjectileTemplate;                         		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x0610 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeadTargetBasePercent;                            		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeadTargetRandomPercent;                          		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimRandomSpread;                                  		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShootOffsetYawArc;                             		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    DifficultyAttackRanges;                           		// 0x062C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51237 ];

		return pClassPointer;
	};

	int GetAttackDamage ( );
	float GetAttackRange ( );
	float GetAttackInterval ( class AActor* Victim );
	void FireProjectile ( );
};

UClass* ADunDefDarkElfController::pClassPointer = NULL;

// Class UDKGame.DunDefEnemyTargetingPreventionInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefEnemyTargetingPreventionInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51448 ];

		return pClassPointer;
	};

	bool PreventTargeting ( class UDunDefTargetableInterface* Target, class ADunDefEnemy* forEnemy );
};

UClass* UDunDefEnemyTargetingPreventionInterface::pClassPointer = NULL;

// Class UDKGame.DunDefTower_Blockade
// 0x0014 (0x082C - 0x0818)
class ADunDefTower_Blockade : public ADunDefTower
{
public:
	float                                              BlockadeWidth;                                    		// 0x0818 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    AmbientParticleEffect;                            		// 0x081C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      StealEnemyElementalEffect : 1;                    		// 0x0820 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     StealElementPawnEffect;                           		// 0x0824 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     StealElementTowerEffect;                          		// 0x0828 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51540 ];

		return pClassPointer;
	};

	void PlayElementalStealingEffect ( class ADunDefEnemy* fromEnemy );
	void eventNotifyTookDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefTower_Blockade::pClassPointer = NULL;

// Class UDKGame.DunDefDarkElfMage
// 0x0038 (0x0D40 - 0x0D08)
class ADunDefDarkElfMage : public ADunDefDarkElf
{
public:
	struct FName                                       SpawnAnimName;                                    		// 0x0D08 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HealAnimName;                                     		// 0x0D10 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     HealRadiusEffect;                                 		// 0x0D18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             HealEffectPawns;                                  		// 0x0D1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusEffectDivisor;                              		// 0x0D20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    StaffParticleComponent;                           		// 0x0D24 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       StaffEffectSocketName;                            		// 0x0D28 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                StaffMaterialIndex;                               		// 0x0D30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleSystem* >                   StaffDifficultyParticleFX;                        		// 0x0D34 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51841 ];

		return pClassPointer;
	};

	int UpdateDifficultyMaterial ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void eventDestroyed ( );
	bool Died ( class AController* Killer, class UClass* dt, struct FVector HitLoc );
	void FireProjectile ( );
	bool PlayingSpawnAnim ( );
	bool PlayingHealingAnim ( );
	void PlaySpawnAnim ( );
	void PlayHealingAnim ( );
	void eventPostBeginPlay ( );
	void PlayHealEffect ( float Radius );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefDarkElfMage::pClassPointer = NULL;

// Class UDKGame.DunDefDarkElfMageController
// 0x00E9 (0x0721 - 0x0638)
class ADunDefDarkElfMageController : public ADunDefDarkElfController
{
public:
	int                                                HealingRadius;                                    		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HealingAmount;                                    		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealSeekRange;                                    		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealHealthThreshold;                              		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfHealthThreshold;                              		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEnemy*                                SpawnEnemyTemplate;                               		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnDistance;                                    		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnHeight;                                      		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnLimit;                                       		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnRange;                                       		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SpawnStateName;                                   		// 0x0660 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HealStateName;                                    		// 0x0668 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RunStateName;                                     		// 0x0670 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PanicRadius;                                      		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PanicStopRange;                                   		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SafeFloorZDistance;                               		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDontKillMySpawnsOnDeath : 1;                     		// 0x0684 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCanHeal : 1;                                     		// 0x0684 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanSpawn : 1;                                    		// 0x0684 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNoAllowPanic : 1;                                		// 0x0684 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bHealByHealthPct : 1;                             		// 0x0684 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                AbortRunTime;                                     		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OtherMageHealingMultiplier;                       		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunAwayTimeOut;                                   		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveToHealTargetTimeOut;                          		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OtherStateTimeOut;                                		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SummonInterval;                                   		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastActionTimeout;                                		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnHealthMultiplierHealingExponent;              		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    DifficultyHealingRadiusMultipliers;               		// 0x06A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DifficultyHealingAmountMultipliers;               		// 0x06B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PawnHealthMultiplier;                             		// 0x06C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpawnsInPlay;                                     		// 0x06C4 (0x0004) [0x0000000000000000]              
	TArray< class ADunDefPawn* >                       SpawnList;                                        		// 0x06C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            IgnoreDeadPawnsList;                              		// 0x06D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ADunDefPawn*                                 RunFrom;                                          		// 0x06E0 (0x0004) [0x0000000000000000]              
	struct FVector                                     RunToLoc;                                         		// 0x06E4 (0x000C) [0x0000000000000000]              
	struct FVector                                     RunToLocVia;                                      		// 0x06F0 (0x000C) [0x0000000000000000]              
	class AActor*                                      RunToActor;                                       		// 0x06FC (0x0004) [0x0000000000000000]              
	float                                              StartRunTime;                                     		// 0x0700 (0x0004) [0x0000000000000000]              
	int                                                RunCounter;                                       		// 0x0704 (0x0004) [0x0000000000000000]              
	class ADunDefPawn*                                 HealTarget;                                       		// 0x0708 (0x0004) [0x0000000000000000]              
	float                                              CooldownTimeHeal;                                 		// 0x070C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CooldownTimeSpawn;                                		// 0x0710 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastActionTime;                                   		// 0x0714 (0x0004) [0x0000000000000000]              
	float                                              LastSpawnTime;                                    		// 0x0718 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HealthPctToHeal;                                  		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WhatToDoNext;                                     		// 0x0720 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51882 ];

		return pClassPointer;
	};

	void CheckForCustomAttacks ( );
	void GetPawnHealthMultiplier ( );
	float GetHealingRadius ( );
	void DefaultStateCheck ( );
	int GetHealingAmount ( class ADunDefPawn* healingActor );
	struct FVector eventGeneratePathToPoint ( struct FVector Goal, float WithinDistance, unsigned long bAllowPartialPath );
	void HealCooldown ( );
	void SpawnCooldown ( );
	void NotifySpawnDeath ( class ADunDefPawn* P );
	bool ShouldSpawn ( );
	void TimedDecideWhatToDo ( );
	bool CheckForDeadSpawns ( );
	void DecideWhatToDo ( );
	bool ShouldPanic ( );
	bool ShouldDoHeal ( );
	void KillSpawns ( class AController* Killer );
	void InterruptLatent ( );
	void FireProjectile ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefDarkElfMageController::pClassPointer = NULL;

// Class UDKGame.DunDefSkeleton
// 0x0040 (0x0D0C - 0x0CCC)
class ADunDefSkeleton : public ADunDefEnemy
{
public:
	int                                                Lives;                                            		// 0x0CCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ResurrectionTimer;                                		// 0x0CD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ResurrectionAnimName;                             		// 0x0CD4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MeleeSwingSocketAName;                            		// 0x0CDC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MeleeSwingSocketBName;                            		// 0x0CE4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     DeathEmitterTemplate;                             		// 0x0CEC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     RezEmitterTemplate;                               		// 0x0CF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SpawnEffect;                                      		// 0x0CF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SpawnSound;                                       		// 0x0CF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DeathDealingDmgTypes;                             		// 0x0CFC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bTempDead : 1;                                    		// 0x0D08 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bResurrect : 1;                                   		// 0x0D08 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51970 ];

		return pClassPointer;
	};

	bool PlayingResurrectionAnim ( );
	void Resurrect ( );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	float GetTowerTargetingDesirability ( class ADunDefTower* forTower );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	bool IsCurrentlyPlayingHurtAnimation ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void PlayTempDying ( class UClass* DamageType, struct FVector HitLocation );
	void eventDestroyed ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	struct FVector GetMeleeSwingBLocation ( );
	struct FVector GetMeleeSwingALocation ( );
	void eventEndMeleeSwing ( );
	void eventStartMeleeSwing ( );
	void eventReplicatedEvent ( struct FName VarName );
	void CheckLives ( );
	void eventPostBeginPlay ( );
	struct FColor GetMiniMapIconColor ( );
	void SetCreator ( class ADunDefEnemyController* C );
	bool StopsProjectile ( class AProjectile* P );
	bool IsDead ( );
};

UClass* ADunDefSkeleton::pClassPointer = NULL;

// Class UDKGame.DunDefDarkElfWarrior
// 0x0080 (0x0D4C - 0x0CCC)
class ADunDefDarkElfWarrior : public ADunDefEnemy
{
public:
	float                                              DashSpeed;                                        		// 0x0CCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DashAccelRate;                                    		// 0x0CD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrushedDamageInterval;                            		// 0x0CD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrushedDamageMultiplier;                          		// 0x0CD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DashRotationRate;                                 		// 0x0CDC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DashAnimName;                                     		// 0x0CE8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DashLoopAnimName;                                 		// 0x0CF0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DashAttackAnimName;                               		// 0x0CF8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MeleeSwingSocketAName;                            		// 0x0D00 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MeleeSwingSocketBName;                            		// 0x0D08 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeapStartAnimName;                                		// 0x0D10 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeapLandAnimName;                                 		// 0x0D18 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ShockwaveEffect;                                  		// 0x0D20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StartDashSound;                                   		// 0x0D24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             UpperBodyCustomAnimNodeNames;                     		// 0x0D28 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       UpperBodyCustomAnimBlenderName;                   		// 0x0D34 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeBlend*                              UpperBodyCustomAnimBlender;                       		// 0x0D3C (0x0004) [0x0000000000000000]              
	int                                                LastUpperBodyCustomAnimNodePlayIndex;             		// 0x0D40 (0x0004) [0x0000000000000000]              
	float                                              LastCrushedDamageTime;                            		// 0x0D44 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLeaping : 1;                                     		// 0x0D48 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52089 ];

		return pClassPointer;
	};

	bool AllowTrapSpringing ( class ADunDefTower_DetonationType* trap );
	void DoCrushed ( class AActor* Victim );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	float WarriorPlayAttackAnimation ( int UseAttackAnimation );
	void eventStuckOnPawn ( class APawn* Op );
	void JumpOffPawn ( );
	struct FVector GetMeleeSwingBLocation ( );
	struct FVector GetMeleeSwingALocation ( );
	void eventEndMeleeSwing ( );
	void eventStartMeleeSwing ( );
	void EndDash ( );
	void StartDash ( );
	void ResetDashingMetrics ( );
	void SetDashingMetrics ( );
	void DoShockwave ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void StartLeap ( );
	bool IsPlayingLeapAnim ( );
	void PlayLeapAnim ( );
	bool IsPlayingDashAnim ( );
	void PlayDashForwardAnim ( );
	void PlayDashAttackAnim ( );
	void PlayDashAnim ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	float eventGetEnemyTargetingDesirability ( class AEngineNativeDunDefAIController* forController );
	void eventPostBeginPlay ( );
};

UClass* ADunDefDarkElfWarrior::pClassPointer = NULL;

// Class UDKGame.DunDefDarkElfWarriorController
// 0x00A4 (0x06B0 - 0x060C)
class ADunDefDarkElfWarriorController : public ADunDefEnemyController
{
public:
	int                                                DashZDiffMax;                                     		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpecialAttackDistanceMin;                         		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpecialAttackDistanceMax;                         		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsInMeleeSwing : 1;                               		// 0x0618 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseMoveTowardForDash : 1;                        		// 0x0618 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IsInShockwave : 1;                                		// 0x0618 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FVector                                     PreviousMeleeSwingALocation;                      		// 0x061C (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviousMeleeSwingBLocation;                      		// 0x0628 (0x000C) [0x0000000000000000]              
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x0634 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            ShockWaveHurtList;                                		// 0x0640 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MeleeDamageAmount;                                		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LandOnDamageMomentum;                             		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x0658 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShockwaveExpansionTime;                           		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShockwaveRadius;                               		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShockwaveDamage;                                  		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShockwaveMomentum;                                		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TowerDamageMultiplier;                            		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ShockwaveDamageType;                              		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeapOverDashPercent;                              		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DashTimeOutTime;                                  		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeapMinimumAlivetime;                             		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DashToLoc;                                        		// 0x068C (0x000C) [0x0000000000000000]              
	float                                              ReachTime;                                        		// 0x0698 (0x0004) [0x0000000000000000]              
	int                                                AttackCounter;                                    		// 0x069C (0x0004) [0x0000000000000000]              
	struct FVector                                     ShockwaveOrigin;                                  		// 0x06A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShockwaveTimer;                                   		// 0x06AC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52148 ];

		return pClassPointer;
	};

	int GetAttackDamage ( );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	float GetDamageMultiplier ( class AActor* forTarget );
	void StartShockwave ( struct FVector ShockwaveCenter );
	void eventTick ( float DeltaTime );
	void StartMeleeSwing ( );
	void DoMeleeSwingTrace ( );
	bool AddToShockwaveHurtList ( class AActor* newEntry );
	bool AddToSwingHurtList ( class AActor* newEntry );
	void EndMeleeSwing ( );
	void CheckForCustomAttacks ( );
	bool IsDashing ( );
};

UClass* ADunDefDarkElfWarriorController::pClassPointer = NULL;

// Class UDKGame.DunDefDataProvider_SearchResult
// 0x0000 (0x0090 - 0x0090)
class UDunDefDataProvider_SearchResult : public UUIDataProvider_Settings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52294 ];

		return pClassPointer;
	};

};

UClass* UDunDefDataProvider_SearchResult::pClassPointer = NULL;

// Class UDKGame.DunDefDataProvider_ServerDetails
// 0x0004 (0x005C - 0x0058)
class UDunDefDataProvider_ServerDetails : public UUIDataProvider
{
public:
	int                                                SearchResultsRow;                                 		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52296 ];

		return pClassPointer;
	};

};

UClass* UDunDefDataProvider_ServerDetails::pClassPointer = NULL;

// Class UDKGame.DunDefDataStore_GameSettings
// 0x0000 (0x008C - 0x008C)
class UDunDefDataStore_GameSettings : public UUIDataStore_OnlineGameSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52435 ];

		return pClassPointer;
	};

	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UDunDefDataStore_GameSettings::pClassPointer = NULL;

// Class UDKGame.DunDefDemon
// 0x0078 (0x0D6C - 0x0CF4)
class ADunDefDemon : public ADunDefBoss
{
public:
	struct FName                                       PoundGroundAnimation;                             		// 0x0CF4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SummonFlameLineAnimation;                         		// 0x0CFC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootFireballAnimation;                           		// 0x0D04 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MajorHurtAnimation;                               		// 0x0D0C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LandingAnimation;                                 		// 0x0D14 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TakeoffAnimation;                                 		// 0x0D1C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShockedInAirAnimation;                            		// 0x0D24 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShockedOnGroundAnimation;                         		// 0x0D2C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShockedLandingAnimation;                          		// 0x0D34 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     PoundImpactEffect;                                		// 0x0D3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ShockedParticleEffect;                            		// 0x0D40 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     PoundImpactEffectOffset;                          		// 0x0D44 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ProjectileSpawnSocketName;                        		// 0x0D50 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DivingToLandAnimation;                            		// 0x0D58 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ElectrocutedSound;                                		// 0x0D60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlameLineAnimSpeed;                               		// 0x0D64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsShocked : 1;                                   		// 0x0D68 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52457 ];

		return pClassPointer;
	};

	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	bool AllowTrapSpringing ( class ADunDefTower_DetonationType* trap );
	void eventPostBeginPlay ( );
	void GetProjectileSpawnTransformation ( struct FVector* Position, struct FRotator* Orientation );
	bool IsCurrentlyPlayingAttackAnimation ( );
	float PlayRightAttackAnimation ( );
	float PlayLeftAttackAnimation ( );
	float PlayFrontAttackAnimation ( );
	float PlayTakeOffAnimation ( );
	float PlayLandingAnimation ( );
	float PlayShootFireballAnimation ( );
	float PlaySummonFlameLineAnimation ( );
	float PlayPoundAnimation ( );
	float PlayShockedLandingAnimation ( );
	float PlayDivingToLandAnimation ( );
	void StopShockedAnims ( );
	float PlayShockedInAirAnimation ( );
	float PlayShockedOnGroundAnimation ( );
	bool IsCurrentlyPlayingHurtAnimation ( );
	void PlayMajorHurtAnimation ( );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	void PlayJumpAnimation ( );
	struct FVector GetAMeleeSwingLocation ( struct FName SocketName );
	void eventShootFireball ( );
	void eventStopFlameSummoning ( );
	void eventStartFlameSummoning ( );
	void eventPoundedTheGround ( );
	void eventMeleeSwingEnd ( );
	void eventMeleeSwingStart ( );
	void SetShocked ( unsigned long Shocked );
	void SetDyingPhysics ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	bool ForceFriendlyFire ( class AActor* Target );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefDemon::pClassPointer = NULL;

// Class UDKGame.DunDefDemonController
// 0x0158 (0x0764 - 0x060C)
class ADunDefDemonController : public ADunDefEnemyController
{
public:
	unsigned long                                      IsInMeleeSwing : 1;                               		// 0x060C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRequireForwardFlameLine : 1;                     		// 0x060C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowLanding : 1;                                		// 0x060C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      SummoningFlameLine : 1;                           		// 0x060C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsInShockwave : 1;                                		// 0x060C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	TArray< struct FVector >                           PreviousMeleeSwingLocations;                      		// 0x0610 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x061C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             MeleeSwingSockets;                                		// 0x0628 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MeleeDamageAmount;                                		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x063C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AltAttackStateName;                               		// 0x064C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomChanceOfPounding;                           		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastPlayedHurtHealth;                             		// 0x0658 (0x0004) [0x0000000000000000]              
	float                                              HurtStateHealthPercentInterval;                   		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShockwaveExpansionTime;                           		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShockwaveRadius;                               		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SummonFlameTime;                                  		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShockwaveDamage;                                  		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlightPathNodeConnectionSet;                      		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      NumProjectilesPerDifficulty;                      		// 0x0674 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ShockwaveMomentum;                                		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ShockwaveDamageType;                              		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefGasCloud*                             FlameCloudTemplate;                               		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FlameLineSpawnOffset;                             		// 0x068C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SummonFlameInterval;                              		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlameLineTurnSpeed;                               		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlameLineMoveSpeed;                               		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LandingAttackAirSpeed;                            		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShockedOnGroundWaitTime;                          		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReachFlightDestinationWaitTime;                   		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForcePoundGroundMeleeDistance;                    		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LandingAttackTimeOut;                             		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartLandingAttackTime;                           		// 0x06B8 (0x0004) [0x0000000000000000]              
	float                                              LastSummonFlameLineTime;                          		// 0x06BC (0x0004) [0x0000000000000000]              
	struct FVector                                     CurrentFlameLinePos;                              		// 0x06C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     CurentFlameLinedirection;                         		// 0x06CC (0x000C) [0x0000000000000000]              
	struct FVector                                     LastFlameLinePos;                                 		// 0x06D8 (0x000C) [0x0000000000000000]              
	float                                              LandTimeInterval;                                 		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlightTimeInterval;                               		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CurrentFlightDestination;                         		// 0x06EC (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            FlightDestinations;                               		// 0x06F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ADunDefCustomNode* >                 LandNodes;                                        		// 0x06FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastLandTime;                                     		// 0x0708 (0x0004) [0x0000000000000000]              
	float                                              ShockedLandingAirSpeed;                           		// 0x070C (0x0004) [0x0000000000000000]              
	struct FName                                       ProjectileAttackStateName;                        		// 0x0710 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileShootRange;                             		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileShootInterval;                          		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AirProjectileAttackStateName;                     		// 0x0720 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirProjectileShootRange;                          		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirProjectileShootInterval;                       		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefProjectile*                           AttackProjectileTemplate;                         		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x0734 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeadTargetBasePercent;                            		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeadTargetRandomPercent;                          		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimRandomSpread;                                  		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShootOffsetYawArc;                             		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ShockwaveOrigin;                                  		// 0x0750 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShockwaveTimer;                                   		// 0x075C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastProjectileShootTime;                          		// 0x0760 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52505 ];

		return pClassPointer;
	};

	void ShootFireball ( );
	void DoProjectileAttack ( );
	void CheckForCustomAttacks ( );
	void DoAttack ( );
	void DoFlight ( );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void eventPostBeginPlay ( );
	class AActor* GetNearestLandNodeToTarget ( class AActor* toTarget );
	class AActor* GetRandomFlightPoint ( );
	void Shock ( );
	void ObstructionJump ( struct FVector jumpForwardDir, struct FVector jumpSideDir );
	void CancelCurrentTarget ( int Reason );
	void StopFlameSummoning ( );
	void StartFlameSummoning ( );
	void StartShockwave ( struct FVector ShockwaveCenter );
	bool MoveAroundBlockade ( class AActor* blockadeActor, float BlockadeWidth, struct FVector HitNormal, unsigned long SkipBlockingCheck );
	bool AddToSwingHurtList ( class AActor* newEntry );
	void EndMeleeSwing ( );
	void StartMeleeSwing ( );
};

UClass* ADunDefDemonController::pClassPointer = NULL;

// Class UDKGame.DunDefDragonBoss
// 0x00E0 (0x0DD4 - 0x0CF4)
class ADunDefDragonBoss : public ADunDefBoss
{
public:
	struct FName                                       ProjectileSpawnSocketName;                        		// 0x0CF4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootingFireballAnimationLeft;                    		// 0x0CFC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootingFireballAnimationRight;                   		// 0x0D04 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrafingSpeed;                                    		// 0x0D0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStrafingDistance;                              		// 0x0D10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HitByHarpoonAnimation;                            		// 0x0D14 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BitingAnimation;                                  		// 0x0D1C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlamethrowerAnimation;                            		// 0x0D24 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FaceToFaceInterpolationTime;                      		// 0x0D2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtLocationInterpSpeed;                        		// 0x0D30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShootFireballAnimSpeed;                           		// 0x0D34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LookAtOffset;                                     		// 0x0D38 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlamethrowerSocketName;                           		// 0x0D44 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LandedShootingFireballAnimation;                  		// 0x0D4C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LandingFinishAnimation;                           		// 0x0D54 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LandingLetGoAnimation;                            		// 0x0D5C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                KilledByHeroClassType;                            		// 0x0D64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    AirSpeedMultipliers;                              		// 0x0D68 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bOnlyTargetableWhenFaceToFace : 1;                		// 0x0D74 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFallingBlender : 1;                           		// 0x0D74 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bIsStrafing : 1;                                  		// 0x0D74 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      StrafingRight : 1;                                		// 0x0D74 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      StrafeSwitchedDirection : 1;                      		// 0x0D74 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUsingFaceToFaceBlender : 1;                      		// 0x0D74 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      IsInFaceToFaceInterp : 1;                         		// 0x0D74 (0x0004) [0x0000000000000000] [0x00000040] 
	struct FVector                                     FlyingTargetingLocationOffset;                    		// 0x0D78 (0x000C) [0x0000000000000000]              
	struct FVector                                     StrafingCenterPoint;                              		// 0x0D84 (0x000C) [0x0000000000000000]              
	struct FRotator                                    StrafeStartingRotation;                           		// 0x0D90 (0x000C) [0x0000000000000000]              
	struct FVector                                     FaceToFaceInterpStart;                            		// 0x0D9C (0x000C) [0x0000000000000000]              
	struct FVector                                     FaceToFaceInterpEnd;                              		// 0x0DA8 (0x000C) [0x0000000000000000]              
	float                                              FaceToFaceInterpSpeed;                            		// 0x0DB4 (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              FallingBlender;                                   		// 0x0DB8 (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              FaceToFaceBlender;                                		// 0x0DBC (0x0004) [0x0000000000000000]              
	class USkelControlLookAt*                          LookAtController;                                 		// 0x0DC0 (0x0004) [0x0000000000000000]              
	class USkelControlLookAt*                          AltLookAtController;                              		// 0x0DC4 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      NeckPitchController;                              		// 0x0DC8 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      AltNeckPitchController;                           		// 0x0DCC (0x0004) [0x0000000000000000]              
	class AActor*                                      MyLookAtTarget;                                   		// 0x0DD0 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52928 ];

		return pClassPointer;
	};

	struct FVector GetInterpolatedTargetingLocation ( class AActor* RequestedBy );
	struct FVector GetTargetingLocation ( class AActor* RequestedBy );
	struct FVector GetTargetingLocationOffset ( );
	void UpdateDifficultyValues ( unsigned long UpdateMaterial, unsigned long onlyDynamicValues );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void SetLookAtTarget ( class AActor* newLookAtTarget );
	void eventAltNeckPitchOn ( );
	void eventAltNeckPitchOff ( );
	void eventNeckPitchOn ( );
	void eventNeckPitchOff ( );
	void UpdateInterpolation ( float DeltaTime );
	void StartFaceToFaceInterpolation ( );
	void EndFaceToFace ( );
	void DoFalling ( );
	float GetPlayerTargetingDesirability ( class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer );
	void SetFaceToFaceBlender ( unsigned long bFaceToFaceBlender );
	void SetFallingBlender ( unsigned long bFallingBlender );
	void eventPostBeginPlay ( );
	void UpdateStrafing ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void SetOnAllOverlappingAuras ( unsigned long bSet );
	float GetAirSpeed ( );
	void StopStrafing ( );
	void StartStrafing ( );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	void PlayJumpAnimation ( );
	bool ForceFriendlyFire ( class AActor* Target );
	void GetFlamethrowerSocketTransformation ( struct FVector* theLoc, struct FRotator* theRot );
	struct FVector GetAMeleeSwingLocation ( struct FName MeleeSwingSocketName );
	void eventFlamethrowerEnd ( );
	void eventFlamethrowerStart ( );
	void eventEndMeleeSwing ( );
	void eventStartMeleeSwing ( );
	void eventFireProjectile ( );
	bool IsCurrentlyPlayingAttackAnimation ( );
	float PlayFlamethrowerAnimation ( );
	float PlayBitingAnimation ( );
	float PlayLandingLetGoAnimation ( );
	float PlayLandingFinishAnimation ( );
	float PlayShootingFireballAnimation ( unsigned long overrideAnimation, int Direction );
	void GetProjectileSpawnTransformation ( struct FVector* Position, struct FRotator* Orientation );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefDragonBoss::pClassPointer = NULL;

// Class UDKGame.DunDefDragonBossController
// 0x00D4 (0x06E0 - 0x060C)
class ADunDefDragonBossController : public ADunDefEnemyController
{
public:
	float                                              FireballShootingInterval;                         		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartFireballShootingTime;                        		// 0x0610 (0x0004) [0x0000000000000000]              
	float                                              FirebalShootingDurationAfterNavigation;           		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastProjectileShootTime;                          		// 0x0618 (0x0004) [0x0000000000000000]              
	class ADunDefHomingProjectile*                     AttackProjectileTemplate;                         		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ProjectileMuzzleSpawnEffect;                      		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x0624 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileMuzzleEffectSpawnOffset;                		// 0x0630 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShootOffsetYawArc;                             		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumFireballProjectiles;                           		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefHomingProjectile*                     FaceToFaceAttackProjectileTemplate;               		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FaceToFaceDuration;                               		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FaceToFaceAttackInterval;                         		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitByHarpoonPreFallingWait;                       		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitByHarpoonPostFallingWait;                      		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HarpoonFallingAcceleration;                       		// 0x0658 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FaceToFaceBiteAttackChance;                       		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FaceToFaceFlamethrowerAttackChance;               		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BiteRange;                                        		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerRange;                                		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerDamageInterval;                       		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerDamageAmount;                         		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerMaxRange;                             		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerRangeIncreaseSpeed;                   		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerHitMaxDeltaYaw;                       		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerHitMaxDeltaPitch;                     		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerOriginDamageRadius;                   		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlamethrowerLookAwayDelay;                        		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FaceToFaceLeaveDeltaHealthPercent;                		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      FlamethrowerDamageType;                           		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartFaceToFaceTime;                              		// 0x069C (0x0004) [0x0000000000000000]              
	float                                              FlamethrowerCurrentRange;                         		// 0x06A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsInMeleeSwing : 1;                               		// 0x06A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFaceToFaceTested : 1;                            		// 0x06A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLeavingFaceToFace : 1;                           		// 0x06A4 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x06A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MeleeDamageAmount;                                		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeHitRadius;                                   		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             MeleeSwingSocketNames;                            		// 0x06C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      NavigationTarget;                                 		// 0x06D0 (0x0004) [0x0000000000000000]              
	class AActor*                                      TargetActor;                                      		// 0x06D4 (0x0004) [0x0000000000000000]              
	class ADunDefHomingProjectile*                     CurrentFireballTemplate;                          		// 0x06D8 (0x0004) [0x0000000000000000]              
	float                                              FaceToFaceBeginHealthPercent;                     		// 0x06DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53005 ];

		return pClassPointer;
	};

	class AActor* GetANavigationTarget ( );
	class ANavigationPoint* FindNearestNavPointTo ( class AActor* A, unsigned long bCheckVisible );
	struct FVector eventGeneratePathToActor ( class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath );
	bool MoveAroundBlockade ( class AActor* blockadeActor, float BlockadeWidth, struct FVector HitNormal, unsigned long SkipBlockingCheck );
	void InitNavigationHandle ( );
	bool NavActorReachable ( class AActor* A );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void DoHitByHarpoon ( );
	void FlamethrowerEnd ( );
	void FlamethrowerStart ( );
	bool ShouldDamage ( class AActor* act );
	void EndMeleeSwing ( );
	void StartMeleeSwing ( );
	void ShootFireball ( );
};

UClass* ADunDefDragonBossController::pClassPointer = NULL;

// Class UDKGame.DunDefDragonBossBallista
// 0x008C (0x02A8 - 0x021C)
class ADunDefDragonBossBallista : public AActor
{
public:
	struct FColor                                      ToolTipDrawColor;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipOutOfRangeColor;                           		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipInvalidUseColor;                           		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconColor;                                 		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DisabledMiniMapIconColor;                         		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      MySkeletalMesh;                                   		// 0x0230 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ActivationDistance;                               		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0238 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ShootAnimationName;                               		// 0x023C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationInterval;                               		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefProjectile*                           ProjectileTemplate;                               		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ProjectileSocketName;                             		// 0x024C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x0254 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchControllerAngle;                             		// 0x0260 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FString                                     StringBallistaName;                               		// 0x0264 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringBallistaResetting;                          		// 0x0270 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringBallistaActivation;                         		// 0x027C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              ActivationWeighting;                              		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationOffset;                                 		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSize;                                  		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MiniMapIconTexture;                               		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                   		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      PitchController;                                  		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastActivationTime;                               		// 0x02A0 (0x0004) [0x0000000000000000]              
	class APawn*                                       LastActivatedByPawn;                              		// 0x02A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53082 ];

		return pClassPointer;
	};

	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	float GetActivationOffset ( );
	float GetActivationWeighting ( );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	void eventShootProjectile ( );
	void Activated ( );
	void UpdatePitchController ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefDragonBossBallista::pClassPointer = NULL;

// Class UDKGame.DunDefHomingProjectile
// 0x0054 (0x03A8 - 0x0354)
class ADunDefHomingProjectile : public ADunDefProjectile
{
public:
	float                                              HomingInterpSpeed;                                		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EarlyHomingInterpSpeed;                           		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EarlyHomingTime;                                  		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EarlyNoHomingTime;                                		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HomingDirOffset;                                  		// 0x0364 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              HomingDuration;                                   		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DestructionDelayTime;                             		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumAllowedPassThrough;                            		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayPawnImpactSoundOnHittingEachPawn : 1;        		// 0x037C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageOnTouch : 1;                               		// 0x037C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayImpactEffectOnHittingEachPawn : 1;           		// 0x037C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPierceEnemies : 1;                               		// 0x037C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      DidClientExplode : 1;                             		// 0x037C (0x0004) [0x0000000000000000] [0x00000010] 
	struct FVector                                     ClientExplodeLocation;                            		// 0x0380 (0x000C) [0x0000000000000000]              
	struct FVector                                     ClientExplodeNormal;                              		// 0x038C (0x000C) [0x0000000000000000]              
	TArray< class AActor* >                            PreviousHitActors;                                		// 0x0398 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumPassThrough;                                   		// 0x03A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53182 ];

		return pClassPointer;
	};

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void NotifyStopHoming ( );
	void DoHoming ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefHomingProjectile::pClassPointer = NULL;

// Class UDKGame.HUDPrefabContainer
// 0x003C (0x04B4 - 0x0478)
class UHUDPrefabContainer : public UUIContainer
{
public:
	class UObject*                                     associatedObject;                                 		// 0x0478 (0x0004) [0x0000000000000000]              
	float                                              LastRenderTime;                                   		// 0x047C (0x0004) [0x0000000000000000]              
	class UUIPrefab*                                   myPrefab;                                         		// 0x0480 (0x0004) [0x0000000000000000]              
	unsigned long                                      HasLoadedSequences : 1;                           		// 0x0484 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      soundsInQueue : 1;                                		// 0x0484 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FDunDefUIAnimation >                UIAnimationSequences;                             		// 0x0488 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       UIAnimSequence_OpenPrefab;                        		// 0x0494 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UIAnimSequence_ClosePrefab;                       		// 0x049C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FUIAnimationSound >                 soundQueue;                                       		// 0x04A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              timeToClose;                                      		// 0x04B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53473 ];

		return pClassPointer;
	};

	bool DestroyedContainer ( );
	void CreatedContainer ( );
	void CancelClose ( );
	bool IsClosing ( );
	void Update ( float DeltaTime );
	void PlayUIAnimationSound ( class USoundCue* Cue );
	float DunDefGetSequenceLength ( struct FName DunDefUIAnimSeqName );
	void StopDunDefUIAnim ( struct FName DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn );
	float PlayDunDefUIAnim ( struct FName DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn );
	void LoadSequences ( );
};

UClass* UHUDPrefabContainer::pClassPointer = NULL;

// Class UDKGame.UIOverlayContainer_Equipment
// 0x0128 (0x05DC - 0x04B4)
class UUIOverlayContainer_Equipment : public UHUDPrefabContainer
{
public:
	class UUILabel*                                    EquipmentNameLabel;                               		// 0x04B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIDataContainer_EquipmentOverlay*           DataContainer;                                    		// 0x04B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    EquipmentBG;                                      		// 0x04BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    BackgroundImages[ 0x4 ];                          		// 0x04C0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    CantEquipImage;                                   		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USurface* >                          ComparisonImages;                                 		// 0x04D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIImage*                                    EquipmentStatusIcon;                              		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    LockedIcon;                                       		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    UsedInTradeIcon;                                  		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   EquipmentPreviewIcon;                             		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    CurrentEquipmentLabel;                            		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    EquipmentWorthLabel;                              		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    EquipRequirementString;                           		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ItemBoxCapacityLabel;                             		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    EquipmentLevelLabels[ 0x4 ];                      		// 0x0500 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EquipmentLevelString;                             		// 0x0510 (0x000C) [0x000000000040A000]              ( CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FLinearColor                                CantUpgradeColor;                                 		// 0x051C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CanUpgradeColor;                                  		// 0x052C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CantEquipLevelGradient;                           		// 0x053C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CantEquipClassGradient;                           		// 0x054C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CantEquipInvalidGradient;                         		// 0x055C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CantEquipLevelColor;                              		// 0x056C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CantEquipClassColor;                              		// 0x057C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CantEquipInvalidColor;                            		// 0x058C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ItemCountColorFull;                               		// 0x059C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ItemCountColorRegular;                            		// 0x05AC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CanEquipColor;                                    		// 0x05BC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CanEquipGradient;                                 		// 0x05CC (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53472 ];

		return pClassPointer;
	};

	void InitializeForOwnedEquipment ( class UDunDefHero* theHero, class UHeroEquipment* myEquipment, unsigned long HideCurrentEquipmentLabel, unsigned long bCompareStats, class UHeroEquipment* compareStatsAgainstOtherEquipment );
	void InitializeForDroppedEquipment ( class UDunDefHero* theHero, class ADunDefDroppedEquipment* theDroppedEquipment, class ADunDefPlayerController* PC );
};

UClass* UUIOverlayContainer_Equipment::pClassPointer = NULL;

// Class UDKGame.DunDefEnemyTargetingPreventionVolume
// 0x0004 (0x025C - 0x0258)
class ADunDefEnemyTargetingPreventionVolume : public AVolume
{
public:
	unsigned long                                      PreventionEnabled : 1;                            		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53601 ];

		return pClassPointer;
	};

	void Destroyed ( );
	void PostBeginPlay ( );
	bool PreventTargeting ( class UDunDefTargetableInterface* Target, class ADunDefEnemy* forEnemy );
};

UClass* ADunDefEnemyTargetingPreventionVolume::pClassPointer = NULL;

// Class UDKGame.DunDefEngine
// 0x0000 (0x06D4 - 0x06D4)
class UDunDefEngine : public UGameEngine
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53611 ];

		return pClassPointer;
	};

};

UClass* UDunDefEngine::pClassPointer = NULL;

// Class UDKGame.DunDefOgreController
// 0x00C8 (0x06D4 - 0x060C)
class ADunDefOgreController : public ADunDefEnemyController
{
public:
	unsigned long                                      IsInMeleeSwing : 1;                               		// 0x060C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDontShootProjectileAtCore : 1;                   		// 0x060C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IsInShockwave : 1;                                		// 0x060C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	TArray< struct FVector >                           PreviousMeleeSwingLocations;                      		// 0x0610 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x061C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             MeleeSwingSockets;                                		// 0x0628 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MeleeDamageAmount;                                		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x063C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AltAttackStateName;                               		// 0x064C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomChanceOfPounding;                           		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastPlayedHurtHealth;                             		// 0x0658 (0x0004) [0x0000000000000000]              
	float                                              HurtStateHealthPercentInterval;                   		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShockwaveExpansionTime;                           		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShockwaveRadius;                               		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShockwaveDamage;                                  		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShockwaveMomentum;                                		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZThresholdForAlwaysPoundGround;                   		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ShockwaveDamageType;                              		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefProjectile*                           AttackProjectileTemplate;                         		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ProjectileMuzzleSpawnEffect;                      		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x0680 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileMuzzleEffectSpawnOffset;                		// 0x068C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeadTargetBasePercent;                            		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeadTargetRandomPercent;                          		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimRandomSpread;                                  		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShootOffsetYawArc;                             		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ProjectileAttackStateName;                        		// 0x06A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileShootRange;                             		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileShootInterval;                          		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileShootRandomPercent;                     		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ShockwaveOrigin;                                  		// 0x06BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShockwaveTimer;                                   		// 0x06C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastProjectileShootTime;                          		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ProjectileShootIntervalRandomizer;                		// 0x06D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53655 ];

		return pClassPointer;
	};

	int GetProjectileDamage ( );
	int GetAttackDamage ( );
	void DoProjectileAttack ( );
	float GetProjectileShootInterval ( );
	void CheckForCustomAttacks ( );
	void DoAttack ( );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void eventPostBeginPlay ( );
	void FireProjectile ( );
	void StartShockwave ( struct FVector ShockwaveCenter );
	bool MoveAroundBlockade ( class AActor* blockadeActor, float BlockadeWidth, struct FVector HitNormal, unsigned long SkipBlockingCheck );
	bool AddToSwingHurtList ( class AActor* newEntry );
	void EndMeleeSwing ( );
	void StartMeleeSwing ( );
};

UClass* ADunDefOgreController::pClassPointer = NULL;

// Class UDKGame.DunDefForestGolem
// 0x0000 (0x0D54 - 0x0D54)
class ADunDefForestGolem : public ADunDefOgre
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53732 ];

		return pClassPointer;
	};

	void eventAlternateMeleeSwingEnd ( );
	void eventAlternateMeleeSwingStart ( );
	void eventMeleeSwingEnd ( );
	void eventMeleeSwingStart ( );
};

UClass* ADunDefForestGolem::pClassPointer = NULL;

// Class UDKGame.DunDefForestGolemController
// 0x0020 (0x06F4 - 0x06D4)
class ADunDefForestGolemController : public ADunDefOgreController
{
public:
	TArray< struct FName >                             AlternateMeleeSwingSockets;                       		// 0x06D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MeleeAttackRange;                                 		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           PreviousAlternateMeleeSwingLocations;             		// 0x06E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      IsInAlternateMeleeSwing : 1;                      		// 0x06F0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53734 ];

		return pClassPointer;
	};

	void CheckForCustomAttacks ( );
	float GetProjectileShootInterval ( );
	void DoAttack ( );
	void DoProjectileAttack ( );
	class AActor* GetHighestHealthTarget ( );
	void EndAlternateMeleeSwing ( );
	void StartAlternateMeleeSwing ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefForestGolemController::pClassPointer = NULL;

// Class UDKGame.DunDefGoblin
// 0x0008 (0x0CD4 - 0x0CCC)
class ADunDefGoblin : public ADunDefEnemy
{
public:
	struct FName                                       MeleeSwingSocketName;                             		// 0x0CCC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55423 ];

		return pClassPointer;
	};

	float PlayGoblinAttackAnimation ( int AnimationIndex );
	float PlayAttackAnimation ( );
	struct FVector GetMeleeSwingLocation ( );
	void eventMeleeSwingEnd ( );
	void eventMeleeSwingStart ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefGoblin::pClassPointer = NULL;

// Class UDKGame.DunDefGoblinController
// 0x0034 (0x0640 - 0x060C)
class ADunDefGoblinController : public ADunDefEnemyController
{
public:
	unsigned long                                      IsInMeleeSwing : 1;                               		// 0x060C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     PreviousMeleeSwingLocation;                       		// 0x0610 (0x000C) [0x0000000000000000]              
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x061C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MeleeDamageAmount;                                		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x0630 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55443 ];

		return pClassPointer;
	};

	int GetAttackDamage ( );
	bool AddToSwingHurtList ( class AActor* newEntry );
	void EndMeleeSwing ( );
	void StartMeleeSwing ( );
};

UClass* ADunDefGoblinController::pClassPointer = NULL;

// Class UDKGame.DunDefGoblinMech
// 0x008C (0x0D80 - 0x0CF4)
class ADunDefGoblinMech : public ADunDefBoss
{
public:
	class UParticleSystemComponent*                    ExhaustEffectComponent;                           		// 0x0CF4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              SuperHurtDamageMultiplier;                        		// 0x0CF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExhaustOnDuration;                                		// 0x0CFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExhaustOffInterval;                               		// 0x0D00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumAngleDotForSuperHit;                       		// 0x0D04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     SuperHurtEffectTemplate;                          		// 0x0D08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ExhaustSocketName;                                		// 0x0D0C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FireProjectileAnimName;                           		// 0x0D14 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RocketSocketLeftName;                             		// 0x0D1C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RocketSocketRightName;                            		// 0x0D24 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurretInterpSpeed;                                		// 0x0D2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MajorHurtAnimation;                               		// 0x0D30 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    MediumHealthEffectComp;                           		// 0x0D38 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LowHealthEffectComp;                              		// 0x0D3C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       MediumHealthEffectCompSocket;                     		// 0x0D40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LowHealthEffectCompSocket;                        		// 0x0D48 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    CigarSmokingEffectComp;                           		// 0x0D50 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       CigarSmokingEffectCompSocket;                     		// 0x0D54 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FurnaseOpenSound;                                 		// 0x0D5C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FurnaceCloseSound;                                		// 0x0D60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             FurnaceLoopSound;                                 		// 0x0D64 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              DamageFromTowersMultiplier;                       		// 0x0D68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlSingleBone*                      UpperBodyTwistControl;                            		// 0x0D6C (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      FurnaceBoneControl;                               		// 0x0D70 (0x0004) [0x0000000000000000]              
	class AActor*                                      UpperBodyFocus;                                   		// 0x0D74 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      TheLastDamageCauser;                              		// 0x0D78 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsExhaustOpen : 1;                               		// 0x0D7C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bLookAtTarget : 1;                                		// 0x0D7C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bEnableMediumHealthEffect : 1;                    		// 0x0D7C (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bEnableLowHealthEffect : 1;                       		// 0x0D7C (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55488 ];

		return pClassPointer;
	};

	bool ForceFriendlyFire ( class AActor* Target );
	struct FVector GetAMeleeSwingLocation ( struct FName MeleeSwingSocketName );
	void eventMeleeSwingEnd ( );
	void eventMeleeSwingStart ( );
	float PlayRightAttackAnimation ( );
	float PlayLeftAttackAnimation ( );
	float PlayFrontAttackAnimation ( );
	void eventFireProjectile ( );
	bool IsCurrentlyPlayingAttackAnimation ( );
	float PlayShootRocketsAnimation ( );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void SetMovementPhysics ( );
	void eventTick ( float DeltaTime );
	void eventPostBeginPlay ( );
	float GetAngleDot ( struct FVector toPosition );
	struct FRotator GetUpperBodyRotation ( );
	bool IsSuperHurtDamage ( struct FVector HitLocation );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum );
	void PlaySuperHurtEffect ( class UClass* DamageType, struct FVector HitLocation );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void TurnExhaustOff ( );
	void TurnExhaustOn ( );
	void TurnLowHealthEffectOff ( );
	void TurnLowHealthEffectOn ( );
	void TurnMediumHealthEffectOff ( );
	void TurnMediumHealthEffectOn ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
	void SetDyingPhysics ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	bool IsCurrentlyPlayingHurtAnimation ( );
	void PlayMajorHurtAnimation ( );
};

UClass* ADunDefGoblinMech::pClassPointer = NULL;

// Class UDKGame.DunDefGoblinMechController
// 0x00C4 (0x06D0 - 0x060C)
class ADunDefGoblinMechController : public ADunDefEnemyController
{
public:
	class ADunDefHomingProjectile*                     HomingProjectileTemplate;                         		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ProjectileAttackStateName;                        		// 0x0610 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileShootRange;                             		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileShootInterval;                          		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileShootMinDistance;                       		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsInMeleeSwing : 1;                               		// 0x0624 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseNavigation : 1;                               		// 0x0624 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLeftSocket : 1;                                  		// 0x0624 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x0628 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MeleeDamageAmount;                                		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NodeRequiredCustomData;                           		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x0640 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             MeleeSwingSocketNames;                            		// 0x0650 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MeleeAttackPlayerInterval;                        		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZeroHealthRockets;                                		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    PlayerRocketMultipliers;                          		// 0x0664 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           PreviousMeleeSwingLocations;                      		// 0x0670 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastPlayedHurtHealth;                             		// 0x067C (0x0004) [0x0000000000000000]              
	float                                              HurtStateHealthPercentInterval;                   		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MediumHealthThreshold;                            		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LowHealthThreshold;                               		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TowerDamageMultiplier;                            		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RocketsFiringDelay;                               		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayBetweenRocketSets;                           		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UDunDefTargetableInterface* >        theTargetsToIgnore;                               		// 0x0698 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumRocketsToFire;                                 		// 0x06A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     nodePos1;                                         		// 0x06A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     nodePos2;                                         		// 0x06B4 (0x000C) [0x0000000000000000]              
	struct FVector                                     NewDest;                                          		// 0x06C0 (0x000C) [0x0000000000000000]              
	float                                              LastProjectileShootTime;                          		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55621 ];

		return pClassPointer;
	};

	float GetAttackInterval ( class AActor* Victim );
	void eventPostBeginPlay ( );
	struct FVector GetClosestNodeMovementPoint ( struct FVector Point );
	bool MoveAroundBlockade ( class AActor* blockadeActor, float BlockadeWidth, struct FVector HitNormal, unsigned long SkipBlockingCheck );
	int GetNumRockets ( );
	bool WantsHurtAnimation ( );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void Cough ( struct FName coughAnimName );
	void FireProjectile ( );
	void DoProjectileAttack ( );
	void CheckForCustomAttacks ( );
	bool AddToSwingHurtList ( class AActor* newEntry );
	void EndMeleeSwing ( );
	void StartMeleeSwing ( );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void MovementRefreshTimer ( );
};

UClass* ADunDefGoblinMechController::pClassPointer = NULL;

// Class UDKGame.DunDefGRI_MainSixPlayer
// 0x0000 (0x0720 - 0x0720)
class ADunDefGRI_MainSixPlayer : public ADunDefGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55775 ];

		return pClassPointer;
	};

};

UClass* ADunDefGRI_MainSixPlayer::pClassPointer = NULL;

// Class UDKGame.DunDefGRI_PureStrategy
// 0x0000 (0x0720 - 0x0720)
class ADunDefGRI_PureStrategy : public ADunDefGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55778 ];

		return pClassPointer;
	};

	void SetInCombatPhase ( unsigned long inCombatPhase );
};

UClass* ADunDefGRI_PureStrategy::pClassPointer = NULL;

// Class UDKGame.StatObject_Equipment
// 0x0000 (0x016C - 0x016C)
class UStatObject_Equipment : public UStatObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56298 ];

		return pClassPointer;
	};

	bool IsRootEntry ( );
	int GetFolderID ( );
	void GetDataProps ( int dataSetType, struct FDataEntryProps* dProps );
	struct FString GetDataString ( int dataSetType );
	bool GetEntryEnabled ( class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject );
	bool StaticIsValidForEquipment ( class UStatObject_Equipment* StatObjectTemplate, class UHeroEquipment* theEquipment );
};

UClass* UStatObject_Equipment::pClassPointer = NULL;

// Class UDKGame.DunDefHeroStats
// 0x0000 (0x009C - 0x009C)
class UDunDefHeroStats : public UStatSystem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56317 ];

		return pClassPointer;
	};

};

UClass* UDunDefHeroStats::pClassPointer = NULL;

// Class UDKGame.DunDefKobold
// 0x0038 (0x0D04 - 0x0CCC)
class ADunDefKobold : public ADunDefEnemy
{
public:
	unsigned long                                      bIsLightingFuse : 1;                              		// 0x0CCC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFuseLit : 1;                                     		// 0x0CCC (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      ImmediatelyKamikaze : 1;                          		// 0x0CCC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       LightFuseAnimName;                                		// 0x0CD0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ExplodeEffect;                                    		// 0x0CD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     InsaneExplodeEffect;                              		// 0x0CDC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FuseEffectTemplate;                               		// 0x0CE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FuseEffectSocket;                                 		// 0x0CE4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              KamikazeExplosionTimeout;                         		// 0x0CEC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KamikazeHealthThreshold;                          		// 0x0CF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopLightingFuseFailsafeDelay;                    		// 0x0CF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             FuseLoopSound;                                    		// 0x0CF8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ScreamLoopSound;                                  		// 0x0CFC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    FuseEffect;                                       		// 0x0D00 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56874 ];

		return pClassPointer;
	};

	void AutoKamikaze ( );
	void eventPostBeginPlay ( );
	void Explode ( );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void StartKamikazeSound ( );
	void StopLightingFuse ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void DoLightFuse ( );
	void LightFuse ( );
	void BeginLightingFuse ( );
	void PlayLightFuseAnimation ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefKobold::pClassPointer = NULL;

// Class UDKGame.DunDefKoboldController
// 0x0024 (0x0630 - 0x060C)
class ADunDefKoboldController : public ADunDefEnemyController
{
public:
	unsigned long                                      bKamikazeTargetSet : 1;                           		// 0x060C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      AllowPostKamikazeTargeting : 1;                   		// 0x060C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceNewKamikazeTarget : 1;                      		// 0x060C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class AActor*                                      KamikazeTarget;                                   		// 0x0610 (0x0004) [0x0000000000000000]              
	TArray< float >                                    KamikazeActivationRanges;                         		// 0x0614 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              KamikazeMinDotProduct;                            		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    KamikazeGroundSpeeds;                             		// 0x0624 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56913 ];

		return pClassPointer;
	};

	float GetKamikazeActivationRangeSq ( );
	void Cough ( struct FName coughAnimName );
	bool WantsHurtAnimation ( );
	void StartKamikaze ( class AActor* DamageCauser );
	bool MoveAroundBlockade ( class AActor* blockadeActor, float BlockadeWidth, struct FVector HitNormal, unsigned long SkipBlockingCheck );
};

UClass* ADunDefKoboldController::pClassPointer = NULL;

// Class UDKGame.DunDefManaBomb
// 0x005C (0x0330 - 0x02D4)
class ADunDefManaBomb : public ADunDefEmitterSpawnable
{
public:
	float                                              MaximumMassMomentumScale;                         		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassMomentumBaseScale;                            		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassMomentumScaleExponent;                        		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Damage;                                           		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectRadius;                                     		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MyDamageType;                                     		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MyMomentum;                                       		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageDelay;                                      		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScalingHeroStatExponentDamage;                    		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScalingHeroStatExponentRadius;                    		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageFalloffExponent;                            		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareDamageMultiplier;                        		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareScalingHeroStatExponentDamage;           		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBombRadius;                                    		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondScalingHeroStatExponentDamage;              		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScalingHeroStatType;                              		// 0x0314 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SecondScalingHeroStatType;                        		// 0x0315 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bScaleWithPawnDamageModifier : 1;                 		// 0x0318 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PawnDamageAdditionalMultiplier;                   		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DamageClassesToIgnore;                            		// 0x0320 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PowerMult;                                        		// 0x032C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57012 ];

		return pClassPointer;
	};

	bool eventAllowSpawn ( class AActor* theArchetype, struct FVector theLoc, struct FRotator theRot );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool IgnoreDamageByClass ( class AActor* damagee );
	float GetDamageRadius ( );
	float GetDamage ( );
	void DoDamage ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefManaBomb::pClassPointer = NULL;

// Class UDKGame.DunDefNPC_BarKeep
// 0x0094 (0x02B0 - 0x021C)
class ADunDefNPC_BarKeep : public AActor
{
public:
	struct FColor                                      ToolTipDrawColor;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipOutOfRangeColor;                           		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ToolTipInvalidUseColor;                           		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      MySkeletalMesh;                                   		// 0x0228 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDunDefUIScene*                              ShopUITemplate;                                   		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationDistance;                               		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0234 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ActiveBlenderName;                                		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ActivateSound;                                    		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DeactivateSound;                                  		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationString_Use;                             		// 0x0248 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DescriptiveName;                                  		// 0x0254 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UTexture2D*                                  ActivationIcons[ 0x2 ];                           		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             MyAudioComponent;                                 		// 0x0268 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   IdleQuipSound;                                    		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TalkSound;                                        		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BuySound;                                         		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SellSound;                                        		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleQuipMinWait;                                  		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleQuipMaxWait;                                  		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeBlend*                              ActiveBlender;                                    		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IsActive : 1;                                     		// 0x0288 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      WasActive : 1;                                    		// 0x0288 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FRotator                                    ReplicatedRotation;                               		// 0x028C (0x000C) [0x0000000000000020]              ( CPF_Net )
	TArray< class ADunDefPlayerController* >           UsingPCs;                                         		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture2D*                                  MiniMapIconTexture;                               		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniMapIconSize;                                  		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MiniMapIconColor;                                 		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57222 ];

		return pClassPointer;
	};

	void PlayTalkSound ( );
	void PlayBuySound ( );
	void PlaySellSound ( );
	void PlayIdleQuipSound ( unsigned long bDontPlay );
	class UTexture2D* GetActivationIcon ( int activationType );
	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	void DrawMiniMapIcon ( class UCanvas* Canvas, class ADunDefMiniMap* MiniMap );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
	bool shouldShowAltActivation ( class ULocalPlayer* ForPlayer );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	void eventTick ( float DeltaTime );
	float GetActivationOffset ( );
	float GetActivationWeighting ( );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void Deactivate ( );
	void Activate ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefNPC_BarKeep::pClassPointer = NULL;

// Class UDKGame.DunDefOgreNoDerpController
// 0x0000 (0x06D4 - 0x06D4)
class ADunDefOgreNoDerpController : public ADunDefOgreController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57314 ];

		return pClassPointer;
	};

	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
};

UClass* ADunDefOgreNoDerpController::pClassPointer = NULL;

// Class UDKGame.UI_NetworkMultiplayer
// 0x0184 (0x07C0 - 0x063C)
class UUI_NetworkMultiplayer : public UDunDefUIScene
{
public:
	class UUIButton_Scripted*                          HostGameButton;                                   		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          JoinByIPGameButton;                               		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          JoinGameButton;                                   		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          SearchGamesButton;                                		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          SearchFiltersButton;                              		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          BackButton;                                       		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ShowGamerCardButton;                              		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ResetFilterButton;                                		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          ToggleShopMode;                                   		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DefendersStoreButton;                             		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SteamWorkshopButton;                              		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIEditBox*                                  JoinAddressEditBox;                               		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPrefab*                                   SessionEntryPrefab;                               		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_HeroSelection*                           HeroSelectionSceneTemplate;                       		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIList*                                     ServerList;                                       		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    LanPanel;                                         		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    TitleLabel;                                       		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    TitleLabelLower;                                  		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              LanLabel;                                         		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LANString;                                        		// 0x0688 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InternetString;                                   		// 0x0694 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUI_GameSpyLogin*                            LoginScene;                                       		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SearchingForGamesSound;                           		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_SearchFilters*                           SearchFilterScene;                                		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  UnknownHeroTinyIcon;                              		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        PingTextures;                                     		// 0x06B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MSG_SearchingForGamesTitle;                       		// 0x06BC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_SearchingForGamesDescription;                 		// 0x06C8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_FailedToJoinGameTitle;                        		// 0x06D4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_FailedToJoinGameDescription;                  		// 0x06E0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoiningGameTitle;                             		// 0x06EC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoiningGameDescription;                       		// 0x06F8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CannotJoinTitle;                              		// 0x0704 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CannotJoinGameFull;                           		// 0x0710 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CannotJoinNotAllOnline;                       		// 0x071C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CreatingGameTitle;                            		// 0x0728 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CreatingGameDescription;                      		// 0x0734 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_ResetGameFilters;                             		// 0x0740 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ResetFiltersString;                               		// 0x074C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ToggleShop_ShowShops;                             		// 0x0758 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ToggleShop_ShowGames;                             		// 0x0764 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUIImage*                                    MultiplayerModeImage;                             		// 0x0770 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPendingSearchRequest : 1;                        		// 0x0774 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      PrevTopLevel : 1;                                 		// 0x0774 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bLameToggle : 1;                                  		// 0x0774 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsJoiningGame : 1;                                		// 0x0774 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsLANGame : 1;                                    		// 0x0774 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      hasCancelledJoin : 1;                             		// 0x0774 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	class UUI_PasswordPrompt*                          PasswordPrompt;                                   		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUI_SessionBrowser_EntryPanel* >     SessionEntryPanels;                               		// 0x077C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUIButton_Scripted*                          ServerListButtonA;                                		// 0x0788 (0x0004) [0x0000000000000000]              
	class UUIButton_Scripted*                          ServerListButtonB;                                		// 0x078C (0x0004) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0790 (0x0004) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0794 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0798 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameSearch*                           OnlineSearchSettings;                             		// 0x079C (0x0004) [0x0000000000000000]              
	class UDataStoreClient*                            DSClient;                                         		// 0x07A0 (0x0004) [0x0000000000000000]              
	class UUIDataStore_OnlineGameSettings*             SettingsDataStore;                                		// 0x07A4 (0x0004) [0x0000000000000000]              
	class UDunDefDataStore_GameSearch*                 SearchDataStore;                                  		// 0x07A8 (0x0004) [0x0000000000000000]              
	struct FString                                     connectUrl;                                       		// 0x07AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              JoinTimer;                                        		// 0x07B8 (0x0004) [0x0000000000000000]              
	float                                              JoinDelay;                                        		// 0x07BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57401 ];

		return pClassPointer;
	};

	bool eventIsGamepadOwned ( );
	bool eventIsKeyboardOwned ( );
	void Update ( float DeltaTime );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void SwitchLANSettings ( );
	void RefreshLANPanel ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	bool TextSubmitted ( class UUIEditBox* Sender, int PlayerIndex );
	bool OnLanPanelClicked ( class UUIScreenObject* Obj, int PlayerIndex );
	bool OnPasswordEntered ( struct FString pass );
	bool JoinCurrentServer ( );
	void eventSceneDeactivated ( );
	bool OnSearchCancelled ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void SearchForGames ( unsigned long bUserDriven );
	void OnJoinGameComplete ( struct FName SessionName, unsigned long bSuccessful );
	void BuildJoinURL ( struct FString ResolvedConnectionURL );
	void JoinGame ( struct FOnlineGameSearchResult gameSession );
	bool OnAcceptJoinFailedClicked ( class UUI_MessageBox* Sender, struct FString ButtonClicked, int PlayerIndex );
	bool OnCancelJoinClicked ( class UUI_MessageBox* Sender, struct FString ButtonClicked, int PlayerIndex );
	void JoinGameIP ( struct FString IPAddress );
	void OnSearchComplete ( unsigned long bWasSuccessful );
	bool OnResetFilterMessageBox ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void CloseSearchMessage ( );
	void OnGameCreated ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnDestroyForCancelComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void CleanupSession ( );
	bool OnCreateCancelled ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void ShowCancelCreateButton ( );
	void HostGame ( struct FString withGameName );
	void SetupSearch ( );
	void SetupSettings ( struct FString withGameName );
	void SetupDefaultCustomKeys ( class UOnlineGameSettings* InOnlineGameSettings );
	struct FString CleanupTags ( struct FString InString );
	bool IsIPValid ( struct FString IP );
	void KeyboardInputDone ( unsigned long Success );
	void ShowGamerCardForCurrentSelection ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void ResetGameFilters ( );
};

UClass* UUI_NetworkMultiplayer::pClassPointer = NULL;

// Class UDKGame.DunDefOnlineProfileSettings
// 0x0000 (0x008C - 0x008C)
class UDunDefOnlineProfileSettings : public UOnlineProfileSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57433 ];

		return pClassPointer;
	};

};

UClass* UDunDefOnlineProfileSettings::pClassPointer = NULL;

// Class UDKGame.DunDefOrc
// 0x0000 (0x0CCC - 0x0CCC)
class ADunDefOrc : public ADunDefEnemy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57435 ];

		return pClassPointer;
	};

	struct FVector GetAMeleeSwingLocation ( struct FName SocketName );
	float PlayOrcAttackAnimation ( int AnimationIndex );
	float PlayAttackAnimation ( );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	void eventMeleeSwingEnd ( );
	void eventMeleeSwingStart ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefOrc::pClassPointer = NULL;

// Class UDKGame.DunDefOrcController
// 0x0018 (0x0658 - 0x0640)
class ADunDefOrcController : public ADunDefGoblinController
{
public:
	TArray< struct FName >                             MeleeSwingSockets;                                		// 0x0640 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           PreviousMeleeSwingLocations;                      		// 0x064C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57473 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
};

UClass* ADunDefOrcController::pClassPointer = NULL;

// Class UDKGame.DunDefPhoenixControllerV3
// 0x0098 (0x06A4 - 0x060C)
class ADunDefPhoenixControllerV3 : public ADunDefEnemyController
{
public:
	class ADunDefProjectile*                           DropFireballProjectileTemplate;                   		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefProjectile*                           LaunchFireballProjectileTemplate;                 		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     BeakProjectileLaunchEffect;                       		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BeakSpawnOffset;                                  		// 0x0618 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxNumProjectilesToLaunch;                        		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DashDamageBase;                                   		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefPhoenixMiniV2*                        BabyPhoenixTemplate;                              		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      BabyPhoenixMaxAlive;                              		// 0x0630 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      BabyPhoenixSpawnInterval;                         		// 0x063C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AbortDiveMinimumZPosition;                        		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastShootProjectileTime;                          		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFlightPathNode*                             NavigationTarget;                                 		// 0x0650 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AFlightPathNode* >                   FlyingNavPoints;                                  		// 0x0654 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AFlightPathNode* >                   DashEndNavPoints;                                 		// 0x0660 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TimeEnteredState;                                 		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeInState;                                      		// 0x0670 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                numAliveMiniBirds;                                		// 0x0674 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ADunDefPhoenixMiniV2* >              MyMiniBirds;                                      		// 0x0678 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              StuckCheck_RecentDistance;                        		// 0x0684 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StuckCheck_TimeElapsed;                           		// 0x0688 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StuckCheck_OldLocation;                           		// 0x068C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StuckCheck_ResetLocation;                         		// 0x0698 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57503 ];

		return pClassPointer;
	};

	void ResetPhoenix ( );
	void StuckCheck ( float DeltaTime );
	void ShootFireball ( );
	void GetAFlightNavigationTarget ( );
	bool AllowDamage ( class AActor* Victim );
	bool HurtRadius ( float BaseDamage, float TheDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void MiniBirdDied ( class ADunDefPhoenixMiniV2* miniBird );
	void SpawnMiniPhoenix ( );
	int getMaxAllowedLiveMiniBirds ( );
	bool WantsHurtAnimation ( );
	void GotToFlyingState ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefPhoenixControllerV3::pClassPointer = NULL;

// Class UDKGame.DunDefWyvern
// 0x0034 (0x0D00 - 0x0CCC)
class ADunDefWyvern : public ADunDefEnemy
{
public:
	struct FName                                       RangedAttackAnimation;                            		// 0x0CCC (0x0008) [0x0000000000000000]              
	unsigned long                                      bPlayedDeathAnim : 1;                             		// 0x0CD4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPlayedFinalDeathAnim : 1;                        		// 0x0CD4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FName                                       ProjectileSpawnSocketName;                        		// 0x0CD8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MeleeSwingSocketName;                             		// 0x0CE0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FinalDeathAnim;                                   		// 0x0CE8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              WyvernFallTimeout;                                		// 0x0CF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AllowObstructionJumpAfterSpawnTime;               		// 0x0CF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WyvernObsJumpMinDistFromSpawnLocation;            		// 0x0CF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                wyvernNumber;                                     		// 0x0CFC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57515 ];

		return pClassPointer;
	};

	void UpdateDifficultyValues ( unsigned long UpdateMaterial, unsigned long onlyDynamicValues );
	bool AllowObstructionJump ( );
	void CheckWyvernProximity ( );
	void eventFireProjectile ( );
	void eventEndMeleeSwing ( );
	void eventStartMeleeSwing ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void GetProjectileSpawnTransformation ( struct FVector* Position, struct FRotator* Orientation );
	float PlayAttackAnimation ( );
	bool IsCurrentlyPlayingRangedAttackAnimation ( );
	float PlayRangedAttackAnimation ( );
	void SetMovementPhysics ( );
	void PauseAnimationAfterDeath ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	struct FVector GetMeleeSwingLocation ( );
	void DisableSpawnCollision ( );
	void PostBeginPlay ( );
};

UClass* ADunDefWyvern::pClassPointer = NULL;

// Class UDKGame.DunDefPhoenixMiniV2
// 0x000C (0x0D0C - 0x0D00)
class ADunDefPhoenixMiniV2 : public ADunDefWyvern
{
public:
	class ADunDefGasCloud*                             ExplodeEffect;                                    		// 0x0D00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifespanBeforeExplosion;                          		// 0x0D04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefPhoenixControllerV3*                  Phoenix;                                          		// 0x0D08 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57514 ];

		return pClassPointer;
	};

	void Explode ( );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventPostBeginPlay ( );
};

UClass* ADunDefPhoenixMiniV2::pClassPointer = NULL;

// Class UDKGame.DunDefPhoenixV3
// 0x0160 (0x0E54 - 0x0CF4)
class ADunDefPhoenixV3 : public ADunDefBoss
{
public:
	struct FName                                       ProjectileSpawnSocketName;                        		// 0x0CF4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlamethrowerSocketName;                           		// 0x0CFC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DropSocketName;                                   		// 0x0D04 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrafingSpeed;                                    		// 0x0D0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStrafingDistance;                              		// 0x0D10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    AirSpeedMultipliers;                              		// 0x0D14 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       DashLoopAnim;                                     		// 0x0D20 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DashStartAnim;                                    		// 0x0D28 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DashEndAnim;                                      		// 0x0D30 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightMortarLoopAnim;                             		// 0x0D38 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightMortarStartAnim;                            		// 0x0D40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightMortarEndAnim;                              		// 0x0D48 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GlideBreathAnim;                                  		// 0x0D50 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GlideLoopAnim;                                    		// 0x0D58 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GlideStartAnim;                                   		// 0x0D60 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GlideEndAnim;                                     		// 0x0D68 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightConeOfFireAnim;                             		// 0x0D70 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightDeathAnim;                                  		// 0x0D78 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightEndAnim;                                    		// 0x0D80 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightFlameburstAnim;                             		// 0x0D88 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightIdleAnim;                                   		// 0x0D90 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightIgniteScaffoldingAnim;                      		// 0x0D98 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightLandingAnim;                                		// 0x0DA0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightLoopAnim;                                   		// 0x0DA8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightStartAnim;                                  		// 0x0DB0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightStunnedAnim;                                		// 0x0DB8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightStrafeBackAnim;                             		// 0x0DC0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightStrafeLeftAnim;                             		// 0x0DC8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightStrafeRightAnim;                            		// 0x0DD0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DescendLavaLoopAnim;                              		// 0x0DD8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DescendLavaStartAnim;                             		// 0x0DE0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EmergeLavaLoopAnim;                               		// 0x0DE8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EmergeLavaEndAnim;                                		// 0x0DF0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GroundConeOfFireAnim;                             		// 0x0DF8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GroundFlameburstAnim;                             		// 0x0E00 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GroundIgniteScaffoldingAnim;                      		// 0x0E08 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GroundTakeOffAnim;                                		// 0x0E10 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GroundMortarLoopAnim;                             		// 0x0E18 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GroundMortarStartAnim;                            		// 0x0E20 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GroundMortarEndAnim;                              		// 0x0E28 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeBlend*                              LoopingBlender;                                   		// 0x0E30 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           LoopingAnimation;                                 		// 0x0E34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashStartTime;                                    		// 0x0E38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DashAirSpeed;                                     		// 0x0E3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DashRot;                                          		// 0x0E40 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                it;                                               		// 0x0E4C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPlayer*                                     aTarget;                                          		// 0x0E50 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57544 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe );
	void eventShootFireball ( );
	void EndFlightMortar ( );
	void StartFlightMortar ( );
	void GotoNoState ( );
	void EndDash ( );
	void StartDash ( );
	void StartFlight ( );
	void GetDropProjectileSpawnTransformation ( struct FVector* Position, struct FRotator* Orientation );
	void GetProjectileSpawnTransformation ( struct FVector* Position, struct FRotator* Orientation );
	float GetPawnDamageModifier ( unsigned long bDontIncludeAbilities );
	void PlayHurtAnimation ( class UClass* DamageType, struct FVector HitLocation );
	void eventPostBeginPlay ( );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefPhoenixV3::pClassPointer = NULL;

// Class UDKGame.DunDefWyvernController
// 0x00C4 (0x06D0 - 0x060C)
class ADunDefWyvernController : public ADunDefEnemyController
{
public:
	class ANavigationPoint*                            TargetPath;                                       		// 0x060C (0x0004) [0x0000000000000000]              
	class AActor*                                      TargetActor;                                      		// 0x0610 (0x0004) [0x0000000000000000]              
	class AActor*                                      TempActor;                                        		// 0x0614 (0x0004) [0x0000000000000000]              
	struct FVector                                     TargetLocation;                                   		// 0x0618 (0x000C) [0x0000000000000000]              
	struct FVector                                     TempLocation;                                     		// 0x0624 (0x000C) [0x0000000000000000]              
	struct FVector                                     hn;                                               		// 0x0630 (0x000C) [0x0000000000000000]              
	float                                              Dist;                                             		// 0x063C (0x0004) [0x0000000000000000]              
	float                                              LastNavCheck;                                     		// 0x0640 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsInMeleeSwing : 1;                               		// 0x0644 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     PreviousMeleeSwingLocation;                       		// 0x0648 (0x000C) [0x0000000000000000]              
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x0654 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MeleeDamageAmount;                                		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x0668 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefProjectile*                           AttackProjectileTemplate;                         		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x067C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProjectileMuzzleEffectSpawnOffset;                		// 0x0688 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeadTargetBasePercent;                            		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeadTargetRandomPercent;                          		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimRandomSpread;                                  		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxShootOffsetYawArc;                             		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RangedAttackStateName;                            		// 0x06A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumProjectileAttackRange;                     		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumCoreProjectileAttackRange;                 		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumProjectileAttackRange;                     		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ANavigationPoint*                            RecentAnchor;                                     		// 0x06B8 (0x0004) [0x0000000000000000]              
	float                                              StuckCheck_RecentDistance;                        		// 0x06BC (0x0004) [0x0000000000000000]              
	float                                              StuckCheck_TimeElapsed;                           		// 0x06C0 (0x0004) [0x0000000000000000]              
	struct FVector                                     StuckCheck_OldLocation;                           		// 0x06C4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57593 ];

		return pClassPointer;
	};

	struct FVector GetObstructionJumpForwardDir ( struct FVector forwardDir );
	void ObstructionJump ( struct FVector jumpForwardDir, struct FVector jumpSideDir );
	void DoRangedAttack ( );
	void DoAttack ( );
	bool AddToSwingHurtList ( class AActor* newEntry );
	void NotifyTakeHitEX ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void CheckDirectReachability ( );
	void CheckIndirectReachability ( );
	void eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget );
	struct FVector eventGeneratePathToActor ( class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath );
	bool MoveAroundBlockade ( class AActor* blockadeActor, float BlockadeWidth, struct FVector HitNormal, unsigned long SkipBlockingCheck );
	bool NavActorReachable ( class AActor* A );
	bool DrawMyHUD ( class ADunDefHUD* H );
	class ANavigationPoint* FindNearestNavPointTo ( class AActor* A, unsigned long bCheckVisible );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void EndMeleeSwing ( );
	void StartMeleeSwing ( );
	void FireProjectile ( );
};

UClass* ADunDefWyvernController::pClassPointer = NULL;

// Class UDKGame.DunDefPhoenixMiniControllerV2
// 0x0004 (0x06D4 - 0x06D0)
class ADunDefPhoenixMiniControllerV2 : public ADunDefWyvernController
{
public:
	class ADunDefPlayer*                               PlayerTarget;                                     		// 0x06D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57734 ];

		return pClassPointer;
	};

	void findPlayer ( unsigned long bNearest );
	void eventTick ( float DeltaTime );
};

UClass* ADunDefPhoenixMiniControllerV2::pClassPointer = NULL;

// Class UDKGame.DunDefWeapon_MeleeSword
// 0x0106 (0x05F0 - 0x04EA)
class ADunDefWeapon_MeleeSword : public ADunDefWeapon
{
public:
	float                                              SpeedMultiplier;                                  		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraSpeedMultiplier;                             		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageMultiplier;                                 		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumMultiplier;                               		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageIncreaseForSwingSpeedFactor;                		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BlockingAnimationName;                            		// 0x0500 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BlockingFlinchAnimationName;                      		// 0x0508 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedMultiplierDamageExponent;                    		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x0518 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMeleeSwingInfo >                   MeleeSwingInfos;                                  		// 0x0524 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      BaseMeleeDamageType;                              		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     BlockingSparksEffect;                             		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EnableBlockingSound;                              		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DisableBlockingSound;                             		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumBlockingAngle;                             		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlockingMomentumExponent;                         		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackBonusLinearScale;                        		// 0x0548 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackBonusExpScale;                           		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumReblockInterval;                           		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumSwingDamageTime;                           		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumSwingTime;                                 		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalMomentumMultiplier;                     		// 0x055C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxMomentumMultiplierByDamage;                    		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTotalMomentumMultiplier;                       		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumBlockingPercent;                           		// 0x0568 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileDamageHeroStatExponentMultiplier;       		// 0x056C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumShootProjectileDotProduct;                 		// 0x0570 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bShootMeleeProjectile : 1;                        		// 0x0574 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyShootProjectileAtFullHealth : 1;             		// 0x0574 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSlowEnemyTarget : 1;                             		// 0x0574 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bWeakenEnemyTarget : 1;                           		// 0x0574 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseWeaponDamageForProjectileDamage : 1;          		// 0x0574 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      IsSwingingWeapon : 1;                             		// 0x0574 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      StartedSwingDamage : 1;                           		// 0x0574 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      StoppedSwingDamage : 1;                           		// 0x0574 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsBlocking : 1;                                  		// 0x0574 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bReplicatedIsBlocking : 1;                        		// 0x0574 (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	unsigned long                                      bDidShootMeleeProjectile : 1;                     		// 0x0574 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIsInSpecialAnimation : 1;                        		// 0x0574 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	float                                              SlowEnemyTargetPercentage;                        		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeakenEnemyTargetPercentage;                      		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyClearSlowTime;                               		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyClearWeakenTime;                             		// 0x0584 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponProjectileDamageMultiplier;                 		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastSwingDamageTime;                              		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FMeleeSwingInfo                             CurrentMeleeSwingInfo;                            		// 0x0590 (0x002C) [0x0000000000000000]              
	int                                                CurrentMeleeSwingInfoIndex;                       		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              LastSwingTime;                                    		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              LastBlockingEndTime;                              		// 0x05C4 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x05C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             MeleeSwingSockets;                                		// 0x05D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           PreviousMeleeSwingLocations;                      		// 0x05E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      StartedSwingAimTarget;                            		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57975 ];

		return pClassPointer;
	};

	class UClass* GetWeaponDamageType ( unsigned long bGetAltDamageType );
	float GetProjectileDamage ( );
	void ShootMeleeProjectile ( class AActor* projTarget );
	void SendToFiringState ( unsigned char FireModeNum );
	float GetMomentumMultiplier ( );
	void BlockedHit ( class UClass* DamageType, struct FVector HitLocation );
	float GetBlockingDamageResistancePercent ( );
	float GetHealAmount ( class UHeroEquipment* HealingShield );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum );
	bool ShouldPlayHurtAnimation ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, int* Result );
	bool BlocksHit ( class AController* InstigatedBy, struct FVector HitLocation );
	void DetachWeapon ( );
	void CustomFire ( int theFireMode );
	void CheckDisableBlocking ( );
	void CheckEnableBlocking ( );
	void ServerStopBlock ( );
	void ServerStartBlock ( );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	bool CanUseAbility ( class ADunDefPlayerAbility* ability );
	void DisableBlocking ( );
	void CheckUpdateBlocking ( );
	void EnableBlocking ( );
	void StopSwingingWeapon ( );
	void eventPawnTookDamage ( );
	float GetTotalDamage ( );
	void DoMeleeAttack ( );
	struct FVector GetMeleeSwingLocation ( struct FName SocketName );
	void DoSwinging ( unsigned long bForceSwing, unsigned long bOverrideExtent, struct FVector extentOverride, float damageOverride, float momentumOverride, unsigned long scaleMomentumByMass, float scaleMomentumByMassExponent );
	void AnimNotify_StopWeaponSwingDamage ( );
	void ResetSwing ( );
	void AnimNotify_ResetWeaponSwingDamage ( );
	void AnimNotify_StartWeaponSwingDamage ( );
	void eventTick ( float DeltaTime );
	void eventPostBeginPlay ( );
	bool AddToSwingHurtList ( class AActor* newEntry );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefWeapon_MeleeSword::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_AreaOfEffect
// 0x005C (0x04D4 - 0x0478)
class ADunDefPlayerAbility_AreaOfEffect : public ADunDefPlayerAbility_CharacterToggle
{
public:
	float                                              ActorEffectScale;                                 		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ActorEffectTemplate;                              		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    AbilityEffectComponent;                           		// 0x0480 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ActivationAnimation;                              		// 0x0484 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttachEffectToPawnSocket;                         		// 0x048C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Range;                                            		// 0x0494 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              EffectInterval;                                   		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ClassesToAffect;                                  		// 0x049C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      AffectAllies : 1;                                 		// 0x04A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AffectEnemies : 1;                                		// 0x04A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttachEffectToPawnMesh : 1;                      		// 0x04A8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAffectInstigator : 1;                            		// 0x04A8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      HeroRadiusScalingStat;                            		// 0x04AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                OverlayEffectColor;                               		// 0x04B0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              RangeScalingExponent;                             		// 0x04C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AreaOfEffectParticleBaseScale;                    		// 0x04C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAffectedActor >                    AffectedActors;                                   		// 0x04C8 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58854 ];

		return pClassPointer;
	};

	bool IsFirstAOEAbility ( class AActor* act, class ADunDefPlayerAbility_AreaOfEffect* Effect );
	bool IsOnlyAOEAbility ( class AActor* act, class ADunDefPlayerAbility_AreaOfEffect* Effect );
	bool IsAffectingActor ( class AActor* act );
	void SetRange ( float theRange );
	void DoEffect ( );
	bool CanAffect ( class AActor* theAct );
	void AddEffect ( class AActor* theAct );
	void RemoveEffect ( int Index );
	void RemoveAllEffects ( );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	void ScaleForHeroModifiers ( unsigned long IsFirstTime );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefPlayerAbility_AreaOfEffect::pClassPointer = NULL;

// Class UDKGame.DunDefTowerPreventionRadius
// 0x0010 (0x0230 - 0x0220)
class ADunDefTowerPreventionRadius : public ADecalActor
{
public:
	float                                              IdentiyPreventionRadius;                          		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdentityDecalWidth;                               		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreventionCollisionHeight;                        		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      PreventionEnabled : 1;                            		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetEnemiesInvincible : 1;                        		// 0x022C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59302 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void Destroyed ( );
	void PostBeginPlay ( );
	bool PreventTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point, float towerRadius );
	bool AllowTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point );
	bool CheckAllowance ( );
};

UClass* ADunDefTowerPreventionRadius::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_BuildAura
// 0x0000 (0x0714 - 0x0714)
class ADunDefPlayerAbility_BuildAura : public ADunDefPlayerAbility_BuildTower
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59415 ];

		return pClassPointer;
	};

	float GetOtherAbilityPlacementPreventionRadius ( class ADunDefTower* forOtherTowerArchetype );
	void UpdateDecalPlacement ( float DeltaTime );
};

UClass* ADunDefPlayerAbility_BuildAura::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_DetonateTraps
// 0x001C (0x0444 - 0x0428)
class ADunDefPlayerAbility_DetonateTraps : public ADunDefPlayerAbility
{
public:
	float                                              DetonateTrapInterval;                             		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetonationRange;                                  		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationFailureString_NoTrapsToDetonate;        		// 0x0430 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      ActivationFailureColor_NoTrapsToDetonate;         		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastDetonateTrapTime;                             		// 0x0440 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59435 ];

		return pClassPointer;
	};

	class ADunDefDamageableTarget* GetBestPresentToOpen ( );
	class ADunDefDamageableTarget* GetBestTrapToDetonate ( );
	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
	void OnActivate ( );
	bool RequestActivation ( unsigned long bHeld );
};

UClass* ADunDefPlayerAbility_DetonateTraps::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_GenericActorSpawner
// 0x00A0 (0x04C8 - 0x0428)
class ADunDefPlayerAbility_GenericActorSpawner : public ADunDefPlayerAbility
{
public:
	float                                              CastTime;                                         		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CastCost;                                         		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ActorToSpawnUponCompletion;                       		// 0x0430 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      TakeTransformationFromInstigator : 1;             		// 0x0434 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      TakeTransformationFromWeapon : 1;                 		// 0x0434 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      SpawnedBaseOnInstigator : 1;                      		// 0x0434 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      SpawnedBaseOnWeapon : 1;                          		// 0x0434 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceFullBodyCompletionAnimation : 1;            		// 0x0434 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      SetInstigatorAsActorInstigator : 1;               		// 0x0434 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SetInstigatorAsActorOwner : 1;                    		// 0x0434 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      PlayShootAnimation : 1;                           		// 0x0434 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      AimAtPlayerTarget : 1;                            		// 0x0434 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bWaitingForActorSpawn : 1;                        		// 0x0434 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bPaidForUse : 1;                                  		// 0x0434 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDidCompletion : 1;                               		// 0x0434 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bLimitActiveSpawns : 1;                           		// 0x0434 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIsBomb : 1;                                      		// 0x0434 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bAllowSpawnAtCursor : 1;                          		// 0x0434 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bUseManaHoming : 1;                               		// 0x0434 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bHasDesiredSpawnLoc : 1;                          		// 0x0434 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	struct FVector                                     SpawnLocationOffset;                              		// 0x0438 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    SpawnRotationOffset;                              		// 0x0444 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CastingCharacterAnimation;                        		// 0x0450 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CompletedCharacterAnimation;                      		// 0x0458 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CharacterEmitterSocketName;                       		// 0x0460 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     CastingCharacterEmitter;                          		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     CastingWeaponEmitter;                             		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     CompletedCharacterEmitter;                        		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     CompletedWeaponEmitter;                           		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimMaxShootOffsetYawArc;                          		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileSpread;                                 		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CompletedAnimBlendTimeIn;                         		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CompletedAnimBlendTimeOut;                        		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CompletedAnimSpeed;                               		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CastingDescription;                               		// 0x048C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              SpawnDelayTime;                                   		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastCounter;                                      		// 0x049C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxAllowedActiveSpawns;                           		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ActivationFailureString_MaxAllowedSpawns;         		// 0x04A4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FVector                                     desiredSpawnLocation;                             		// 0x04B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AActor* >                            spawnedActors;                                    		// 0x04BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59464 ];

		return pClassPointer;
	};

	struct FRotator AddSpread ( struct FRotator BaseAim );
	void ServerActivateWithLocation ( struct FVector SpawnLocation );
	bool RequestActivation ( unsigned long bHeld );
	void DoActorSpawn ( );
	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
	void SetUpActorSpawn ( );
	bool AllowCastingCancelOnDamage ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
	void ManaHoming ( );
};

UClass* ADunDefPlayerAbility_GenericActorSpawner::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_GenericSpellTimer
// 0x003C (0x0464 - 0x0428)
class ADunDefPlayerAbility_GenericSpellTimer : public ADunDefPlayerAbility
{
public:
	struct FString                                     CastingDescription;                               		// 0x0428 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureString_Short;                    		// 0x0434 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureString;                          		// 0x0440 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              TimeToComplete;                                   		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseHeroCastRate : 1;                             		// 0x0450 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class USoundCue*                                   CompletedSound;                                   		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     CastingCharacterEmitterTemplate;                  		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     CastingWeaponEmitterTemplate;                     		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CastingTimer;                                     		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59566 ];

		return pClassPointer;
	};

	int GetDisplayCost ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
	struct FString GetActivationFailureString ( unsigned char Status, unsigned long ShortString );
	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
};

UClass* ADunDefPlayerAbility_GenericSpellTimer::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_Heal
// 0x0030 (0x0458 - 0x0428)
class ADunDefPlayerAbility_Heal : public ADunDefPlayerAbility
{
public:
	struct FString                                     CastingDescription;                               		// 0x0428 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureString_Short;                    		// 0x0434 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationFailureString;                          		// 0x0440 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              HealSelfSpeedFactor;                              		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HealCompletedSound;                               		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CachedAmountCost;                                 		// 0x0454 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59603 ];

		return pClassPointer;
	};

	int GetDisplayCost ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
	struct FString GetActivationFailureString ( unsigned char Status, unsigned long ShortString );
	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
};

UClass* ADunDefPlayerAbility_Heal::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_Initiate_Invisibility
// 0x001C (0x0494 - 0x0478)
class ADunDefPlayerAbility_Initiate_Invisibility : public ADunDefPlayerAbility_CharacterToggle
{
public:
	class UParticleSystemComponent*                    AbilityEffectComponent;                           		// 0x0478 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ActivationAnimation;                              		// 0x047C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                OverlayEffectColor;                               		// 0x0484 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59638 ];

		return pClassPointer;
	};

	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
};

UClass* ADunDefPlayerAbility_Initiate_Invisibility::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_Recruit_HeroBoost
// 0x0028 (0x04FC - 0x04D4)
class ADunDefPlayerAbility_Recruit_HeroBoost : public ADunDefPlayerAbility_AreaOfEffect
{
public:
	float                                              HealingPerInterval;                               		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalDamageMultiplier;                       		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalDamageExponent;                         		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealingExponent;                                  		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundSpeedMultiplier;                            		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OwnerGroundSpeedMultiplier;                       		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OwnerHeroStatGroundSpeedExponent;                 		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OwnerDamageResistanceMultiplier;                  		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OwnerHeroStatDamageResistanceExponent;            		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareHealingMultiplier;                       		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59653 ];

		return pClassPointer;
	};

	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
	void AddEffect ( class AActor* theAct );
	void RemoveEffect ( int Index );
	void DoEffect ( );
	float GetSpeedMultiplier ( );
	float GetHealingAmount ( );
	float GetDamageMultiplier ( );
};

UClass* ADunDefPlayerAbility_Recruit_HeroBoost::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_Recruit_TowerBoost
// 0x0014 (0x04E8 - 0x04D4)
class ADunDefPlayerAbility_Recruit_TowerBoost : public ADunDefPlayerAbility_AreaOfEffect
{
public:
	float                                              HealingPerInterval;                               		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalTowerDamageMultiplier;                  		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TowerDamageMultExponent;                          		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealingMultExponent;                              		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareHealingMultiplier;                       		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59693 ];

		return pClassPointer;
	};

	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
	void AddEffect ( class AActor* theAct );
	void RemoveEffect ( int Index );
	void DoEffect ( );
	float GetHealingAmount ( );
	float GetDamageMultiplier ( );
};

UClass* ADunDefPlayerAbility_Recruit_TowerBoost::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_RepairTower
// 0x0068 (0x05A4 - 0x053C)
class ADunDefPlayerAbility_RepairTower : public ADunDefPlayerAbility_TowerPlacement
{
public:
	class UMaterialInstanceConstant*                   DecalMaterialRepair;                              		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CursorRepairTexture;                              		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ChoosingRepairWeaponEmitter;                      		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RepairingStateNamePC;                             		// 0x0548 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     RepairTowerEmitterTemplate;                       		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepairSpeedMultiplier;                            		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepairAutoSelectRangeOffset;                      		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      RepairTextDrawColor;                              		// 0x055C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepairTextScale;                                  		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InfiniteBuildPhaseSpeedMultiplier;                		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     NotificationString;                               		// 0x0568 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RepairingString;                                  		// 0x0574 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FLinearColor                                ValidNotificationColor;                           		// 0x0580 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   RepairCompletedLocalSound;                        		// 0x0590 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWasValidTower : 1;                               		// 0x0594 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class ADunDefTower*                                RepairTower;                                      		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartRepairTime;                                  		// 0x059C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedAmountCost;                                 		// 0x05A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59722 ];

		return pClassPointer;
	};

	void StartRepairingState ( );
	void ClientStartRepairingState ( );
	bool PlacementTraceCheckActors ( class AActor* A );
	class ADunDefTower* GetBestRepairTower ( );
	void ServerRequestRepairTower ( class ADunDefTower* Tower );
	void eventPostBeginPlay ( );
	void PostCursorDrawHUD ( class ADunDefHUD* H, struct FVector CursorPos );
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect ( );
	class UTexture2D* GetCursorPlacementTexture ( );
	int GetDisplayCost ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
};

UClass* ADunDefPlayerAbility_RepairTower::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_SellTower
// 0x0038 (0x0574 - 0x053C)
class ADunDefPlayerAbility_SellTower : public ADunDefPlayerAbility_TowerPlacement
{
public:
	class UMaterialInstanceConstant*                   DecalMaterialSell;                                		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  CursorSellTexture;                                		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     ChoosingSellWeaponEmitter;                        		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SellTextDrawColor;                                		// 0x0548 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SellTextScale;                                    		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     NotificationString;                               		// 0x0550 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FLinearColor                                ValidNotificationColor;                           		// 0x055C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWasValidTower : 1;                               		// 0x056C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class ADunDefTower*                                SellTower;                                        		// 0x0570 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59817 ];

		return pClassPointer;
	};

	void SortTracedActors ( TArray< struct FActorHitInfo >* TracedActors );
	void ServerRequestSellTower ( class ADunDefTower* Tower );
	void PostCursorDrawHUD ( class ADunDefHUD* H, struct FVector CursorPos );
	void eventPostBeginPlay ( );
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect ( );
	class UTexture2D* GetCursorPlacementTexture ( );
};

UClass* ADunDefPlayerAbility_SellTower::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_Squire_BloodRage
// 0x0040 (0x04B8 - 0x0478)
class ADunDefPlayerAbility_Squire_BloodRage : public ADunDefPlayerAbility_CharacterToggle
{
public:
	class UParticleSystemComponent*                    AbilityEffectComponent;                           		// 0x0478 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ActivationAnimation;                              		// 0x047C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundSpeedMultiplier;                            		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackDamageMultiplier;                           		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageResistanceMultiplier;                       		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatGroundSpeedExponent;                      		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatAttackDamageExponentNightmare;            		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatAttackDamageExponent;                     		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatDamageResistanceExponentNightmare;        		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatDamageResistanceExponent;                 		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareAttackDamageExponent;                    		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                OverlayEffectColor;                               		// 0x04A8 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59878 ];

		return pClassPointer;
	};

	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
};

UClass* ADunDefPlayerAbility_Squire_BloodRage::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_Squire_CircleSlice
// 0x0038 (0x0460 - 0x0428)
class ADunDefPlayerAbility_Squire_CircleSlice : public ADunDefPlayerAbility
{
public:
	int                                                ManaCostToActivate;                               		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PlayerSliceAnimation;                             		// 0x042C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x0438 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassMomentumExponentialScale;                     		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponDamageMultiplier;                           		// 0x0448 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalDamageAmount;                           		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatDamageModifierExponent;                   		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroStatMomentumModifierExponent;                 		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeBeforeEndAnimationToFinish;                   		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsInSwing : 1;                                    		// 0x045C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59908 ];

		return pClassPointer;
	};

	unsigned char GetAbilityStatus ( int* ExtraStatusFlag );
	float GetMomentum ( );
	float GetDamage ( );
	void AnimNotify_CurrentAbility_Off ( );
	void AnimNotify_CurrentAbility_On ( );
	bool RequestCancellation ( unsigned long bForce );
	void CancelAbility ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
};

UClass* ADunDefPlayerAbility_Squire_CircleSlice::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerAbility_UpgradeTower
// 0x0088 (0x05C4 - 0x053C)
class ADunDefPlayerAbility_UpgradeTower : public ADunDefPlayerAbility_TowerPlacement
{
public:
	class UMaterialInstanceConstant*                   DecalMaterialUpgrade;                             		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        CursorUpgradeTextures;                            		// 0x0540 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ADunDefEmitterSpawnable*                     ChoosingUpgradeWeaponEmitter;                     		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UpgradingStateNamePC;                             		// 0x0550 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     UpgradeTowerEmitterTemplate;                      		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeSpeedMultiplier;                           		// 0x055C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      CanUpgradeTowerOverlayColor;                      		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      CanNotUpgradeTowerOverlayColor;                   		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FailureString_TowerHasMaxUpgrades;                		// 0x0568 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	int                                                DefaultUpgradeCostToActivate;                     		// 0x0574 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     NotificationString;                               		// 0x0578 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradingString;                                  		// 0x0584 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              UpgradeAutoSelectRangeOffset;                     		// 0x0590 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoSelectUpgradeLevelWeighting;                  		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoSelectDotWeighting;                           		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InfiniteBuildPhaseSpeedMultiplier;                		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ValidNotificationColor;                           		// 0x05A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWasValidTower : 1;                               		// 0x05B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class ADunDefTower*                                UpgradeTower;                                     		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      DrawUpgradeColor;                                 		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentUpgradeTime;                               		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NextTowerUpgradeLevel;                            		// 0x05C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59943 ];

		return pClassPointer;
	};

	class ADunDefTower* GetBestTower ( TArray< class AActor* > candidates );
	class ADunDefTower* GetBestUpgradeTower ( );
	void PreCursorDrawHUD ( class ADunDefHUD* H, struct FVector CursorPos );
	void StartUpgradingState ( );
	void ClientStartUpgradingState ( );
	bool IsValidUpgradeTower ( class ADunDefTower* Tower, unsigned long bDontCountMana, int* theNextUpgradeLevel );
	void ServerRequestUpgradeTower ( class ADunDefTower* Tower );
	void eventPostBeginPlay ( );
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect ( );
	class UTexture2D* GetCursorPlacementTexture ( );
	int GetTowerCost ( );
	int GetDisplayCost ( );
	int GetCostToActivate ( unsigned long returnTrueValue );
};

UClass* ADunDefPlayerAbility_UpgradeTower::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerController_Mobile
// 0x0000 (0x0B38 - 0x0B38)
class ADunDefPlayerController_Mobile : public ADunDefPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60376 ];

		return pClassPointer;
	};

};

UClass* ADunDefPlayerController_Mobile::pClassPointer = NULL;

// Class UDKGame.DunDefPlayerSelectUICharacter
// 0x0068 (0x02C4 - 0x025C)
class ADunDefPlayerSelectUICharacter : public ASkeletalMeshActorMAT
{
public:
	int                                                PlayerIndex;                                      		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SelectedAnimationName;                            		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UnselectedAnimationName;                          		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimationNodeName;                          		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       IdleBlendNodeName;                                		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CharacterMeshGlobalTranslationOffset;             		// 0x0280 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ASceneCaptureActor*                          LinkedSceneCaptureActor;                          		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      FamiliarMeshComp;                                 		// 0x0290 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FRotator                                    characterInitialRotation;                         		// 0x0294 (0x000C) [0x0000000000000000]              
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                   		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              IdleBlendNode;                                    		// 0x02A4 (0x0004) [0x0000000000000000]              
	class UDunDefHero*                                 curHero;                                          		// 0x02A8 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      weaponMeshComp;                                   		// 0x02AC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      offHandWeaponMeshComp;                            		// 0x02B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               LastCostumeMesh;                                  		// 0x02B4 (0x0004) [0x0000000000000000]              
	struct FVector                                     OriginalTranslationOffset;                        		// 0x02B8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60539 ];

		return pClassPointer;
	};

	void AddDefaultOffHandWeaponAttachment ( class ADunDefWeapon* weaponTemplate, struct FName SocketName );
	void AddDefaultWeaponAttachment ( class ADunDefWeapon* weaponTemplate );
	void Unselected ( unsigned long bNoPlayAnimation );
	void Selected ( class UDunDefHero* hero, unsigned long bForce, unsigned long bDontPlayAnimation, int CostumeIndexOverride );
	void RestoreRotation ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefPlayerSelectUICharacter::pClassPointer = NULL;

// Class UDKGame.DunDefProjectile_Arrow
// 0x0000 (0x0354 - 0x0354)
class ADunDefProjectile_Arrow : public ADunDefProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60744 ];

		return pClassPointer;
	};

};

UClass* ADunDefProjectile_Arrow::pClassPointer = NULL;

// Class UDKGame.DunDefProjectile_Harpoon
// 0x001C (0x0370 - 0x0354)
class ADunDefProjectile_Harpoon : public ADunDefProjectile
{
public:
	float                                              DestructionDelayTime;                             		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumAllowedPassThrough;                            		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayPawnImpactSoundOnHittingEachPawn : 1;        		// 0x035C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageOnTouch : 1;                               		// 0x035C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayImpactEffectOnHittingEachPawn : 1;           		// 0x035C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< class AActor* >                            PreviousHitActors;                                		// 0x0360 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumPassThrough;                                   		// 0x036C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60747 ];

		return pClassPointer;
	};

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	bool IsImpactAllowed ( class AActor* Other );
};

UClass* ADunDefProjectile_Harpoon::pClassPointer = NULL;

// Class UDKGame.DunDefProjectile_BowlingBall
// 0x0060 (0x03D0 - 0x0370)
class ADunDefProjectile_BowlingBall : public ADunDefProjectile_Harpoon
{
public:
	int                                                BallBouncesMax;                                   		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BallBouncesMaxPawns;                              		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BallBounceVelocityDamping;                        		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BallBouncePawnVelocityDamping;                    		// 0x037C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BallBounceZVelocityDamping;                       		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBounceOffPawns : 1;                              		// 0x0384 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRotateOverTime : 1;                              		// 0x0384 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUsePawnVelocityDamping : 1;                      		// 0x0384 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseMeshRotationForImpactEmitter : 1;             		// 0x0384 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAlwaysExplodeOnDestruction : 1;                  		// 0x0384 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDontExplodeOnMaxBounces : 1;                     		// 0x0384 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bHitWallPawn : 1;                                 		// 0x0384 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bExploded : 1;                                    		// 0x0384 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0388 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        BowlingBallMeshComp;                              		// 0x038C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RotationSpeedRate;                                		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBounceSoundSpeed;                              		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationFollowVelocityLerpSpeed;                  		// 0x0398 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinumumBounceSoundSpeed;                          		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BounceSound;                                      		// 0x03A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionTimerAfterImpact;                        		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageOnRadius;                                   		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnSideBounceVariability;                        		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBounceSoundInterval;                           		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PawnVelocityBump;                                 		// 0x03B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                BounceCounter;                                    		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BounceCounterPawns;                               		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RandomSeed;                                       		// 0x03C8 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              LastBoundSoundTime;                               		// 0x03CC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60776 ];

		return pClassPointer;
	};

	void Tick ( float dt );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventDestroyed ( );
	void HitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void TimedExplosion ( );
	void eventPostBeginPlay ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void Landed ( struct FVector HitNormal, class AActor* Floor );
};

UClass* ADunDefProjectile_BowlingBall::pClassPointer = NULL;

// Class UDKGame.DunDefProjectile_Falling
// 0x0004 (0x0358 - 0x0354)
class ADunDefProjectile_Falling : public ADunDefProjectile
{
public:
	float                                              replicatedGravZMult;                              		// 0x0354 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60837 ];

		return pClassPointer;
	};

	void Landed ( struct FVector HitNormal, class AActor* Floor );
	void SetGravZ ( float newZ );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefProjectile_Falling::pClassPointer = NULL;

// Class UDKGame.DunDefProjectile_Fireball
// 0x0000 (0x0354 - 0x0354)
class ADunDefProjectile_Fireball : public ADunDefProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60848 ];

		return pClassPointer;
	};

};

UClass* ADunDefProjectile_Fireball::pClassPointer = NULL;

// Class UDKGame.DunDefProjectile_MagicBolt
// 0x0030 (0x0384 - 0x0354)
class ADunDefProjectile_MagicBolt : public ADunDefProjectile
{
public:
	float                                              MyChargePercentage;                               		// 0x0354 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ChargeEffectMinScale;                             		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChargeEffectMaxScale;                             		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TheDamageMinScale;                                		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TheDamageMaxScale;                                		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraDamageMaxScale;                              		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMinScale;                                   		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMaxScale;                                   		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumMinScale;                                 		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumMaxScale;                                 		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionMinSize;                                 		// 0x037C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionMaxSize;                                 		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60851 ];

		return pClassPointer;
	};

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void InitProjectile ( struct FVector Direction, class APawn* MyInstigator, float baseDamageForScaling, class AActor* myHomingTarget, class UIActorModifierInterface* MyActorModifier );
	void InitMagicBolt ( float ChargePercentage, struct FVector Direction, class APawn* MyInstigator, float baseDamageForScaling );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefProjectile_MagicBolt::pClassPointer = NULL;

// Class UDKGame.DunDefProjectile_MagicMissile
// 0x0008 (0x035C - 0x0354)
class ADunDefProjectile_MagicMissile : public ADunDefProjectile
{
public:
	unsigned long                                      pushUp : 1;                                       		// 0x0354 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              pushUpScale;                                      		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60884 ];

		return pClassPointer;
	};

	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ADunDefProjectile_MagicMissile::pClassPointer = NULL;

// Class UDKGame.DunDefUIController
// 0x0018 (0x01C4 - 0x01AC)
class UDunDefUIController : public UUIInteraction
{
public:
	TArray< struct FName >                             PushToTalkKeys;                                   		// 0x01AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FKeyBind >                          Bindings;                                         		// 0x01B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61108 ];

		return pClassPointer;
	};

	TArray< struct FName > GetKeys ( struct FString Command );
	void Initialized ( );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
};

UClass* UDunDefUIController::pClassPointer = NULL;

// Class UDKGame.DunDefSkeletonController
// 0x0040 (0x064C - 0x060C)
class ADunDefSkeletonController : public ADunDefEnemyController
{
public:
	unsigned long                                      IsInMeleeSwing : 1;                               		// 0x060C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     PreviousMeleeSwingALocation;                      		// 0x0610 (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviousMeleeSwingBLocation;                      		// 0x061C (0x000C) [0x0000000000000000]              
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x0628 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MeleeDamageAmount;                                		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeleeSwingExtent;                                 		// 0x063C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61138 ];

		return pClassPointer;
	};

	bool AddToSwingHurtList ( class AActor* newEntry );
	void EndMeleeSwing ( );
	void StartMeleeSwing ( );
	void AwaitResurrection ( );
};

UClass* ADunDefSkeletonController::pClassPointer = NULL;

// Class UDKGame.DunDefToolTipMesh
// 0x0078 (0x0294 - 0x021C)
class ADunDefToolTipMesh : public AActor
{
public:
	float                                              ActivationWeighting;                              		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivationOffset;                                 		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipTextScale;                                 		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipTextDescriptionScale;                      		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DescriptionColor;                                 		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DescriptionColor_UseOutOfRange;                   		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DescriptionColor_UseInvalid;                      		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ToolTipText;                                      		// 0x0238 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ActivationText;                                   		// 0x0244 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FVector                                     ToolTipWorldOffset;                               		// 0x0250 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ToolTipScreenOffset;                              		// 0x025C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        MyStaticMeshComp;                                 		// 0x0268 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x026C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bDrawToolTip : 1;                                 		// 0x0270 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowActivation : 1;                             		// 0x0270 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bActivationTriggerServerKismet : 1;               		// 0x0270 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bActivationTriggerClientKismet : 1;               		// 0x0270 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPlayPawnActivationAnimation : 1;                 		// 0x0270 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOnlyAllowServerActivation : 1;                   		// 0x0270 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	float                                              ActivationDistance;                               		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToolTipActivationScreenOffset;                    		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ServerKismetCustomEventName;                      		// 0x027C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ServerKismetCustomEventID;                        		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ClientKismetCustomEventName;                      		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ClientKismetCustomEventID;                        		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61284 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	class UTexture2D* GetActivationIcon ( int activationType );
	int GetToolTipPriority ( );
	bool TakesToolTipPriority ( class UDunDefToolTipInterface* otherToolTip );
	float GetActivationOffset ( );
	float GetActivationWeighting ( );
	void Client_Activate ( class ADunDefPlayerController* PC, int activationType );
	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	int AllowActivation ( class ADunDefPlayerController* PC, int activationType );
	bool ContinueDrawingToolTip ( unsigned long ContinueDrawing );
	void DrawToolTip ( class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer );
};

UClass* ADunDefToolTipMesh::pClassPointer = NULL;

// Class UDKGame.DunDefToolTipMeshFeedBack
// 0x0004 (0x0298 - 0x0294)
class ADunDefToolTipMeshFeedBack : public ADunDefToolTipMesh
{
public:
	unsigned long                                      bTreatAsPassword : 1;                             		// 0x0294 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyAllowInLocalGame : 1;                        		// 0x0294 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61351 ];

		return pClassPointer;
	};

	void Server_Activate ( class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType );
	void ShowUIKeyboard ( );
	void KeyboardInputDone ( unsigned long Success );
};

UClass* ADunDefToolTipMeshFeedBack::pClassPointer = NULL;

// Class UDKGame.TowerBoosterInterface
// 0x0000 (0x003C - 0x003C)
class UTowerBoosterInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61390 ];

		return pClassPointer;
	};

	float GetTowerBoostAmount ( unsigned char boostType );
	bool HasTowerBoostingType ( unsigned char boostType );
	class UDunDefTargetableInterface* GetTowerBoostingTarget ( );
};

UClass* UTowerBoosterInterface::pClassPointer = NULL;

// Class UDKGame.IDifficultyChangedInterface
// 0x0000 (0x003C - 0x003C)
class UIDifficultyChangedInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61878 ];

		return pClassPointer;
	};

	void ChangedDifficulty ( unsigned char newDifficulty, unsigned char oldDifficulty );
};

UClass* UIDifficultyChangedInterface::pClassPointer = NULL;

// Class UDKGame.DunDefTower_AuraDeathlyHallows
// 0x0008 (0x08BC - 0x08B4)
class ADunDefTower_AuraDeathlyHallows : public ADunDefTower_Aura
{
public:
	int                                                PawnDamagePerInterval;                            		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MyDamgeType;                                      		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62121 ];

		return pClassPointer;
	};

	class UClass* GetDamageType ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float GetAttackDamage ( );
	bool TimedEffectDT ( class ADunDefDamageableTarget* dt );
	bool TimedEffect ( class ADunDefPawn* P );
};

UClass* ADunDefTower_AuraDeathlyHallows::pClassPointer = NULL;

// Class UDKGame.DunDefTower_AuraEnrage
// 0x000C (0x08C0 - 0x08B4)
class ADunDefTower_AuraEnrage : public ADunDefTower_Aura
{
public:
	float                                              ChanceToEnrage;                                   		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumChanceToEnrage;                            		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MyDamgeType;                                      		// 0x08BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62151 ];

		return pClassPointer;
	};

	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float GetChanceToEnrage ( );
	class UClass* GetDamageType ( );
	void ExitEffect ( class ADunDefPawn* P );
	void EntryEffect ( class ADunDefPawn* P );
};

UClass* ADunDefTower_AuraEnrage::pClassPointer = NULL;

// Class UDKGame.DunDefTower_AuraHeal
// 0x0008 (0x08BC - 0x08B4)
class ADunDefTower_AuraHeal : public ADunDefTower_Aura
{
public:
	int                                                PawnHealingPerInterval;                           		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareHealingMultiplier;                       		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62180 ];

		return pClassPointer;
	};

	bool IsValidForLifeEnergyDecrease ( class ADunDefPawn* P );
	float GetDamageMultiplier ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float GetHealAmount ( );
	bool TimedEffect ( class ADunDefPawn* P );
};

UClass* ADunDefTower_AuraHeal::pClassPointer = NULL;

// Class UDKGame.DunDefTower_AuraStickyGloop
// 0x0010 (0x08C4 - 0x08B4)
class ADunDefTower_AuraStickyGloop : public ADunDefTower_Aura
{
public:
	float                                              GroundSpeedAdjustment;                            		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimSpeedMultiplier;                              		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumSpeed;                                     		// 0x08BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MyDamgeType;                                      		// 0x08C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62210 ];

		return pClassPointer;
	};

	class UClass* GetDamageType ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float GetMovementSpeedMultiplier ( );
	void ExitEffect ( class ADunDefPawn* P );
	void EntryEffect ( class ADunDefPawn* P );
	bool TimedEffect ( class ADunDefPawn* P );
};

UClass* ADunDefTower_AuraStickyGloop::pClassPointer = NULL;

// Class UDKGame.DunDefTower_BouncyBlockade
// 0x0060 (0x088C - 0x082C)
class ADunDefTower_BouncyBlockade : public ADunDefTower_Blockade
{
public:
	float                                              BouncyInterval;                                   		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      BouncyDamageType;                                 		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncyDamageAmount;                               		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncyMomentumAmount;                             		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BouncyAnimationName;                              		// 0x083C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CustomAnimNodeName;                               		// 0x0844 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncyEffectiveRadius;                            		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncyCheckRadius;                                		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BouncyZUpKick;                                    		// 0x0854 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncySpeedMultiplier;                            		// 0x0860 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassMomentumExponentialScale;                     		// 0x0864 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumVictimZDelta;                              		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MomentumSideVector;                               		// 0x086C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     AttackDamagePerSecondString;                      		// 0x0878 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              LastBouncyTime;                                   		// 0x0884 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                   		// 0x0888 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62314 ];

		return pClassPointer;
	};

	bool UsesRange ( );
	class UClass* GetDamageType ( );
	float GetAttackInterval ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float GetAttackDamage ( );
	void eventDoBounce ( );
	void eventPostBeginPlay ( );
	void PlayBouncyAnimation ( );
	void BouncyRadiusCheck ( );
	void eventDestroyed ( );
	void eventTick ( float DeltaTime );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefTower_BouncyBlockade::pClassPointer = NULL;

// Class UDKGame.DunDefTower_ProjectileType
// 0x00B8 (0x08D0 - 0x0818)
class ADunDefTower_ProjectileType : public ADunDefTower
{
public:
	float                                              AttackRange;                                      		// 0x0818 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackInterval;                                   		// 0x081C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefProjectile*                           AttackProjectileTemplate;                         		// 0x0820 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     AttackMuzzleEffectTemplate;                       		// 0x0824 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AttackMuzzleEffectSpawnOffset;                    		// 0x0828 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SkelControlLookAtName;                            		// 0x0834 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ProjectileSpawnSocketName;                        		// 0x083C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ControlLookAtBoneName;                            		// 0x0844 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumTargetYawDegrees;                          		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootAnimationName;                               		// 0x0850 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimNodeSlotName;                                 		// 0x0858 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AmbientMuzzleEffectSocketName;                    		// 0x0860 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    AmbientMuzzleEffect;                              		// 0x0868 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    AmbientGroundEffect;                              		// 0x086C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x0870 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      TakeProjectileOrientationFromSocket : 1;          		// 0x087C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNetworkProjectiles : 1;                          		// 0x087C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLookAtLeadTarget : 1;                            		// 0x087C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      DoLineOfSightCheck : 1;                           		// 0x087C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseTargetClassWeighting : 1;                     		// 0x087C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHadATarget : 1;                                  		// 0x087C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bAllowShootProjectile : 1;                        		// 0x087C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	float                                              TurretInterpSpeed;                                		// 0x0880 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetAimOffset;                                  		// 0x0884 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTargetClassWeight >                TargetClassWeights;                               		// 0x0890 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AttackDamagePerSecondString;                      		// 0x089C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              LastAttackTime;                                   		// 0x08A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlLookAt*                          MySkelControlLookAt;                              		// 0x08AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LookAtLocation;                                   		// 0x08B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSlot*                               MyAnimNodeSlot;                                   		// 0x08BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      Target;                                           		// 0x08C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AnimLength;                                       		// 0x08C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BaseShootAnimationSpeed;                          		// 0x08C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShootAnimationSpeedMultiplierExponent;            		// 0x08CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62386 ];

		return pClassPointer;
	};

	bool UsesRange ( );
	float GetShootAnimationSpeed ( );
	class UClass* GetDamageType ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float PlayShootAnimation ( );
	float GetAttackTime ( );
	float GetAttackInterval ( );
	void DoAttack ( );
	void UpdateAI ( float DeltaTime );
	void UpdateTarget ( );
	void ValidateTarget ( );
	float GetTargetClassWeight ( class UClass* theClass );
	float StaticGetAttackRange ( class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler );
	float GetAttackDamage ( );
	float GetAttackRange ( );
	void UpdateTurretLookSkelControl ( float DeltaTime );
	void eventTick ( float DeltaTime );
	bool IsPositionWithinAngleRange ( struct FVector Position );
	void eventShootProjectile ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefTower_ProjectileType::pClassPointer = NULL;

// Class UDKGame.DunDefTower_BowlingBall
// 0x0000 (0x08D0 - 0x08D0)
class ADunDefTower_BowlingBall : public ADunDefTower_ProjectileType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62532 ];

		return pClassPointer;
	};

	void UpdateTurretLookSkelControl ( float DeltaTime );
};

UClass* ADunDefTower_BowlingBall::pClassPointer = NULL;

// Class UDKGame.DunDefTower_DeadlyStriker
// 0x0000 (0x08D0 - 0x08D0)
class ADunDefTower_DeadlyStriker : public ADunDefTower_ProjectileType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62706 ];

		return pClassPointer;
	};

};

UClass* ADunDefTower_DeadlyStriker::pClassPointer = NULL;

// Class UDKGame.DunDefTower_Fireball
// 0x0000 (0x08D0 - 0x08D0)
class ADunDefTower_Fireball : public ADunDefTower_ProjectileType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62932 ];

		return pClassPointer;
	};

};

UClass* ADunDefTower_Fireball::pClassPointer = NULL;

// Class UDKGame.TrapLargeCylinderTriggerWrapper
// 0x0008 (0x0224 - 0x021C)
class ATrapLargeCylinderTriggerWrapper : public AActor
{
public:
	class ADunDefTower_GasTrap*                        parentTrap;                                       		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Radius;                                           		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62942 ];

		return pClassPointer;
	};

	void SetRadius ( float newRad );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrapLargeCylinderTriggerWrapper::pClassPointer = NULL;

// Class UDKGame.DunDefTower_Harpoon
// 0x0018 (0x08E8 - 0x08D0)
class ADunDefTower_Harpoon : public ADunDefTower_ProjectileType
{
public:
	struct FName                                       SkelControlPitchLookAtName;                       		// 0x08D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      ChamberedHarpoonComp;                             		// 0x08D8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       ChamberedHarpoonSocketName;                       		// 0x08DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlLookAt*                          MySkelControlPitchLookAt;                         		// 0x08E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62996 ];

		return pClassPointer;
	};

	void eventShowChamberedHarpoon ( );
	void eventShootProjectile ( );
	void UpdateTurretLookSkelControl ( float DeltaTime );
	void eventPostBeginPlay ( );
};

UClass* ADunDefTower_Harpoon::pClassPointer = NULL;

// Class UDKGame.DunDefTower_MagicMissile
// 0x001C (0x08EC - 0x08D0)
class ADunDefTower_MagicMissile : public ADunDefTower_ProjectileType
{
public:
	TArray< struct FProjectileEntry >                  ProjectileArray;                                  		// 0x08D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             FiringAnimations;                                 		// 0x08DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TotalProjectileChance;                            		// 0x08E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63020 ];

		return pClassPointer;
	};

	void ChooseAnimation ( );
	void ChooseProjectile ( );
	void eventShootProjectile ( );
	void eventPostBeginPlay ( );
};

UClass* ADunDefTower_MagicMissile::pClassPointer = NULL;

// Class UDKGame.DunDefTower_JackInTheBox
// 0x0000 (0x08EC - 0x08EC)
class ADunDefTower_JackInTheBox : public ADunDefTower_MagicMissile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63044 ];

		return pClassPointer;
	};

	float GetAttackRange ( );
};

UClass* ADunDefTower_JackInTheBox::pClassPointer = NULL;

// Class UDKGame.DunDefTower_ProxMineTrap
// 0x0000 (0x0928 - 0x0928)
class ADunDefTower_ProxMineTrap : public ADunDefTower_GasTrap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63055 ];

		return pClassPointer;
	};

};

UClass* ADunDefTower_ProxMineTrap::pClassPointer = NULL;

// Class UDKGame.DunDefTower_SliceNDice
// 0x00A0 (0x08B8 - 0x0818)
class ADunDefTower_SliceNDice : public ADunDefTower
{
public:
	float                                              SpeedPercentToDeltaYaw;                           		// 0x0818 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinUpTime;                                       		// 0x081C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinDownTime;                                     		// 0x0820 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinTimeExponent;                                 		// 0x0824 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinSpeedAttackInterval;                           		// 0x0828 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeedAttackInterval;                           		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinSpeedAttackRange;                              		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeedAttackRange;                              		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BladeDamage;                                      		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BladeDamageMomentum;                              		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      BladeDamageType;                                  		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DamageRateAtMaxSpinString;                        		// 0x0844 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DamageAtMaxSpinString;                            		// 0x0850 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AttackDamagePerSecondString;                      		// 0x085C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   StartSpinSound;                                   		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StopSpinSound;                                    		// 0x086C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             SpinLoopingSound;                                 		// 0x0870 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MinSoundLoopPitch;                                		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSoundLoopPitch;                                		// 0x0878 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoundFadeInTime;                                  		// 0x087C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoundFadeOutTimeMultiplier;                       		// 0x0880 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SliceMaxDeltaZ;                                   		// 0x0884 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SliceMaxDeltaZUp;                                 		// 0x0888 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SliceMaxDeltaZDown;                               		// 0x088C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SlicePositionOffset;                              		// 0x0890 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentSpeedPercent;                              		// 0x089C (0x0004) [0x0000000000000000]              
	unsigned long                                      bHasTarget : 1;                                   		// 0x08A0 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      HadTarget : 1;                                    		// 0x08A0 (0x0004) [0x0000000000000000] [0x00000002] 
	class UDunDefTargetableInterface*                  lastTarget;                                       		// 0x08A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x08A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UAnimNodeBlend*                              BladesBlender;                                    		// 0x08AC (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      SpinBone;                                         		// 0x08B0 (0x0004) [0x0000000000000000]              
	float                                              LastDamageTime;                                   		// 0x08B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63064 ];

		return pClassPointer;
	};

	bool UsesRange ( );
	void eventDestroyed ( );
	class UClass* GetDamageType ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float StaticGetAttackRange ( class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler );
	float GetRateDivisor ( );
	float GetSpinDownTime ( );
	float GetSpinUpTime ( );
	float GetAttackRange ( );
	float GetAttackDamage ( );
	void UpdateAI ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void eventPostBeginPlay ( );
};

UClass* ADunDefTower_SliceNDice::pClassPointer = NULL;

// Class UDKGame.DunDefTower_SpikyBlockade
// 0x0028 (0x0854 - 0x082C)
class ADunDefTower_SpikyBlockade : public ADunDefTower_Blockade
{
public:
	float                                              SpikyDamageAllowanceInterval;                     		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpikyDamageAmount;                                		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      SpikyDamageType;                                  		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageMomentumAmount;                             		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAttackerRadius;                             		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAttackerMinDot;                             		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SpikyDamageEnemySound;                            		// 0x0844 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DamageDistanceLocOffset;                          		// 0x0848 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63141 ];

		return pClassPointer;
	};

	void eventNotifyTookDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	class UClass* GetDamageType ( );
	void DrawTowerToolTipStats ( class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY );
	float GetAttackDamage ( );
	void DoSpikyDamage ( class ADunDefPawn* Other, struct FVector dirVec );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
};

UClass* ADunDefTower_SpikyBlockade::pClassPointer = NULL;

// Class UDKGame.DunDefTowerAllowanceVolume
// 0x0004 (0x025C - 0x0258)
class ADunDefTowerAllowanceVolume : public AVolume
{
public:
	unsigned long                                      AllowanceEnabled : 1;                             		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63184 ];

		return pClassPointer;
	};

	void Destroyed ( );
	void PostBeginPlay ( );
	bool AllowTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point );
	bool PreventTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point, float towerRadius );
	bool CheckAllowance ( );
};

UClass* ADunDefTowerAllowanceVolume::pClassPointer = NULL;

// Class UDKGame.DunDefTowerPreventionVolume
// 0x0004 (0x025C - 0x0258)
class ADunDefTowerPreventionVolume : public AVolume
{
public:
	unsigned long                                      PreventionEnabled : 1;                            		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetEnemiesInvincible : 1;                        		// 0x0258 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63235 ];

		return pClassPointer;
	};

	void Destroyed ( );
	void PostBeginPlay ( );
	void UnTouch ( class AActor* Other );
	void Touch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool PreventTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point, float towerRadius );
	bool AllowTowerAtPoint ( class ADunDefPlayerController* PC, class ADunDefTower* towerArch, struct FVector Point );
	bool CheckAllowance ( );
};

UClass* ADunDefTowerPreventionVolume::pClassPointer = NULL;

// Class UDKGame.DunDefViewportInput
// 0x0018 (0x00F0 - 0x00D8)
class UDunDefViewportInput : public UInput
{
public:
	class USoundCue*                                   CantJoinInMultiplayerSoundCue;                    		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              LastJoinAttemptTime;                              		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              LastCreatePlayerAttempt[ 0x4 ];                   		// 0x00E0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63537 ];

		return pClassPointer;
	};

	void ResetForNewMap ( );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PlayCantJoinSound ( );
};

UClass* UDunDefViewportInput::pClassPointer = NULL;

// Class UDKGame.DunDefWeapon_Crossbow
// 0x008A (0x0574 - 0x04EA)
class ADunDefWeapon_Crossbow : public ADunDefWeapon
{
public:
	struct FName                                       CustomAnimNodeName;                               		// 0x04EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootAnimName;                                    		// 0x04F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                BaseNumProjectiles;                               		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireIntervalMultiplier;                           		// 0x0500 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseReloadSpeed;                                  		// 0x0504 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadSpeedBonusLinearScale;                      		// 0x0508 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadSpeedBonusExpScale;                         		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadSpeedMultiplier;                            		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumReloadTime;                                		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PostCancelReloadAllowedInterval;                  		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadSpeedNoAmmoMultiplier;                      		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShootAnimBlendInTime;                             		// 0x0520 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShootAnimBlendOutTime;                            		// 0x0524 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ReloadSound;                                      		// 0x0528 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ReloadFinishedSound;                              		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ReloadCancelledSound;                             		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   NoReloadAllowedSound;                             		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTurnOnParticleSystemComponent : 1;               		// 0x0538 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReplicateFireEvent : 1;                          		// 0x0538 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayFiringSound : 1;                             		// 0x0538 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTurnOnLightComponent : 1;                        		// 0x0538 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseFixedReloadSpeed : 1;                         		// 0x0538 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseHighShotPerSecond : 1;                        		// 0x0538 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bReloading : 1;                                   		// 0x0538 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bFireFirstShot : 1;                               		// 0x0538 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bStartedFireEvent : 1;                            		// 0x0538 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bForceReloadCheckOnActivate : 1;                  		// 0x0538 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	struct FName                                       TurnOnParticleSystemComponentName;                		// 0x053C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TurnOnLightComponentName;                         		// 0x0544 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FiringSound;                                      		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AmmoConsumptionPerShot;                           		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FixedReloadSpeed;                                 		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                   		// 0x0558 (0x0004) [0x0000000000000000]              
	int                                                ClipAmmo;                                         		// 0x055C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              TotalReloadTime;                                  		// 0x0560 (0x0004) [0x0000000000000000]              
	float                                              ReloadStartTime;                                  		// 0x0564 (0x0004) [0x0000000000000000]              
	float                                              LastReloadCancelledTime;                          		// 0x0568 (0x0004) [0x0000000000000000]              
	float                                              LastNoReloadAllowedSoundTime;                     		// 0x056C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastReloadPressedFireTime;                        		// 0x0570 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64576 ];

		return pClassPointer;
	};

	void UnHideAdditionalAttachments ( );
	void ClearAttachedComponents ( );
	void SetWeaponSpeedMultiplier ( float newMult );
	void UsedAbility ( class ADunDefPlayerAbility* ability );
	float GetReloadPercent ( );
	int GetMaxAmmo ( );
	int GetAmmo ( );
	float GetAmmoPercent ( );
	bool UsesAmmo ( );
	void DetachWeapon ( );
	void Activate ( );
	void CheckAmmo ( );
	void CustomFire ( int theFireMode );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName, unsigned long bDontPlaySound );
	void MoveComponents ( unsigned long bReattach );
	void StoppedFire ( );
	void StartedFire ( );
	class UActorComponent* GetTaggedComponent ( struct FName compTag, unsigned long bUseActorComp );
	void ServerReload ( );
	void ServerStopReload ( );
	void StartFire ( unsigned char FireModeNum );
	bool HasAnyClipAmmo ( );
	void HandleFinishedFiring ( );
	void ExtraRefireCheckTimer ( );
	void CheckReloadFinished ( );
	void StopReload ( unsigned long isPuttingDown );
	void Reload ( );
	bool NeedsReload ( );
	void PlayNoReloadAllowedSound ( );
	bool GetReloadingColors ( struct FLinearColor* BarColor, struct FLinearColor* TextColor );
	float GetProtonChargeBlastDamageMultiplier ( );
	bool IsReloading ( );
	float GetReloadSpeed ( );
	int GetTotalAmmo ( );
	int GetNumProjectiles ( );
	void eventPostBeginPlay ( );
	void PlayedShootAnimation ( unsigned long isBigShot );
	void InitializeForHeroEquipment ( class UHeroEquipment* weaponEquipment );
	void ExecReplicatedFunction ( struct FName FunctionName, struct FName nameParam1, struct FName nameParam2, class AActor* actorParam1, class AActor* actorParam2, struct FVector vecParam1, struct FRotator rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, struct FString stringParam1, class UObject* objectParam1 );
};

UClass* ADunDefWeapon_Crossbow::pClassPointer = NULL;

// Class UDKGame.DunDefWeapon_MagicStaff
// 0x012A (0x0614 - 0x04EA)
class ADunDefWeapon_MagicStaff : public ADunDefWeapon
{
public:
	float                                              FullChargeTime;                                   		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullAltChargeTime;                                		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ChargeEffect;                                     		// 0x04F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    FullyChargedEffect;                               		// 0x04F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MinChargeEffectScale;                             		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxChargeEffectScale;                             		// 0x0500 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     MuzzleFlashEffectTemplate;                        		// 0x0504 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     FullyChargedMuzzleFlashEffectTemplate;            		// 0x0508 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinMuzzleFlashEffectScale;                        		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxMuzzleFlashEffectScale;                        		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MuzzleFlashEffectLocationOffset;                  		// 0x0514 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    MuzzleFlashEffectRotationOffset;                  		// 0x0520 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      LowChargeShotFF;                                  		// 0x052C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UForceFeedbackWaveform*                      MediumChargeShotFF;                               		// 0x0530 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UForceFeedbackWaveform*                      MaxChargeShotFF;                                  		// 0x0534 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              MediumChargeFFThreshold;                          		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumProjectiles;                                   		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPointLightComponent*                        ChargeLight;                                      		// 0x0540 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             MyAudioComponent1;                                		// 0x0544 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             MyAudioComponent2;                                		// 0x0548 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              BaseKnockbackRange;                               		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseKnockbackMomentum;                            		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackMovementSpeed;                           		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackMovementSpeedScale;                      		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      KnockbackDamageType;                              		// 0x055C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearKnockbackBonusMagScale;                     		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExpKnockbackBonusMagScale;                        		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearKnockbackBonusRangeScale;                   		// 0x0568 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExpKnockbackBonusRangeScale;                      		// 0x056C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxMomumentumMassScale;                           		// 0x0570 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassMomentumScaleExponent;                        		// 0x0574 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomumentumMassScaleBase;                          		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseKnockbackRangeAdditive;                       		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseKnockbackMomentumAdditive;                    		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseHealKnockBack : 1;                            		// 0x0584 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseAttackCD : 1;                                 		// 0x0584 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseElementalScallingForRightClick : 1;           		// 0x0584 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      InFiringState : 1;                                		// 0x0584 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      InAltFiringState : 1;                             		// 0x0584 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      OnCooldown : 1;                                   		// 0x0584 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      IsDoingKnockback : 1;                             		// 0x0584 (0x0004) [0x0000000000000000] [0x00000040] 
	float                                              HealKnockBackScalar;                              		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     KnockbackEffectTemplate;                          		// 0x058C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackEffectRangeScale;                        		// 0x0590 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseChargeSpeed;                                  		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChargeSpeedBonusLinearScale;                      		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChargeSpeedBonusExpScale;                         		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullchargeRefireInterval;                         		// 0x05A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     KnockbackSpawnOffset;                             		// 0x05A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   KnockbackChargingSound;                           		// 0x05B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   KnockbackMaxChargeSound;                          		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          KnockbackImpactDecalMaterial;                     		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackDecalSizeMin;                            		// 0x05BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackDecalSizeMax;                            		// 0x05C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackDecalRangeMin;                           		// 0x05C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackDecalRangeMax;                           		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackImpactDecalLifespan;                     		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     KnockbackDecalTraceOffset;                        		// 0x05D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackDamageScaleMin;                          		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackDamageScaleMax;                          		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CooldownDuration;                                 		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementalDamageForRightClickScalar;               		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastReleasedTime;                                 		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAltReleasedTime;                              		// 0x05F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChargeLightOriginalBrightness;                    		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeFromLastFire;                                 		// 0x05F8 (0x0004) [0x0000000000000000]              
	float                                              LastFullChargeFireTime;                           		// 0x05FC (0x0004) [0x0000000000000000]              
	float                                              CurrentKnockbackRange;                            		// 0x0600 (0x0004) [0x0000000000000000]              
	TArray< class UDunDefTargetableInterface* >        KnockbackVictims;                                 		// 0x0604 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaximumKnockbackRange;                            		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64733 ];

		return pClassPointer;
	};

	void DoAttackForceFeedback ( class ADunDefPlayerController* theController, int FireMode );
	void SpawnKnockbackDecal ( class UMaterialInterface* impactMat, struct FVector HitLocation, struct FVector HitNormal, float tSize );
	void GetProjectileSpawnTransformation ( int Index, class AActor* AimAtTargetOverride, unsigned long bForceNoRotClamping, struct FVector* OutLocation, struct FRotator* OutRotation );
	void ShootProjectiles ( int theFireMode );
	void CustomFire ( int theFireMode );
	bool ShouldRefire ( );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	float GetChargeSpeed ( );
	float GetTotalKnockbackMomentum ( );
	float GetTotalKnockbackRange ( unsigned long IgnoreChargePercent );
	void FireAmmunition ( );
	void EndFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void DetachWeapon ( );
	void RemoveChargeEffects ( );
	void AttachChargeEffects ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName, unsigned long bDontPlaySound );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADunDefWeapon_MagicStaff::pClassPointer = NULL;

// Class UDKGame.DunDefWeapon_MonkSpear
// 0x000C (0x05FC - 0x05F0)
class ADunDefWeapon_MonkSpear : public ADunDefWeapon_MeleeSword
{
public:
	float                                              ShootInterval;                                    		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxMeleeDistance;                                 		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastShootTime;                                    		// 0x05F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65125 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	float GetProjectileDamage ( );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void CustomFire ( int theFireMode );
};

UClass* ADunDefWeapon_MonkSpear::pClassPointer = NULL;

// Class UDKGame.GameInfo_Competitive
// 0x0004 (0x054C - 0x0548)
class AGameInfo_Competitive : public AMain
{
public:
	int                                                ManaToGiveOnRespawn;                              		// 0x0548 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65152 ];

		return pClassPointer;
	};

	void ScoreKill ( class AController* Killer, class AController* Other );
	class APlayerController* GetPlayerEnemyKillStat ( class APlayerController* Killer );
	int GetEnemyTargetingTeam ( class ADunDefEnemy* theEnemy );
	void PawnPossessedBy ( class ADunDefPawn* P, class AController* C, unsigned long bVehicleTransition );
	bool IsCompetitiveGameType ( );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void eventPostBeginPlay ( );
	void DoPlayerLeaving ( class ADunDefPlayerController* PC, unsigned long bForceLocal );
	int GetFreeTargetingTeam ( class ADunDefPlayerController* aPC );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
};

UClass* AGameInfo_Competitive::pClassPointer = NULL;

// Class UDKGame.GameInfo_MainSixPlayer
// 0x0000 (0x0548 - 0x0548)
class AGameInfo_MainSixPlayer : public AMain
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65193 ];

		return pClassPointer;
	};

};

UClass* AGameInfo_MainSixPlayer::pClassPointer = NULL;

// Class UDKGame.GameInfo_Special
// 0x0000 (0x0548 - 0x0548)
class AGameInfo_Special : public AMain
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65204 ];

		return pClassPointer;
	};

	void InitGameReplicationInfo ( );
	void DoWaveSkipping ( unsigned long bAllowArbritraryWaveSkipping );
};

UClass* AGameInfo_Special::pClassPointer = NULL;

// Class UDKGame.UI_EquipmentInfo_New
// 0x01C4 (0x0820 - 0x065C)
class UUI_EquipmentInfo_New : public UUI_EquipmentInfo
{
public:
	class UUIButton*                                   CloseHeroInfoButton;                              		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DropManaButton;                                   		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DropItemButton;                                   		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   MoveToItemBoxButton;                              		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   MoveToHeroButton;                                 		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_DropMana*                                DropManaUITemplate;                               		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIDataContainer_Equipment*                  EquipmentDataContainer;                           		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ForgedByLabel;                                    		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ForgedByDescriptionLabel;                         		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    EquipmentDescriptionLabel;                        		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    ForgingPanel;                                     		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    UpgradeInForgeLabel;                              		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    MaxUpgradedLabel;                                 		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    InvestingLabel;                                   		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    SellWorthLabel;                                   		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    NextLevelCostLabel;                               		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_MaterialInstance*            UpgradeMeterImage;                                		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EditboxPopup*                            EditBoxPopupTemplate;                             		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckbox*                                 ProUpgradeModeButton;                             		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   MoveEquipmentSound;                               		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TransferFromItemBoxSound;                         		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   InstantInvestSound;                               		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ProUpgradeSound;                                  		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UsingBankManaColor;                               		// 0x06B8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UsingHeroManaColor;                               		// 0x06C8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomForgerColor;                                		// 0x06D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   MainPanel;                                        		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    EffectsPanel;                                     		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    EffectsLabel;                                     		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelUpAvailableAnimation;                        		// 0x06F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelUpAppliedAnimation;                          		// 0x06FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MaxUpgradedAnimation;                             		// 0x0704 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CloseSceneInputCommand;                           		// 0x070C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InvestmentIncreaseRate;                           		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InvestmentIncreaseExponent;                       		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BarIntensityLerpSpeed;                            		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BarNormalIntensity;                               		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BarInvestingIntensity;                            		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentBarIntensity;                              		// 0x072C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetBarIntensity;                               		// 0x0730 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LevelString;                                      		// 0x0734 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InvestingString;                                  		// 0x0740 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradeString;                                    		// 0x074C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ApplyLevelUpString;                               		// 0x0758 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaximumLevelString;                               		// 0x0764 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PickStatString;                                   		// 0x0770 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradeInForgeString;                             		// 0x077C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradeNextWaveString;                            		// 0x0788 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaximumUpgradeString;                             		// 0x0794 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InstantInvestString;                              		// 0x07A0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	class UUIButton*                                   CloseButton;                                      		// 0x07AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   InvestManaButton;                                 		// 0x07B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    HeroManaLabel;                                    		// 0x07B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    EquipmentNameLabel;                               		// 0x07B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    EquipmentManaLabel;                               		// 0x07BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    CurrentLevelLabel;                                		// 0x07C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    EquipmentManaDescription;                         		// 0x07C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      InstantInvestButton;                              		// 0x07C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaInvestmentInterval;                           		// 0x07CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaInvestmentAmount;                             		// 0x07D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoxAspectRatioPanelOffset;                        		// 0x07D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastInvestmentTime;                               		// 0x07E0 (0x0004) [0x0000000000000000]              
	float                                              InvestmentTimer;                                  		// 0x07E4 (0x0004) [0x0000000000000000]              
	struct FString                                     origNextLevelValue;                               		// 0x07E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      DropOnExit : 1;                                   		// 0x07F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      MoveToItemBoxOnExit : 1;                          		// 0x07F4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      MoveToHeroOnExit : 1;                             		// 0x07F4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsGamepadPressed : 1;                            		// 0x07F4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsPlayingUpgradeAvailableAnimation : 1;           		// 0x07F4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bInvestedAnything : 1;                            		// 0x07F4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasEnoughBankManaForUpgrade : 1;                 		// 0x07F4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bShiftDown : 1;                                   		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bCtrlDown : 1;                                    		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bUpdateEffectPanel : 1;                           		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	float                                              CurrentStoredManaPercent;                         		// 0x07F8 (0x0004) [0x0000000000000000]              
	float                                              TargetStoredManaPercent;                          		// 0x07FC (0x0004) [0x0000000000000000]              
	struct FString                                     UserEquipmentName;                                		// 0x0800 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UserForgerName;                                   		// 0x080C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PreviousSellWorth;                                		// 0x0818 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUI_EditboxPopup*                            myEditBoxPopup;                                   		// 0x081C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65815 ];

		return pClassPointer;
	};

	bool HasEnoughBankManaForUpgrade ( );
	bool IsProUpgradeMode ( );
	void UIPostRender ( class UCanvas* C );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void CloseAllHeroUI ( );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void eventEditBoxPopUpCompleted ( struct FString EditBoxResult );
	void CloseWithAnimation ( );
	void eventSceneDeactivated ( );
	void ResetOnExits ( );
	class UDunDefHero* GetHero ( );
	void InitForEquipment ( class UDunDefHero* hero, class UHeroEquipment* theEquipment, unsigned long IsInForge, class UUI_HeroInfo* heroInfoUI, unsigned long IsRemoteHero, unsigned long IsInEquipmentBox, class AActor* forgeActor, unsigned long bIsInTrade, unsigned long bIsInPlayerShop );
	bool ShowUpgradePanel ( );
	void UpdateForgeValues ( float DeltaTime, unsigned long bNoInterpolation );
	void UpdateInvestment ( float DeltaTime );
	bool HasAnyManaPower ( );
	void UpdateEffectPanel ( );
	void eventUpdate ( float DeltaTime );
	struct FName GetCloseAnimation ( );
};

UClass* UUI_EquipmentInfo_New::pClassPointer = NULL;

// Class UDKGame.HeroEquipment_Familiar_WithProjectileAI
// 0x00FC (0x0BEC - 0x0AF0)
class UHeroEquipment_Familiar_WithProjectileAI : public UHeroEquipment_Familiar
{
public:
	float                                              ProjectileShootInterval;                          		// 0x0AF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefProjectile*                           ProjectileTemplate;                               		// 0x0AF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefProjectile*                           ProjectileTemplateAlt;                            		// 0x0AF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ADunDefProjectile* >                 ProjectileTemplates;                              		// 0x0AFC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       FamiliarSocketName;                               		// 0x0B08 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MuzzleSocketName;                                 		// 0x0B10 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShootEffectSocket;                                		// 0x0B18 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetRange;                                      		// 0x0B20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ScaleHeroDamage : 1;                              		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFixedShootSpeed : 1;                          		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShootProjectileWithoutTarget : 1;                		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceProjectileMuzzleRotation : 1;               		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreHurtAnimationWhenShooting : 1;             		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSlowEnemyTarget : 1;                             		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bWeakenEnemyTarget : 1;                           		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseProjectileImpactedDelegate : 1;               		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bMythicalScaleHeroDamage : 1;                     		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bChooseHealingTarget : 1;                         		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bProjectilesCollideWithOwner : 1;                 		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bAddManaForDamage : 1;                            		// 0x0B24 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseAltProjectile : 1;                            		// 0x0B24 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIgnoreElementInTargeting : 1;                    		// 0x0B24 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bDoShotsPerSecondBonusCap : 1;                    		// 0x0B24 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bChooseRandomProjectileTemplate : 1;              		// 0x0B24 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      DoLineOfSightCheck : 1;                           		// 0x0B24 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bDidAddManaForDamage : 1;                         		// 0x0B24 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	TArray< struct FVector >                           ProjectileSpawnOffsets;                           		// 0x0B28 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     ProjectileSpawnOffset;                            		// 0x0B34 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRotator >                          ProjectileRotOffsets;                             		// 0x0B40 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    ProjectileDelays;                                 		// 0x0B4C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MinimumProjectileSpeed;                           		// 0x0B58 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileSpeedBonusMultiplier;                   		// 0x0B5C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAttackAnimationSpeed;                          		// 0x0B60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjectileDamageMultiplier;                       		// 0x0B64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShotsPerSecondExponent;                           		// 0x0B68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShotsPerSecondAnimExponent;                       		// 0x0B6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbsoluteDamageMultiplier;                         		// 0x0B70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlowEnemyTargetPercentage;                        		// 0x0B74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeakenEnemyTargetPercentage;                      		// 0x0B78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyClearSlowTime;                               		// 0x0B7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MythicalScaleDamageStatExponent;                  		// 0x0B80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyClearWeakenTime;                             		// 0x0B84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareDamageMultiplier;                        		// 0x0B88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraNightmareDamageMultiplier;                   		// 0x0B8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MythicalScaleDamageStatType;                      		// 0x0B90 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ShootSound;                                       		// 0x0B94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ShootEffect;                                      		// 0x0B98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseHealAmount;                                   		// 0x0B9C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealAmountMultiplier;                             		// 0x0BA0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareHealingMultiplier;                       		// 0x0BA4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AltProjectileMinimumRange;                        		// 0x0BA8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealingPriorityHealthPercentage;                  		// 0x0BAC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttackAnimationAlt;                               		// 0x0BB0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShotsPerSecondBonusCap;                           		// 0x0BB8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseDamageToManaRatio;                            		// 0x0BBC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaMultiplier;                                   		// 0x0BC0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxManaPerDamage;                                 		// 0x0BC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinManaPerDamage;                                 		// 0x0BC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxManaMultiplierExponent;                        		// 0x0BCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageManaMultiplierExponent;                     		// 0x0BD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastShootProjectileTime;                          		// 0x0BD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefTargetableInterface*                  BestTargetRef;                                    		// 0x0BD8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0BDC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct UHeroEquipment_Familiar_WithProjectileAI_FDelayedShot > DelayedShots;                                     		// 0x0BE0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66160 ];

		return pClassPointer;
	};

	float GetHealAmount ( );
	void OnDunDefProjectileImpacted ( class ADunDefProjectile* aProjectile, class AActor* impactedOn );
	void NotifyEquipment_PawnTookDamage ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	void NotifyEquipment_AnimNotifyAttachment ( int NotifyID, class USkeletalMeshComponent* equipmentSkelComp );
	void ShootProjectile ( unsigned long bIsAltProjectile );
	void GetMuzzleTransformation ( class USkeletalMeshComponent* myMeshComp, struct FVector* SpawnLocation, struct FRotator* SpawnRotation );
	int GetWeaponDamage ( );
	void ApplyPrimaryDamageMultiplierDisplay ( int* StatValue );
	float GetEquipmentStatValue ( unsigned char equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp );
	void AddRandomizeValues ( float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear );
	bool AllowStatLevelUp ( unsigned char EQS, int statSubIndex, unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement );
	float GetAttackInterval ( unsigned long bIncludeShotsPerSecondExponent );
	class UClass* GetElementalDamageType ( );
	float GetProjectileElementalDamage ( );
	float GetProjectileDamage ( class ADunDefProjectile* projectileArch );
	float GetProjectileSpeed ( class ADunDefProjectile* projectileArch );
	int GetNumProjectiles ( );
	struct FRotator GetDesiredSphereRotationalPlacement ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget );
	struct FRotator GetDesiredDirection ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer );
	void ShutDown ( unsigned long isDestruction );
	void AttachedComponent ( class UPrimitiveComponent* aComp );
	void UpdateAI ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	void UpdateDelayedShots ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	class UDunDefTargetableInterface* GetBestTarget ( );
	class UDunDefTargetableInterface* GetBestHealingTarget ( float CheckHealthPercentageThreshold );
};

UClass* UHeroEquipment_Familiar_WithProjectileAI::pClassPointer = NULL;

// Class UDKGame.HeroEquipment_Familiar_Melee
// 0x0060 (0x0C4C - 0x0BEC)
class UHeroEquipment_Familiar_Melee : public UHeroEquipment_Familiar_WithProjectileAI
{
public:
	float                                              MeleeHitRadius;                                   		// 0x0BEC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeDamageMomentum;                              		// 0x0BF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MeleeDamageType;                                  		// 0x0BF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxKnockbackMultiplier;                           		// 0x0BF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackBonusLinearScale;                        		// 0x0BFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockbackBonusExpScale;                           		// 0x0C00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlsoShootProjectile : 1;                         		// 0x0C04 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ScaleMeleeDamageForHero : 1;                      		// 0x0C04 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRandomizedDamage : 1;                         		// 0x0C04 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoMeleeHealing : 1;                              		// 0x0C04 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsAttacking : 1;                                 		// 0x0C04 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              MeleeRange;                                       		// 0x0C08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleDamageStatExponent;                          		// 0x0C0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraNightmareMeleeDamageMultiplier;              		// 0x0C10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AlsoShootProjectileAnimation;                     		// 0x0C14 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScaleMeleeDamageForHeroStatType;                  		// 0x0C1C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                RandomizedDamageMultiplierMaximum;                		// 0x0C20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomizedDamageMultiplierDivisor;                		// 0x0C24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseDamageToHealRatio;                            		// 0x0C28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentDamageMultiplierBase;                    		// 0x0C2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxHealPerDamage;                                 		// 0x0C30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinHealPerDamage;                                 		// 0x0C34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxHealMultiplierExponent;                        		// 0x0C38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageHealMultiplierExponent;                     		// 0x0C3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            SwingHurtList;                                    		// 0x0C40 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66352 ];

		return pClassPointer;
	};

	void AttachedComponent ( class UPrimitiveComponent* aComp );
	void NotifyEquipment_AnimNotifyAttachment ( int NotifyID, class USkeletalMeshComponent* equipmentSkelComp );
	void ShutDown ( unsigned long isDestruction );
	void NotifyEquipment_PawnJumped ( );
	void NotifyEquipment_PawnTookDamage ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	bool isEnemyInRange ( );
	void UpdateAI ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	float GetHealMultiplier ( );
	float GetMomentumMultiplier ( );
	void UpdateAttackSwing ( float DeltaTime );
	bool AddToSwingHurtList ( class ADunDefPlayer* myOwner, class AActor* newEntry );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
};

UClass* UHeroEquipment_Familiar_Melee::pClassPointer = NULL;

// Class UDKGame.HeroEquipment_Familiar_MoneyGiver
// 0x0018 (0x0B08 - 0x0AF0)
class UHeroEquipment_Familiar_MoneyGiver : public UHeroEquipment_Familiar
{
public:
	float                                              BaseDamageToManaRatio;                            		// 0x0AF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentDamageMultiplierBase;                    		// 0x0AF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxManaPerDamage;                                 		// 0x0AF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinManaPerDamage;                                 		// 0x0AFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxManaMultiplierExponent;                        		// 0x0B00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageManaMultiplierExponent;                     		// 0x0B04 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66426 ];

		return pClassPointer;
	};

	int GetWeaponDamage ( );
	float GetEquipmentStatValue ( unsigned char equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp );
	float GetManaMultiplier ( );
	void NotifyEquipment_WeaponDidDamage ( class ADunDefPlayer* fromPlayer, class UDunDefTargetableInterface* aTarget, int Damage, struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType );
};

UClass* UHeroEquipment_Familiar_MoneyGiver::pClassPointer = NULL;

// Class UDKGame.HeroEquipment_Familiar_PawnBooster
// 0x0098 (0x0B88 - 0x0AF0)
class UHeroEquipment_Familiar_PawnBooster : public UHeroEquipment_Familiar
{
public:
	float                                              BaseBoostRange;                                   		// 0x0AF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostRangeStatBase;                               		// 0x0AF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostRangeStatExponent;                           		// 0x0AF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRangeBoostStat;                                		// 0x0AFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxEffectiveRangeBoostStat;                       		// 0x0B00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostRangeStatMultiplier;                         		// 0x0B04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostStatBase;                                    		// 0x0B08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostStatExponent;                                		// 0x0B0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseBoost;                                        		// 0x0B10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBoostStat;                                     		// 0x0B14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostStatMultiplier;                              		// 0x0B18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectSpawnInterval;                              		// 0x0B1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackAnimationChancePercent;                     		// 0x0B20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackAnimationInterval;                          		// 0x0B24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FirstBoostInterval;                               		// 0x0B28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BoostStatUpgradeInterval;                         		// 0x0B2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxNumberOfPawnsToBoost;                          		// 0x0B30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SoftMaxNumberOfPawnsToBoost;                      		// 0x0B34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MyBoostType;                                      		// 0x0B38 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BoostEffect;                                      		// 0x0B3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoostAnimName;                                    		// 0x0B40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostAnimMinInterval;                             		// 0x0B48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostAnimMaxInterval;                             		// 0x0B4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostAnimPlayRate;                                		// 0x0B50 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefTargetableInterface*                  BestTargetRef;                                    		// 0x0B54 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0B58 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UDunDefTargetableInterface* >        AdditionalTargetRefs;                             		// 0x0B5C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastEffectSpawnedTime;                            		// 0x0B68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAttackedAnimationTime;                        		// 0x0B6C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBoostAnimTimer;                               		// 0x0B70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextBoostAnimTimer;                               		// 0x0B74 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDebug : 1;                                       		// 0x0B78 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ProModeFocused : 1;                               		// 0x0B78 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                projectedRange;                                   		// 0x0B7C (0x0004) [0x0000000000000000]              
	int                                                projectedPlayers;                                 		// 0x0B80 (0x0004) [0x0000000000000000]              
	int                                                projectedBoost;                                   		// 0x0B84 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66453 ];

		return pClassPointer;
	};

	void AddRandomizeValues ( float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear );
	void NotifyOfBoostedRemoval ( class APawn* removedBoostee );
	void AttachedComponent ( class UPrimitiveComponent* aComp );
	int GetStatLevelUpAmountIterations ( unsigned char EQS, int Value, int statSubIndex );
	int GetNextStatLevelUpValue ( unsigned char EQS, int statSubIndex, unsigned long SetAsValue );
	void InitFromNetInfo ( struct FEquipmentNetInfo Info, class UObject* fromDroppedEquipment );
	bool CheckStatLevelUpIterations ( unsigned char EQS, int statSubIndex, int EquipmentLevelToCheck, float Value );
	bool AllowStatLevelUp ( unsigned char EQS, int statSubIndex, unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement );
	void NotifyEquipment_PawnAttacked ( int FireMode );
	struct FRotator GetDesiredSphereRotationalPlacement ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget );
	struct FRotator GetDesiredDirection ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	void GetFurthestAdditionalTarget ( struct FVector playerLoc, class AActor** furthestTarget, float* furthestRange );
	void UpdateAdditionalBoostTargets ( );
	void RemoveAllTargets ( );
	void ShutDown ( unsigned long isDestruction );
	class UDunDefTargetableInterface* GetBestAdditionalBoostTarget ( );
	class UDunDefTargetableInterface* GetBestTarget ( );
	float GetBoostRange ( );
	float GetPawnBoostAmount ( unsigned char boostType );
	bool HasPawnBoostingType ( unsigned char checkType );
	void GetBoostedTargets ( TArray< class APawn* >* boostedTargets );
};

UClass* UHeroEquipment_Familiar_PawnBooster::pClassPointer = NULL;

// Class UDKGame.HeroEquipment_Familiar_PlayerHealer
// 0x0034 (0x0B24 - 0x0AF0)
class UHeroEquipment_Familiar_PlayerHealer : public UHeroEquipment_Familiar
{
public:
	float                                              HealInterval;                                     		// 0x0AF0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAttackAnimationSpeed;                          		// 0x0AF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealRange;                                        		// 0x0AF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefEmitterSpawnable*                     PawnHealEffect;                                   		// 0x0AFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseHealAmount;                                   		// 0x0B00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FalloffExponent;                                  		// 0x0B04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumHealDistancePercent;                       		// 0x0B08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealAmountMultiplier;                             		// 0x0B0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NightmareHealingMultiplier;                       		// 0x0B10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseFixedHealSpeed : 1;                           		// 0x0B14 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              LastHealTime;                                     		// 0x0B18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefTargetableInterface*                  BestTargetRef;                                    		// 0x0B1C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0B20 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66598 ];

		return pClassPointer;
	};

	void ShutDown ( unsigned long isDestruction );
	void NotifyEquipment_AnimNotifyAttachment ( int NotifyID, class USkeletalMeshComponent* equipmentSkelComp );
	void DoHealing ( );
	int GetWeaponDamage ( );
	void ApplyPrimaryDamageMultiplierDisplay ( int* StatValue );
	float GetEquipmentStatValue ( unsigned char equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp );
	float GetAttackInterval ( );
	float GetHealAmount ( );
	void NotifyEquipment_PawnAttacked ( int FireMode );
	struct FRotator GetDesiredSphereRotationalPlacement ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget );
	struct FRotator GetDesiredDirection ( class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer );
	void UpdateAI ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	void TickedByPawn ( class ADunDefPlayer* PlayerOwner, float DeltaTime );
	class UDunDefTargetableInterface* GetBestTarget ( );
	void AttachedComponent ( class UPrimitiveComponent* aComp );
};

UClass* UHeroEquipment_Familiar_PlayerHealer::pClassPointer = NULL;

// Class UDKGame.IActorEventHandler
// 0x0000 (0x003C - 0x003C)
class UIActorEventHandler : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66966 ];

		return pClassPointer;
	};

	void AdjustDealtDamage ( class AActor* damagedTarget, class UClass* DamageType, struct FTraceHitInfo HitInfo, int OriginalDamage, int* inDamage, struct FVector* Momentum );
	void ReportBuffRemoved ( class UDunDefBuff* BuffRemoved );
	void ReportBuffAdded ( class UDunDefBuff* BuffAdded );
	void ReportActorDealtDamage ( int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage );
	void ReportTookDamage ( int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage );
	void ReportHealedActor ( int healedAmount, class AActor* healed );
	void ReportKilledActor ( class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem );
};

UClass* UIActorEventHandler::pClassPointer = NULL;

// Class UDKGame.IBuffModifierInterface
// 0x0000 (0x003C - 0x003C)
class UIBuffModifierInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67012 ];

		return pClassPointer;
	};

	class UIBuffModifierInterface* GetStatModifierObject ( );
	float GetStatValueByTag ( float initalValue, struct FString StatTag, class UIBuffModifierInterface* TagActor, unsigned char statType, unsigned long bBaseValueOnly );
	void InitalizeForBuff ( class UIBuffModifierInterface* ActorStatObject, int Tier, unsigned long bBaseValueOnly );
};

UClass* UIBuffModifierInterface::pClassPointer = NULL;

// Class UDKGame.IHeroChangedInterface
// 0x0000 (0x003C - 0x003C)
class UIHeroChangedInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67031 ];

		return pClassPointer;
	};

	void HeroChanged ( class UDunDefHero* newHero, class UDunDefHero* oldHero );
};

UClass* UIHeroChangedInterface::pClassPointer = NULL;

// Class UDKGame.LastDamageInfoFilter
// 0x0024 (0x0060 - 0x003C)
class ULastDamageInfoFilter : public UObject
{
public:
	TArray< class UActorFilter* >                      ActorFilter_lastDamageCauser;                     		// 0x003C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UActorFilter* >                      ActorFilter_lastWhatHitMe;                        		// 0x0048 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UActorFilter_DamageTypeComparison* > ActorFilter_lastDamageType;                       		// 0x0054 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67060 ];

		return pClassPointer;
	};

	bool IsActorAllowed ( struct FsLastDamageInfo theObject, unsigned long is_OR_filters, TArray< class ULastDamageInfoFilter* >* filters );
	bool IsAllowed ( struct FsLastDamageInfo theObject );
};

UClass* ULastDamageInfoFilter::pClassPointer = NULL;

// Class UDKGame.UI_PlayerShop
// 0x0060 (0x086C - 0x080C)
class UUI_PlayerShop : public UUI_ItemBox
{
public:
	class UUIButton*                                   RemoveFromPlayerShopButton;                       		// 0x080C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   IncreaseItemCost;                                 		// 0x0810 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ReduceItemCost;                                   		// 0x0814 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DecreaseItemCost;                                 		// 0x0818 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SetItemCostButton;                                		// 0x081C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   BuyItemButton;                                    		// 0x0820 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      ToggleAFKShopMode;                                		// 0x0824 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PlayerShopNameLabel;                              		// 0x0828 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PurchaseEquipmentManaCostLabel;                   		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    RequiresShopModeLabel;                            		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    WillRequireShopModeLabel;                         		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PlayerShopNameString;                             		// 0x0838 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnableShopString;                                 		// 0x0844 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisableShopString;                                		// 0x0850 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUIImage*                                    heroIconImage;                                    		// 0x085C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APlayerShopManager*                          myPlayerShopManager;                              		// 0x0860 (0x0004) [0x0000000000000000]              
	class UUI_EditboxPopup*                            myEditBoxPopup;                                   		// 0x0864 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUI_EditboxPopup*                            EditBoxPopupTemplate;                             		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67099 ];

		return pClassPointer;
	};

	void eventSceneActivated ( unsigned long bInitialActivation );
	void eventEditBoxPopUpCompleted ( struct FString EditBoxResult );
	void CloseWithAnimation ( );
	void eventSceneDeactivated ( );
	void ItemUpdateOccured ( class UHeroEquipment* InEquipment );
	void FolderUpdateOccured ( int FolderID, int ParentID, struct FString FolderName );
	void FolderDeletionOccured ( int FolderID );
	bool EntryEnabledCheck ( class UDataListEntryInterface* dataEntry );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void MoveUpAFolder ( );
	void UpdateItemPath ( );
	void NotifyDraggedEvent ( class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn );
	bool SupportsDraggedOntoItem ( class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn );
	void eventUpdate ( float DeltaTime );
	void RefreshEquipmentList ( int forUserID );
};

UClass* UUI_PlayerShop::pClassPointer = NULL;

// Class UDKGame.PlayerStart_Movable
// 0x0000 (0x02FC - 0x02FC)
class APlayerStart_Movable : public APlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67261 ];

		return pClassPointer;
	};

};

UClass* APlayerStart_Movable::pClassPointer = NULL;

// Class UDKGame.ScrollablePopupParent
// 0x0000 (0x003C - 0x003C)
class UScrollablePopupParent : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67485 ];

		return pClassPointer;
	};

	void RenderPopup ( class UCanvas* C );
};

UClass* UScrollablePopupParent::pClassPointer = NULL;

// Class UDKGame.UI_Trade
// 0x0140 (0x077C - 0x063C)
class UUI_Trade : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           EquipmentDataListMine;                            		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel_DataList*                           EquipmentDataListTheirs;                          		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIDataContainer_Equipment_DataList*         EquipmentDataListContainer;                       		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CloseButton;                                      		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ShowEquipmentInfoButton;                          		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CancelTrade;                                      		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   TradeHelper;                                      		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      ConfirmTradeButton;                               		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EquipmentInfo_New*                       EquipmentInfoUITemplate;                          		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    TradeManaMine;                                    		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    TradeManaTheirs;                                  		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ConfirmedMine;                                    		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ConfirmedTheirs;                                  		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    NameMine;                                         		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    NameTheirs;                                       		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    TradeTitleLabel;                                  		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ManaTitleTheirs;                                  		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ManaTitleMin;                                     		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   IncrementButton;                                  		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DecrementButton;                                  		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   SetManaButton;                                    		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   RemoveFromTradeSound;                             		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaChangeRate;                                   		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaInvestmentInterval;                           		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartRoundingTime;                                		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RoundingAmount;                                   		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MiniInvestmentInterval;                           		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ConfirmedString;                                  		// 0x06A8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnconfirmedString;                                		// 0x06B4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConfirmString;                                    		// 0x06C0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnconfirmString;                                  		// 0x06CC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeTitleString;                                 		// 0x06D8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CloseButtonString;                                		// 0x06E4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ShowItemButtonString;                             		// 0x06F0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CancelButtonString;                               		// 0x06FC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeManaString;                                  		// 0x0708 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      UnconfirmTextColor;                               		// 0x0714 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ConfirmTextColor;                                 		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EditboxPopup*                            EditBoxPopupTemplate;                             		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATradeManager*                               myTradeManager;                                   		// 0x0720 (0x0004) [0x0000000000000000]              
	class UUIButton*                                   TradePanelHelper;                                 		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIResolutionContainer*                      ResolutionContainerToResize;                      		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   MainExtentsWidget;                                		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TradeModeScalarValue;                             		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInTradeMode : 1;                                 		// 0x0734 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      WasIncrementing : 1;                              		// 0x0734 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      WasDecrementing : 1;                              		// 0x0734 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFadingIn : 1;                                    		// 0x0734 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      Decrementing : 1;                                 		// 0x0734 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      Incrementing : 1;                                 		// 0x0734 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              Timer;                                            		// 0x0738 (0x0004) [0x0000000000000000]              
	float                                              ManaInvestmentTimer;                              		// 0x073C (0x0004) [0x0000000000000000]              
	struct FHighDigitInt                               LastManaToDrop;                                   		// 0x0740 (0x0010) [0x0000000000000000]              
	float                                              LastStartIncrementTime;                           		// 0x0750 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FHighDigitInt                               ManaToDrop;                                       		// 0x0754 (0x0010) [0x0000000000000000]              
	struct FHighDigitInt                               zeroBox;                                          		// 0x0764 (0x0010) [0x0000000000000000]              
	float                                              lastTimeConfirmButton;                            		// 0x0774 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConfirmButtonInterval;                            		// 0x0778 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67679 ];

		return pClassPointer;
	};

	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void ShowEquipmentInfo ( );
	void EquipmentEntrySelected ( class UUIButton_DataListEntry* Button );
	void RefreshedList ( );
	void eventUpdate ( float DeltaTime );
	void RefreshEquipmentLists ( );
	void RemoveEquipment ( );
	void eventEditBoxPopUpCompleted ( struct FString EditBoxResult );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void PostInitialSceneUpdate ( );
	class UDunDefHero* GetHero ( );
	void InitializeForTradeManager ( class ATradeManager* aTradeManager );
	void NotifyDraggedEvent ( class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void eventSceneDeactivated ( );
	void UpdateManaToDrop ( float DeltaTime, int Sign );
	struct FHighDigitInt GetTotalMana ( );
	struct FHighDigitInt GetMaxTradeMana ( );
};

UClass* UUI_Trade::pClassPointer = NULL;

// Class UDKGame.UI_CharacterSelect
// 0x0128 (0x0764 - 0x063C)
class UUI_CharacterSelect : public UDunDefUIScene
{
public:
	TArray< class UUIImage_PlayerSelect* >             CharacterSelectionBoxes;                          		// 0x063C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UUILabel* >                          CharacterTagNames;                                		// 0x0648 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUILabel*                                    OwningTagName;                                    		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUILabel* >                          CharacterSelectionNames;                          		// 0x0658 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UUILabel* >                          CharacterSelectionLevels;                         		// 0x0664 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIButton*                                   StartButton;                                      		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   BackButton;                                       		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ExportToLocalButton;                              		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   MenuButton;                                       		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_HeroSelection*                           HeroSelectionSceneTemplate;                       		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_CreateHero*                              CreateHeroUIScene;                                		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIButton* >                         ChooseCharacterButtons;                           		// 0x0688 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      DLCSplashMacOnly : 1;                             		// 0x0694 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      hasKeyboardPlayer : 1;                            		// 0x0694 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      notAClick : 1;                                    		// 0x0694 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      OnePlayerSelected : 1;                            		// 0x0694 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsLeftKeyDown : 1;                               		// 0x0694 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIsRightKeyDown : 1;                              		// 0x0694 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	TArray< class UUIImage* >                          ControllerImages;                                 		// 0x0698 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USurface* >                          gamepadImages;                                    		// 0x06A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USurface*                                    keyboardImage;                                    		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ReopenHeroSelectionSound;                         		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_MainMenu*                                MainMenuScene;                                    		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PlayOnlineLabel;                                  		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PlayLocalLabel;                                   		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    MultiplayerModeImage;                             		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              DLCSplashUITemplateMac;                           		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              DLCSplashUITemplatePC;                            		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PressStartString;                                 		// 0x06D0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayOnlineString;                                 		// 0x06DC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayLocalString;                                  		// 0x06E8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClickToJoinString;                                		// 0x06F4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExportToLocalTitle;                               		// 0x0700 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExportToLocalDescription;                         		// 0x070C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExportedToLocalTitle;                             		// 0x0718 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExportedToLocalDescription;                       		// 0x0724 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CantAddSplitPlayerTitle;                      		// 0x0730 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CantAddSplitPlayerDescription;                		// 0x073C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChangeButtonStringTag;                            		// 0x0748 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ULocalPlayer*                                removedSinglePlayer;                              		// 0x0754 (0x0004) [0x0000000000000000]              
	struct FString                                     BoxSelectedString;                                		// 0x0758 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67899 ];

		return pClassPointer;
	};

	bool AcceptedSaveWarning ( class UUI_MessageBox* theMessageBox, struct FString ButtonPressed, int whichPlayer );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	bool eventIsGamepadOwned ( );
	bool eventAllowInputAlias ( struct FName InputKeyName, struct FName InputAliasName );
	void SetCustomValueForKismet ( int CustomValue );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	class UUIObject* GetFirstFreeCharacterBox ( );
	bool CanAddPlayer ( int ControllerId );
	void StartLocalSession ( int ControllerId );
	void OnLocalSessionCreated ( struct FName SessionName, unsigned long bWasSuccessful );
	class ULocalPlayer* CreatePlayerForController ( int ControllerId, unsigned long isKeyboard );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	bool CheckHeroForPlayer ( unsigned long forceSelect, class ULocalPlayer* thePlayer );
	class ADunDefPlayerSelectUICharacter* GetCharacterForPlayerIndex ( int PlayerIndex );
	void UpdateCharacterForIndex ( int Index );
	void ChoseHero ( class ULocalPlayer* LP, class UDunDefHero* hero );
	void UpdatePlayerSelections ( int forceSelect );
	bool AnyPlayersSelected ( );
	bool ChoseCharacter ( class UUIScreenObject* Object, int PlayerIndex );
	bool StartButtonClicked ( class UUIScreenObject* Object, int PlayerIndex );
	bool MenuButtonClicked ( class UUIScreenObject* Object, int PlayerIndex );
	bool BackButtonClicked ( class UUIScreenObject* Object, int PlayerIndex );
	void HandleKeyboardPlayerRemoved ( class UDunDefLocalPlayer* LP );
	class ULocalPlayer* GetPlayerForIndex ( int PlayerIndex );
	class UUIScreenObject* GetChooseCharacterForPlayer ( class ULocalPlayer* pl );
	void eventUpdate ( float DeltaTime );
	void NotifyControllerStatusChanged ( int ControllerId, unsigned long bConnected );
	void eventPostInitialSceneUpdate ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void eventSceneDeactivated ( );
};

UClass* UUI_CharacterSelect::pClassPointer = NULL;

// Class UDKGame.UIImage_PlayerSelect
// 0x0148 (0x05F4 - 0x04AC)
class UUIImage_PlayerSelect : public UUIImage
{
public:
	int                                                PlayerIndex;                                      		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    BackgroundImage;                                  		// 0x04B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MyMaterial;                                       		// 0x04B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MyBGMaterial;                                     		// 0x04B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PlayerNameLabel;                                  		// 0x04BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                NameLabelSelectedColor;                           		// 0x04C0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                NameLabelUnselectedColor;                         		// 0x04D0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SelectedColor;                                    		// 0x04E0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UnselectedColor;                                  		// 0x04F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SelectionParameterName;                           		// 0x0500 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UnselectedMainRingColor;                          		// 0x0508 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UnselectedGlowColor;                              		// 0x0518 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UnselectedInnerFontColor;                         		// 0x0528 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UnselectedInnerCloudColor;                        		// 0x0538 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              UnselectedOpacity;                                		// 0x0548 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SelectedMainRingColor;                            		// 0x054C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SelectedGlowColor;                                		// 0x055C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SelectedInnerFontColor;                           		// 0x056C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                SelectedInnerCloudColor;                          		// 0x057C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelectedOpacity;                                  		// 0x058C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MyMaterialInstance;                               		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MyBGMaterialInstance;                             		// 0x0594 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                CurrentMainMaterialColor;                         		// 0x0598 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentMainRingColor;                             		// 0x05A8 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentGlowColor;                                 		// 0x05B8 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentInnerFontColor;                            		// 0x05C8 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentInnerCloudColor;                           		// 0x05D8 (0x0010) [0x0000000000000000]              
	class ADunDefPlayerSelectUICharacter*              myCharacter;                                      		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      CurrentlySelected : 1;                            		// 0x05EC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              SelectedLerp;                                     		// 0x05F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67902 ];

		return pClassPointer;
	};

	void Update ( float DeltaTime );
	void Destroyed ( );
	void Created ( );
	void Unselected ( );
	void ChoseHero ( class UDunDefHero* hero );
	void Selected ( );
};

UClass* UUIImage_PlayerSelect::pClassPointer = NULL;

// Class UDKGame.UI_CreateHeroBase
// 0x0058 (0x0694 - 0x063C)
class UUI_CreateHeroBase : public UDunDefUIScene
{
public:
	TArray< struct UUI_CreateHeroBase_FHeroClassInfo > classInfo;                                        		// 0x063C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     currentNameString;                                		// 0x0648 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                selectedClass;                                    		// 0x0654 (0x0004) [0x0000000000000000]              
	int                                                templateIndex;                                    		// 0x0658 (0x0004) [0x0000000000000000]              
	int                                                CurrentCostumeIndex;                              		// 0x065C (0x0004) [0x0000000000000000]              
	struct FLinearColor                                color1;                                           		// 0x0660 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                color2;                                           		// 0x0670 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                color3;                                           		// 0x0680 (0x0010) [0x0000000000000000]              
	class USoundCue*                                   CreateHeroSound;                                  		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68003 ];

		return pClassPointer;
	};

	void ConfirmCreateHero ( );
	void CreateHero ( );
	void FindOutAllAboutHeroes ( );
	class UDunDefHeroManager* GetHeroManager ( );
};

UClass* UUI_CreateHeroBase::pClassPointer = NULL;

// Class UDKGame.UI_CreateHero
// 0x0130 (0x07C4 - 0x0694)
class UUI_CreateHero : public UUI_CreateHeroBase
{
public:
	class UUIObject*                                   class_Panel;                                      		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              class_PreviousButton;                             		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              class_NextButton;                                 		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              class_OkButton;                                   		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              CostumeBuyButton;                                 		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              HeroBuyButton;                                    		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   class_BackButton;                                 		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    class_RenderTarget;                               		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    class_Name;                                       		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    CostumeUnlockDescriptionLabel;                    		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    class_Description;                                		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    class_DescriptionLarge;                           		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    LockedByDemoLabel;                                		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUILabel* >                          SkillLabels;                                      		// 0x06C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USoundCue* >                         HeroDescriptionSounds;                            		// 0x06D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIImage*                                    LockedImage;                                      		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   LockedInDemoSound;                                		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AdvanceToNextPageSound;                           		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ReturnToPreviousPageSound;                        		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CycleColorTemplateSound;                          		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    ControllerImage;                                  		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USurface* >                          gamepadImages;                                    		// 0x06F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USurface*                                    keyboardImage;                                    		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   color_Panel;                                      		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    color_Primary;                                    		// 0x070C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    color_Secondary;                                  		// 0x0710 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    color_Accessory;                                  		// 0x0714 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              color_NextButton;                                 		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              color_PreviousButton;                             		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    color_RenderTarget;                               		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              color_NextTemplate;                               		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              color_PreviousTemplate;                           		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    color_TemplateName;                               		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ChangeCostumeLabel;                               		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              ChangeCostumeButton;                              		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   color_selectedSlider;                             		// 0x0738 (0x0004) [0x0000000000000000]              
	class UUIObject*                                   name_Panel;                                       		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIEditBox*                                  name_NameBox;                                     		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              name_EditButton;                                  		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              name_RandomButton;                                		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              name_PreviousButton;                              		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              name_NextButton;                                  		// 0x0750 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    name_RenderTarget;                                		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   EditNameButton;                                   		// 0x0758 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FinishEditingHeroSound;                           		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MSG_PickNameTitle;                                		// 0x0760 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_PickNameDescription;                          		// 0x076C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       BadStringAnimation;                               		// 0x0778 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ADunDefPlayerSelectUICharacter*              renderCharacter;                                  		// 0x0780 (0x0004) [0x0000000000000000]              
	class UDunDefHero*                                 editingHero;                                      		// 0x0784 (0x0004) [0x0000000000000000]              
	class UDunDefHero*                                 stolenHero;                                       		// 0x0788 (0x0004) [0x0000000000000000]              
	struct FString                                     customTemplateName;                               		// 0x078C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChangeCostumeButtonName;                          		// 0x0798 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyCostumeButtonName;                             		// 0x07A4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyHeroButtonName;                                		// 0x07B0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	float                                              AudioTimer;                                       		// 0x07BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsLeftKeyDown : 1;                               		// 0x07C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsRightKeyDown : 1;                              		// 0x07C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68002 ];

		return pClassPointer;
	};

	bool eventIsKeyboardOwned ( );
	bool eventIsGamepadOwned ( );
	void EvaluateKeyboardInput ( struct FString* keyboardResult );
	void FindNextSubstring ( struct FString subStr, unsigned long bRemove, int* trackPos, int* auxTrackPos, struct FString* keyboardResult );
	void RemoveCharacter ( int Index, struct FString* keyboardResult );
	void eventSceneDeactivated ( );
	void Update ( float DeltaTime );
	void CloseWithAnimation ( );
	void Exit ( );
	void FinishEditingHero ( );
	void KeyboardInputRejected ( struct FString Result );
	void eventNotifyValueChanged ( class UUIObject* Widget, int PlayerIndex );
	bool eventNotifyButtonClicked ( class UUIScreenObject* Widget, int PlayerIndex );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool InterceptedInputKey ( struct FInputEventParameters* EventParms );
	void EditHero ( class UDunDefHero* toEdit );
	class ADunDefPlayerSelectUICharacter* GetCharacterForPlayerIndex ( int PlayerIndex );
	void SetRandomName ( );
	void UpdateRenderCharacter ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
};

UClass* UUI_CreateHero::pClassPointer = NULL;

// Class UDKGame.UI_HeroInfoNew
// 0x00B8 (0x0700 - 0x0648)
class UUI_HeroInfoNew : public UUI_HeroInfo
{
public:
	struct FName                                       HideInventoryAnim;                                		// 0x0648 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShowInventoryAnim;                                		// 0x0650 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUI_EquipmentInfo*                           EquipmentInfoUITemplate;                          		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    HeroNameLabel;                                    		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    HeroLevelLabel;                                   		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   RemoveManaButton;                                 		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ResetButton;                                      		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   NextPageButton;                                   		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   PrevPageButton;                                   		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_DropMana*                                DropManaUITemplate;                               		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelUpFinishedAnim;                              		// 0x0678 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelUpAvailableAnim;                             		// 0x0680 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ExtraBackgroundLayerAnim;                         		// 0x0688 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUIScriptWidget_HeroStat* >          HeroStatButtons;                                  		// 0x0690 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUILabel*                                    LevelUpInBuildPhaseLabel;                         		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    PointsToSpendLabel;                               		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScreenObject*                             PointsToSpendPanel;                               		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_HeroInfoExpBar*              ExpBar;                                           		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   tCloseButton;                                     		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   RemoveAllGearButton;                              		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   RevertPointSound;                                 		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    TowersLabel;                                      		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LevelString;                                      		// 0x06BC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelUpPreString;                                 		// 0x06C8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelUpPostString;                                		// 0x06D4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CloseSceneInputCommand;                           		// 0x06E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      InventoryHidden : 1;                              		// 0x06EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsLevelUpAvailable : 1;                          		// 0x06EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShiftHeld : 1;                                   		// 0x06EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bControlHeld : 1;                                 		// 0x06EC (0x0004) [0x0000000000000000] [0x00000008] 
	class UUIScriptWidget_EquipmentIconButton*         lastEquipmentIcon;                                		// 0x06F0 (0x0004) [0x0000000000000000]              
	int                                                PointsToSpend;                                    		// 0x06F4 (0x0004) [0x0000000000000000]              
	int                                                OriginalPointsToSpend;                            		// 0x06F8 (0x0004) [0x0000000000000000]              
	int                                                NumLevelUps;                                      		// 0x06FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68021 ];

		return pClassPointer;
	};

	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void RemoveAllGear ( );
	void CloseEquipmentScenes ( );
	float GetTotalMana ( );
	void eventUpdate ( float DeltaTime );
	bool CanLevelUpStat ( unsigned char Stat, int numPoints, unsigned char* bDoesStatForceRequirement );
	void RemovePoint ( class UUIScriptWidget_HeroStat* statButton );
	void SpendPoint ( class UUIScriptWidget_HeroStat* statButton, unsigned char Stat );
	void AllocatePointsToStats ( );
	void ResetLevelUpAllocations ( );
	void UpdateLevelUp ( float DeltaTime );
	void FinishLevelUp ( );
	void ShowLevelUpAvailable ( );
	void ShowInventory ( );
	void HideInventory ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void InitializeForHero ( class UDunDefHero* hero, unsigned long IsRemoteHero );
	void CloseWithAnimation ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
};

UClass* UUI_HeroInfoNew::pClassPointer = NULL;

// Class UDKGame.UI_CreateHeroInGame
// 0x0088 (0x071C - 0x0694)
class UUI_CreateHeroInGame : public UUI_CreateHeroBase
{
public:
	class UUIObject*                                   class_Panel;                                      		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   class_PreviousButton;                             		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   class_NextButton;                                 		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   class_OkButton;                                   		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   class_CancelButton;                               		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              HeroBuyButton;                                    		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    class_Name;                                       		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    class_DescriptionLarge;                           		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    class_Description;                                		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    LockedByDemoLabel;                                		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    HeroIcon;                                         		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   HeroMaterial;                                     		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    LockedImage;                                      		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UUILabel* >                          SkillLabels;                                      		// 0x06C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   LockedInDemoSound;                                		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CycleHeroSound;                                   		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MyHeroMaterial;                                   		// 0x06DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FHeroColorTemplate                          aColorTemplate;                                   		// 0x06E0 (0x003C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68418 ];

		return pClassPointer;
	};

	bool eventNotifyButtonClicked ( class UUIScreenObject* Widget, int PlayerIndex );
	void eventSceneActivated ( unsigned long bInitialActivation );
};

UClass* UUI_CreateHeroInGame::pClassPointer = NULL;

// Class UDKGame.UI_CustomizeCrystal
// 0x00A8 (0x06E4 - 0x063C)
class UUI_CustomizeCrystal : public UDunDefUIScene
{
public:
	class UUILabelButton*                              PreviousCoreType;                                 		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              NextCoreType;                                     		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    nameLabel;                                        		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    requirementLabel;                                 		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    mainColor;                                        		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    auraColor;                                        		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    soulColor;                                        		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabelButton*                              BackButton;                                       		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CycleCoreSound;                                   		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CycleCoreColorSound;                              		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AcceptCrystalCoreValidSound;                      		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AcceptCrystalCoreInvalidSound;                    		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIObject*                                   MainColorPanel;                                   		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUISlider*                                   selectedSlider;                                   		// 0x0670 (0x0004) [0x0000000000000000]              
	int                                                coreIndex;                                        		// 0x0674 (0x0004) [0x0000000000000000]              
	int                                                originalCoreIndex;                                		// 0x0678 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                color1;                                           		// 0x067C (0x0010) [0x0000000000000000]              
	struct FLinearColor                                color2;                                           		// 0x068C (0x0010) [0x0000000000000000]              
	struct FLinearColor                                color3;                                           		// 0x069C (0x0010) [0x0000000000000000]              
	TArray< class UStaticMeshComponent* >              componentsToHide;                                 		// 0x06AC (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class AActor*                                      OldViewTarget;                                    		// 0x06B8 (0x0004) [0x0000000000000000]              
	class USeqAct_Interp*                              activeMatinee;                                    		// 0x06BC (0x0004) [0x0000000000000000]              
	class ADunDefCrystalCore*                          Core;                                             		// 0x06C0 (0x0004) [0x0000000000000000]              
	class ACameraActor*                                crystalCam;                                       		// 0x06C4 (0x0004) [0x0000000000000000]              
	struct FString                                     LockedString;                                     		// 0x06C8 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequiredString;                                   		// 0x06D4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      locked : 1;                                       		// 0x06E0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68467 ];

		return pClassPointer;
	};

	void eventSceneDeactivated ( );
	void ShutDown ( unsigned long saveChanges );
	void SetCoreIndex ( int Index );
	void Update ( float DeltaTime );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void eventNotifyValueChanged ( class UUIObject* Widget, int PlayerIndex );
	void UpdateColors ( unsigned long SetSliders );
	bool eventNotifyButtonClicked ( class UUIScreenObject* Widget, int PlayerIndex );
	void UISetup ( );
	void LevelSetup ( );
	void CoreSetup ( );
	class UDunDefHeroManager* GetHeroManager ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
};

UClass* UUI_CustomizeCrystal::pClassPointer = NULL;

// Class UDKGame.UI_DropMana
// 0x0054 (0x0690 - 0x063C)
class UUI_DropMana : public UDunDefUIScene
{
public:
	class UUIButton*                                   DecrementButton;                                  		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   IncrementButton;                                  		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmButton;                                    		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   CancelButton;                                     		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      DropAllButton;                                    		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ManaLabel;                                        		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaChangeRate;                                   		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LobbyManaChangeMultiplier;                        		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManaInvestmentInterval;                           		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartRoundingTime;                                		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RoundingAmount;                                   		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DropAllString;                                    		// 0x0668 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	float                                              MiniInvestmentInterval;                           		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ManaToDrop;                                       		// 0x0678 (0x0004) [0x0000000000000000]              
	unsigned long                                      WasIncrementing : 1;                              		// 0x067C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      WasDecrementing : 1;                              		// 0x067C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      Decrementing : 1;                                 		// 0x067C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      Incrementing : 1;                                 		// 0x067C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bFadingIn : 1;                                    		// 0x067C (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              Timer;                                            		// 0x0680 (0x0004) [0x0000000000000000]              
	float                                              ManaInvestmentTimer;                              		// 0x0684 (0x0004) [0x0000000000000000]              
	int                                                LastManaToDrop;                                   		// 0x0688 (0x0004) [0x0000000000000000]              
	float                                              LastStartIncrementTime;                           		// 0x068C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68557 ];

		return pClassPointer;
	};

	void PostInitialize ( );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void DropBankedMana ( );
	void eventUpdate ( float DeltaTime );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void eventSceneDeactivated ( );
	void UpdateManaToDrop ( float DeltaTime, int Sign );
	float GetTotalMana ( );
};

UClass* UUI_DropMana::pClassPointer = NULL;

// Class UDKGame.UI_EditboxPopup
// 0x0050 (0x068C - 0x063C)
class UUI_EditboxPopup : public UDunDefUIScene
{
public:
	unsigned long                                      bShowConsoleKeyboardUIOnStartup : 1;              		// 0x063C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceToAlphaNumeric : 1;                         		// 0x063C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowEscapeToCancel : 1;                         		// 0x063C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShownKeyboard : 1;                               		// 0x063C (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              ShowConsoleKeyboardUIStartDelay;                  		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIEditBox*                                  MyEditBox;                                        		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   EditStringButton;                                 		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ConfirmButton;                                    		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    CustomStringLabel;                                		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ConsoleEditBoxPopupDescription;                   		// 0x0654 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConsoleEditBoxPopupTitleText;                     		// 0x0660 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       GamepadButtonToOpenKeyboard;                      		// 0x066C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AltOpeningAnimation;                              		// 0x0674 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BadStringAnimation;                               		// 0x067C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinimumCharactersNumber;                          		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              OwnerScene;                                       		// 0x0688 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68609 ];

		return pClassPointer;
	};

	void SetMinimumCharacters ( int NewMinimum );
	bool eventIsKeyboardOwned ( );
	bool eventIsGamepadOwned ( );
	bool ClickedEditBox ( class UUIScreenObject* EventObject, int PlayerIndex );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void eventPostInitialSceneUpdate ( );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void ShowConsoleKeyboard ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void EvaluateKeyboardInput ( struct FString* keyboardResult );
	void eventUpdate ( float DeltaTime );
	void eventCloseWithAnimation ( );
	void SetOwnerAndDefaultString ( class UDunDefUIScene* theOwner, struct FString defaultString, struct FString defaultLabel );
};

UClass* UUI_EditboxPopup::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_MaterialInstance
// 0x001C (0x04E8 - 0x04CC)
class UUIScriptWidget_MaterialInstance : public UUIScriptWidget
{
public:
	class UMaterialInstanceConstant*                   MICSurface;                                       		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMICFloatParam >                    MICFloatParams;                                   		// 0x04D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMICVectorParam >                   MICVectorParams;                                  		// 0x04DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68750 ];

		return pClassPointer;
	};

	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void eventRenderEditor ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void SetMICVectorParam ( struct FLinearColor Value, struct FName ParamName, int useParamIndex );
	void SetMICFloatParam ( float Value, struct FName ParamName, int useParamIndex );
};

UClass* UUIScriptWidget_MaterialInstance::pClassPointer = NULL;

// Class UDKGame.UIDataContainer_Equipment
// 0x0014 (0x0488 - 0x0474)
class UUIDataContainer_Equipment : public UUIObject
{
public:
	unsigned long                                      bIsPlayerShop : 1;                                		// 0x0474 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsRemoteHero : 1;                                 		// 0x0474 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCompareStats : 1;                                		// 0x0474 (0x0004) [0x0000000000000000] [0x00000004] 
	class UDunDefHero*                                 MyHero;                                           		// 0x0478 (0x0004) [0x0000000000000000]              
	class UHeroEquipment*                              myEquipment;                                      		// 0x047C (0x0004) [0x0000000000000000]              
	class UHeroEquipment*                              MyHeroEquipmentOfType;                            		// 0x0480 (0x0004) [0x0000000000000000]              
	class UHeroEquipment*                              OtherComparisonEquipment;                         		// 0x0484 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68761 ];

		return pClassPointer;
	};

	class UDunDefHero* GetHero ( );
	class UHeroEquipment* GetComparisonEquipment ( class UUIScriptWidget_EquipmentIconButton* equipmentButton );
	class UHeroEquipment* GetEquipment ( class UUIScriptWidget_EquipmentIconButton* equipmentButton );
	void InitializeEquipmentData ( class UDunDefHero* theHero, class UHeroEquipment* theEquipment, unsigned long compareStats, unsigned long bIsRemoteHero, class UHeroEquipment* theOtherComparisonEquipment );
};

UClass* UUIDataContainer_Equipment::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_EquipmentStat
// 0x0144 (0x0708 - 0x05C4)
class UUIScriptWidget_EquipmentStat : public UUIScriptWidget_Button
{
public:
	unsigned long                                      IsDamageResistanceStat : 1;                       		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsEquipmentStat : 1;                              		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IsInputUI : 1;                                    		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPreviewUpgradeEffect : 1;                        		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      AllowStatLevelUp : 1;                             		// 0x05C4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      FoundStat : 1;                                    		// 0x05C4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      LastFullEquipmentSet : 1;                         		// 0x05C4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bShift : 1;                                       		// 0x05C4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x05C4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	int                                                StatIndex;                                        		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleX;                                 		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleY;                                 		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextCenterOffsetX;                                		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ResistanceTextCenterOffsetX;                      		// 0x05D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextCenterOffsetY;                                		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ResistanceTextCenterOffsetY;                      		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconCenterOffsetX;                                		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconCenterOffsetY;                                		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSizeX;                                        		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSizeY;                                        		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    EditorPreviewStatIcon;                            		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AltTooltipTextScale;                              		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TestStatDescription;                              		// 0x05FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AltToolTipOwnerOffsetX;                           		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AltToolTipOwnerOffsetY;                           		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeTextCenterOffsetX;                         		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeTextCenterOffsetY;                         		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeIconCenterOffsetY;                         		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeIconCenterOffsetX;                         		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeIconWidth;                                 		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeIconHeight;                                		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PercentageSignScale;                              		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeTextScale;                                 		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      UpgradeTextColor;                                 		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UpgradeTextGradientColor;                         		// 0x0634 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeTextBounceSpeed;                           		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    UpgradeOverlay;                                   		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeButtonBounceSpeed;                         		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                StatLevelUpFocusedBGColor;                        		// 0x0650 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      StateLevelUpTextColor;                            		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      StatFullEquipmentBoostedTextColor;                		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      AltTextColor;                                     		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AltTextGradientColor;                             		// 0x066C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      StatComparisonTextColors[ 0x3 ];                  		// 0x067C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                StatComparisonTextGradientColor;                  		// 0x0688 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UpgradedStatIconBGColor;                          		// 0x0698 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ClickedForUpgradeAnimation;                       		// 0x06A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ProClickedForUpgradeAnimation;                    		// 0x06B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighlightAfterUpgradingTime;                      		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DamageResistanceString;                           		// 0x06BC (0x000C) [0x000000000040A000]              ( CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BonusString;                                      		// 0x06C8 (0x000C) [0x000000000040A000]              ( CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradeString;                                    		// 0x06D4 (0x000C) [0x000000000040A000]              ( CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DamageResistancePercentSign;                      		// 0x06E0 (0x000C) [0x000000000040A000]              ( CPF_Transient | CPF_Localized | CPF_NeedCtorLink )
	class UHeroEquipment*                              LastEquipment;                                    		// 0x06EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      equipmentStatType;                                		// 0x06F0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      HeroStatType;                                     		// 0x06F1 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      damageResistanceType;                             		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIDataContainer_Equipment*                  MyDataContainer;                                  		// 0x06F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DontDrawToolTipTimer;                             		// 0x06FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                lastValue;                                        		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              lastTimeChecked;                                  		// 0x0704 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68827 ];

		return pClassPointer;
	};

	void LostFocus ( );
	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	void ApplyLevelUp ( struct FString UserEquipmentName, struct FString UserForgerName, class UHeroEquipment* Equipment, int numUpgrades );
	struct FString GetStatDescription ( );
	struct FString GetToolTipString ( );
	struct FLinearColor GetTextGradientColor ( unsigned long bEnabled );
	struct FColor GetStatTextDrawColor ( unsigned long bEnabled, unsigned long isNegative );
	float GetScaleMultiplier ( );
	struct FLinearColor GetBackgroundDrawColor ( unsigned long bEnabled );
	void ApplyStatDisplayAdd ( class UHeroEquipment* Equipment, int* Value );
	void ApplyStatDisplayMult ( class UHeroEquipment* Equipment, int* Value );
	int GetStatValue ( class UHeroEquipment* Equipment );
	int GetUpgradedStatValue ( );
	bool CheckAllowLevelup ( class UHeroEquipment* Equipment, unsigned long IsInForgeUI, unsigned long ProUpgradeMode );
	bool ShouldCensorEquipment ( );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	bool HasEnoughBankManaForUpgrade ( );
	bool IsProUpgradeMode ( );
	struct FLinearColor GetFocusedBGColor ( );
	class UDunDefHero* GetHero ( );
	class UHeroEquipment* GetEquipment ( );
	class UUIDataContainer_Equipment* GetDataContainer ( );
};

UClass* UUIScriptWidget_EquipmentStat::pClassPointer = NULL;

// Class UDKGame.UI_MultiplayerMenu
// 0x0124 (0x0760 - 0x063C)
class UUI_MultiplayerMenu : public UDunDefUIScene
{
public:
	struct FString                                     MSG_NoGamesFoundTitle;                            		// 0x063C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_NoGamesFoundDescription;                      		// 0x0648 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CreateGameFailedTitle;                        		// 0x0654 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CreateGameFailedDescription;                  		// 0x0660 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CreatingGameTitle;                            		// 0x066C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CreatingGameDescription;                      		// 0x0678 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoiningGameTitle;                             		// 0x0684 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_JoiningGameDescription;                       		// 0x0690 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_SearchFailedTitle;                            		// 0x069C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_SearchFailedDescription;                      		// 0x06A8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_NoGamesQuickMatchTitle;                       		// 0x06B4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_NoGamesQuickMatchDescription;                 		// 0x06C0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_SearchingForGamesTitle;                       		// 0x06CC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_SearchingForGamesDescription;                 		// 0x06D8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CreatePrivateMatchTitle;                      		// 0x06E4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CreatePrivateMatchDescription;                		// 0x06F0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUIButton_Scripted*                          btnQuickMatch;                                    		// 0x06FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnCustomMatch;                                   		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnPrivateMatch;                                  		// 0x0704 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnShopMatch;                                     		// 0x0708 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnBack;                                          		// 0x070C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIButton_Scripted*                          btnManageInvites;                                 		// 0x0710 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0714 (0x0004) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0718 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x071C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UDataStoreClient*                            DSClient;                                         		// 0x0720 (0x0004) [0x0000000000000000]              
	class UUIDataStore_OnlineGameSettings*             SettingsDataStore;                                		// 0x0724 (0x0004) [0x0000000000000000]              
	class UUIDataStore_OnlineGameSearch*               SearchDataStore;                                  		// 0x0728 (0x0004) [0x0000000000000000]              
	int                                                curGameIndex;                                     		// 0x072C (0x0004) [0x0000000000000000]              
	unsigned long                                      isLAN : 1;                                        		// 0x0730 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      justCanceledJoin : 1;                             		// 0x0730 (0x0004) [0x0000000000000000] [0x00000002] 
	class USoundCue*                                   SearchingForGamesSound;                           		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    MultiplayerModeImage;                             		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   DefenderStoreButton;                              		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_GameSpyLogin*                            GameSpyLoginScene;                                		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_PasswordPrompt*                          PasswordPrompt;                                   		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PartySessionsString;                              		// 0x0748 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUILabelButton*                              PartySessionsButton;                              		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JoinRetryTimer;                                   		// 0x0758 (0x0004) [0x0000000000000000]              
	float                                              JoinRetryDelay;                                   		// 0x075C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69262 ];

		return pClassPointer;
	};

	bool eventIsGamepadOwned ( );
	bool eventIsKeyboardOwned ( );
	void OnQuickMatchJoinComplete ( struct FName SessionName, unsigned long wasSuccessful );
	void OnCreateComplete ( struct FName SessionName, unsigned long wasSuccessful );
	void OnDestroyForCancelComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void CleanupSession ( );
	bool OnCreateCancelled ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void ShowCancelCreateButton ( );
	void DoQuickMatchCreate ( struct FString withGameName );
	bool OnQuickMatchCreatePrompt ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	bool OnCancelQuickMatchJoin ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	bool OnCancelQuickMatchSearch ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	bool JoinNextGame ( );
	void OnQuickMatchSearchComplete ( unsigned long wasSuccessful );
	void StartQuickMatch ( );
	void Update ( float DeltaTime );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool OnButtonClicked ( class UUIScreenObject* EventObject, int PlayerIndex );
	bool OnPrivateMatchConfirmClicked ( class UUI_MessageBox* Sender, struct FString ButtonPressed, int PlayerIndex );
	void CreatePrivateMatch ( struct FString withPassword );
	void SetupDefaultOnlineSettings ( );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long initialActivation );
};

UClass* UUI_MultiplayerMenu::pClassPointer = NULL;

// Class UDKGame.UIPanel_Leaderboard
// 0x0184 (0x0604 - 0x0480)
class UUIPanel_Leaderboard : public UUIPanel
{
public:
	class UUILabel*                                    leaderboardLabel;                                 		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIList*                                     LeaderboardList;                                  		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    leaderboardTitle;                                 		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ViewMode;                                         		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    GameMode;                                         		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    retrieveLabel;                                    		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    gameModePanel;                                    		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          nextMode;                                         		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          PrevMode;                                         		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          nextGameMode;                                     		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          prevGameMode;                                     		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                myEntryTextColor;                                 		// 0x04AC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ToggleViewModeTexture;                            		// 0x04BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ToggleGameModeTexture;                            		// 0x04C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    ToggleModeImage;                                  		// 0x04C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    ToggleGameModeImage;                              		// 0x04C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    gamepadScrollFeedback;                            		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RowCount;                                         		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     entryNotFoundString;                              		// 0x04D4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     emptyLeaderboardString;                           		// 0x04E0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     modeString;                                       		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameModeString;                                   		// 0x04F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ULocalPlayer* >                      localPlayers;                                     		// 0x0504 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LocalPlayerIndex;                                 		// 0x0510 (0x0004) [0x0000000000000000]              
	int                                                gameModeIndex;                                    		// 0x0514 (0x0004) [0x0000000000000000]              
	struct FStatHeroInfo                               myHeroInfo;                                       		// 0x0518 (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TopRankingsView;                                  		// 0x0568 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendsView;                                      		// 0x0574 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InfiniteWaveString;                               		// 0x0580 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RetrieveString;                                   		// 0x058C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     pureStrategyString;                               		// 0x0598 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     campaignString;                                   		// 0x05A4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChallengeString;                                  		// 0x05B0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MyScoreString;                                    		// 0x05BC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      IsRetrieving : 1;                                 		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ScrolledUp : 1;                                   		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      initialActivation : 1;                            		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      filterSet : 1;                                    		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      keyboardOwner : 1;                                		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      isShown : 1;                                      		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      shouldFocusList : 1;                              		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      noExactRecord : 1;                                		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      GameModeToggling : 1;                             		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bReadPending : 1;                                 		// 0x05C8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      needsQueuedRead : 1;                              		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000400] 
	class UUILabel*                                    gamerCardFeedbackLabel;                           		// 0x05CC (0x0004) [0x0000000000000000]              
	int                                                RetryLimit;                                       		// 0x05D0 (0x0004) [0x0000000000000000]              
	int                                                RetryCount;                                       		// 0x05D4 (0x0004) [0x0000000000000000]              
	int                                                nonExactHeroLevel;                                		// 0x05D8 (0x0004) [0x0000000000000000]              
	int                                                localPlayerAdjustedRecord;                        		// 0x05DC (0x0004) [0x0000000000000000]              
	struct FString                                     nonExactHeroName;                                 		// 0x05E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ControllerPending;                                		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              retryTimer;                                       		// 0x05F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FArchetypeToHeroClassMapping >      heroClassNames;                                   		// 0x05F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                queuedReadIndex;                                  		// 0x0600 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69388 ];

		return pClassPointer;
	};

	void SetGamercardFeedbackLabel ( class UUILabel* labelToSet );
	void ShowGamercard ( unsigned char ControllerIndex );
	void ApplyColumnFormatting ( int CellIndex, struct FString* CellValue );
	struct FArchetypeToHeroClassMapping FindHeroClassMapping ( struct FString archetypeName );
	void SetViewModeForLevel ( );
	void ToggleGameMode ( int Dir );
	void ToggleMode ( int Dir );
	void ViewLocalPlayer ( );
	void ViewTopRankings ( );
	void ViewFriends ( );
	void SetViewModeLabel ( );
	void ClearFilter ( );
	void ResetFilterString ( );
	void SetFilterString ( class APlayerController* Player );
	void ScrollFailed ( int Direction );
	int FindMyRecord ( );
	void SetRetrieving ( unsigned long retrieving );
	void OnlineReadComplete ( unsigned long bWasSuccessful );
	void OnReadComplete ( unsigned long bWasSuccessful );
	void QueueNextRead ( int ControllerId );
	void CheckMinimumRecords ( int selectedRecord );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void SetTitle ( );
	int GetPlayModeFromString ( struct FString LeaderboardName );
	int GetDifficultyFromString ( struct FString LeaderboardName );
	void UpdateLeaderboard ( float DeltaTime );
	bool AttemptRead ( int ControllerId );
	void AddHighlightedOwner ( struct FString leaderboardEntryOwner );
	void HighlightLocalEntries ( );
	void RemovePlayersWithNoHeroes ( );
	struct FString GetLocalPlayerName ( class ULocalPlayer* curPlayer );
	void Deactivate ( );
	void HideModeToggle ( );
	void ShowModeToggle ( );
	void HideGameModeToggle ( unsigned long HidePanel );
	void ShowGameModeToggle ( );
	bool Activate ( unsigned long listFocus );
};

UClass* UUIPanel_Leaderboard::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_GameStatsPopup
// 0x0030 (0x04FC - 0x04CC)
class UUIScriptWidget_GameStatsPopup : public UUIScriptWidget
{
public:
	class USurface*                                    BackgroundTex;                                    		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BackgroundColor;                                  		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    clipPanel;                                        		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   BorderBuffer;                                     		// 0x04D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       PopupFont;                                        		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UScrollablePopupParent*                      statsScene;                                       		// 0x04E4 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x04E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              scrollStart;                                      		// 0x04EC (0x0004) [0x0000000000000000]              
	float                                              scrollMin;                                        		// 0x04F0 (0x0004) [0x0000000000000000]              
	float                                              scrollSpeed;                                      		// 0x04F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      visible : 1;                                      		// 0x04F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      scrollUp : 1;                                     		// 0x04F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      scrollDown : 1;                                   		// 0x04F8 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69405 ];

		return pClassPointer;
	};

	void SetScrollBoundary ( float newScrollMin );
	void UpdateScrollAmount ( float Amount );
	void UpdateScroll ( float Dir, float DeltaTime );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void SetScene ( class UScrollablePopupParent* Scene );
};

UClass* UUIScriptWidget_GameStatsPopup::pClassPointer = NULL;

// Class UDKGame.UIImage_HealthBar
// 0x007C (0x0528 - 0x04AC)
class UUIImage_HealthBar : public UUIImage
{
public:
	float                                              LastHealthPercent;                                		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   theMIC;                                           		// 0x04B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTakeDamageTime;                               		// 0x04B4 (0x0004) [0x0000000000000000]              
	float                                              HealthFlashInterp;                                		// 0x04B8 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                MaterialColor;                                    		// 0x04BC (0x0010) [0x0000000000000000]              
	class UUILabel*                                    NumbersLabel;                                     		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    NumbersLabelMax;                                  		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FlashOnDecrease : 1;                              		// 0x04D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInterpolateValue : 1;                            		// 0x04D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      onlyDisplayCurrentValueOnLabel : 1;               		// 0x04D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bOnlyInterpUp : 1;                                		// 0x04D4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              InterpSpeed;                                      		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreviousCurrentValue;                             		// 0x04DC (0x0004) [0x0000000000000000]              
	int                                                PreviousMaxValue;                                 		// 0x04E0 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                OriginalHealthColor;                              		// 0x04E4 (0x0010) [0x0000000000000000]              
	struct FString                                     LabelPreTextToAppend;                             		// 0x04F4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LabelPostTextToAppend;                            		// 0x0500 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UMaterialInterface*                          BarMaterial;                                      		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpCurrentPercent;                             		// 0x0510 (0x0004) [0x0000000000000000]              
	float                                              InterpTargetPercent;                              		// 0x0514 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                LastHealthColor;                                  		// 0x0518 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69520 ];

		return pClassPointer;
	};

	void SetHealthPercent ( float healthPercent, int CurrentValue, int MaxValue, unsigned long bUseString, struct FString labelOverride, unsigned long overrideBarColor, struct FLinearColor barColorToUse, unsigned long overrideTextColor, struct FLinearColor textColorToUse, unsigned long bForceUpdate );
	void eventUpdate ( float DeltaTime );
	void Created ( );
};

UClass* UUIImage_HealthBar::pClassPointer = NULL;

// Class UDKGame.UIImage_ProgressBar
// 0x0018 (0x0540 - 0x0528)
class UUIImage_ProgressBar : public UUIImage_HealthBar
{
public:
	struct FName                                       BarColorParamName;                                		// 0x0528 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                LastProgressBarColor;                             		// 0x0530 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69519 ];

		return pClassPointer;
	};

	void SetProgress ( float Percent, struct FLinearColor ProgressBarColor );
};

UClass* UUIImage_ProgressBar::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_InvisibleWidget
// 0x0008 (0x04D4 - 0x04CC)
class UUIScriptWidget_InvisibleWidget : public UUIScriptWidget
{
public:
	class UUI_GameStats*                               statsScene;                                       		// 0x04CC (0x0004) [0x0000000000000000]              
	int                                                selectorIndex;                                    		// 0x04D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69685 ];

		return pClassPointer;
	};

	void eventActiveStateChanged ( class UUIObject* Sender, int PlayerIndex, class UUIState* NewState, class UUIState* OldState );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
};

UClass* UUIScriptWidget_InvisibleWidget::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_HeroStat
// 0x00F0 (0x06B4 - 0x05C4)
class UUIScriptWidget_HeroStat : public UUIScriptWidget_Button
{
public:
	unsigned long                                      IsDamageResistanceStat : 1;                       		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEditorPreviewLevelUp : 1;                        		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IsHeroSceneButton : 1;                            		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoesStatHaveLevelRequirement : 1;                		// 0x05C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      statType;                                         		// 0x05C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      damageResistanceType;                             		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleX;                                 		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleY;                                 		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextCenterOffsetX;                                		// 0x05D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextCenterOffsetY;                                		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconCenterOffsetX;                                		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconCenterOffsetY;                                		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSizeX;                                        		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSizeY;                                        		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    EditorPreviewStatIcon;                            		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    LevelUpOverlay;                                   		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeTextCenterOffsetX;                         		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeTextCenterOffsetY;                         		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeTextScale;                                 		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      UpgradeTextColor;                                 		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UpgradeTextGradientColor;                         		// 0x0608 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeTextBounceSpeed;                           		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PercentageSignScale;                              		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelUpOverlaySizeX;                              		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelUpOverlaySizeY;                              		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelUpOverlayOffsetX;                            		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelUpOverlayOffsetY;                            		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelUpAllocationTextScale;                       		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelUpAllocationTextOffsetX;                     		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelUpAllocationTextOffsetY;                     		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LevelUpAllocationTextColor;                       		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                LevelUpAllocationTextGradientColor;               		// 0x0640 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       LevelUpAllocationTextFont;                        		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpgradeButtonBounceSpeed;                         		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ClickedForUpgradeAnimation;                       		// 0x0658 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      StatTextColors[ 0x3 ];                            		// 0x0660 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     HeroDamageResistanceString;                       		// 0x066C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     heroString;                                       		// 0x0678 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EquipmentString;                                  		// 0x0684 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UpgradeString;                                    		// 0x0690 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DamageResistancePercentSign;                      		// 0x069C (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	int                                                LevelUpPoints;                                    		// 0x06A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDunDefHero*                                 MyHero;                                           		// 0x06AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastLevelUpClickedTime;                           		// 0x06B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70287 ];

		return pClassPointer;
	};

	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	void AllocatePointsToStats ( );
	void ResetLevelUpAllocation ( );
	struct FColor GetStatTextDrawColor ( int equipmentEnhancementType );
	void GetToolTipTextBlocks ( TArray< struct FTextEx >* TextBlocks );
	struct FString GetToolTipString ( );
	float GetScaleMultiplier ( );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	class UUI_HeroInfoNew* GetHeroScene ( );
	class UDunDefHero* GetHero ( );
};

UClass* UUIScriptWidget_HeroStat::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_EquipmentIconButton
// 0x01CC (0x07E4 - 0x0618)
class UUIScriptWidget_EquipmentIconButton : public UUIButton_DataListEntry
{
public:
	class USurface*                                    TextBoxBackground;                                		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawIconBackground : 1;                          		// 0x061C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawTextName : 1;                                		// 0x061C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceDisabled : 1;                               		// 0x061C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bClearValueOnLostFocus : 1;                       		// 0x061C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseEquipmentDataContainer : 1;                   		// 0x061C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEditorPreviewFullEquipmentSet : 1;               		// 0x061C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShowEquipmentWorth : 1;                          		// 0x061C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseAltEquipment : 1;                             		// 0x061C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bFindAnyAltEquipment : 1;                         		// 0x061C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowDragging : 1;                               		// 0x061C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bIsInTrade : 1;                                   		// 0x061C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIsDragging : 1;                                  		// 0x061C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDrawingDraggable : 1;                            		// 0x061C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bHasControl : 1;                                  		// 0x061C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bIsQualityOutlineEnabled : 1;                     		// 0x061C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bPreviewOutlineInEditor : 1;                      		// 0x061C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	float                                              widgetBaseScaleX;                                 		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleY;                                 		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextCenterOffsetX;                                		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextCenterOffsetY;                                		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextBoxSizeX;                                     		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextBoxSizeY;                                     		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TextBoxBGColor;                                   		// 0x0638 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconCenterOffsetX;                                		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconCenterOffsetY;                                		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSizeX;                                        		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSizeY;                                        		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    EditorPreviewEquipmentIcon;                       		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EditorPreviewEquipmentName;                       		// 0x065C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      MyEquipmentType;                                  		// 0x0668 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EquipmentWorthTextColor;                          		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentWorthTextScale;                          		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentWorthTextOffsetX;                        		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipmentWorthTextOffsetY;                        		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                EquipmentWorthTextGradientColor;                  		// 0x067C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DenialTextLevelGradientColor;                     		// 0x068C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DenialTextClassGradientColor;                     		// 0x069C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DenialLevelSelectedTextColor;                     		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DenialLevelTextColor;                             		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DenialClassSelectedTextColor;                     		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DenialClassTextColor;                             		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPrefab*                                   ToolTipOverlayPrefab;                             		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    FullEquipmentSetOverlay;                          		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    LockedOverlay;                                    		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    TradeOverlay;                                     		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    ActiveFolderOverlay;                              		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockedOverlaySizeX;                               		// 0x06D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockedOverlaySizeY;                               		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockedOverlayOffsetX;                             		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockedOverlayOffsetY;                             		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TradeOverlaySizeX;                                		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TradeOverlaySizeY;                                		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TradeOverlayOffsetX;                              		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TradeOverlayOffsetY;                              		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              textBoxPaddingX;                                  		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              textBoxPaddingY;                                  		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullEquipmentSetOverlaySizeX;                     		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullEquipmentSetOverlaySizeY;                     		// 0x06FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullEquipmentSetOverlayOffsetX;                   		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullEquipmentSetOverlayOffsetY;                   		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ComparisonToolTipFocusTime;                       		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ToolTipScale;                                     		// 0x070C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ToolTipTranslationOffset;                         		// 0x0718 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ComparisonToolTipTranslationOffset;               		// 0x0724 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USurface* >                          QCIcons;                                          		// 0x0730 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              QCIconOffsetX;                                    		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              QCIconOffsetY;                                    		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              QCIconSize;                                       		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    DefaultFolderTexture;                             		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   NavigateToFolderSound;                            		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefHero*                                 MyHero;                                           		// 0x0750 (0x0004) [0x0000000000000000]              
	class UUIDataContainer_Equipment*                  MyDataContainer;                                  		// 0x0754 (0x0004) [0x0000000000000000]              
	float                                              LastFocusedTime;                                  		// 0x0758 (0x0004) [0x0000000000000000]              
	int                                                itemsInFolder;                                    		// 0x075C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   QualityOutline;                                   		// 0x0760 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                QualityLinearColor;                               		// 0x0764 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              QualityOutlineSizeX;                              		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              QualityOutlineSizeY;                              		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              QualityOutlineOffsetX;                            		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              QualityOutlineOffsetY;                            		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                MythicalOutlineLinearColor;                       		// 0x0784 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                TranscendentOutlineLinearColor;                   		// 0x0794 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                SupremeOutlineLinearColor;                        		// 0x07A4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                UltimateOutlineLinearColor;                       		// 0x07B4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                UltimatePlusOutlineLinearColor;                   		// 0x07C4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                UltimatePlusPlusOutlineLinearColor;               		// 0x07D4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70292 ];

		return pClassPointer;
	};

	void InitializeFromDataListEntry ( class UUIPanel_DataList* DataList, class UDataListEntryInterface* _dataListEntryInterface );
	bool IsClickable ( );
	void LostFocus ( );
	void GainedFocus ( );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	class UHeroEquipment* GetEquipment ( );
	class UDunDefHero* GetHero ( );
	class UUIDataContainer_Equipment* GetDataContainer ( );
	void DraggedOnto ( class UUIScreenObject* InDraggedOn );
	bool SupportsDraggedOntoItem ( class UUIScriptWidget_Button* DraggedOntoItem );
	void DragItemEnd ( class UUIScreenObject* Sender, int PlayerIndex );
	void DragItemBegin ( class UUIScreenObject* Sender, int PlayerIndex );
	void DoubleClickOccured ( class UUIScreenObject* Sender, int PlayerIndex );
	void eventInitialized ( );
};

UClass* UUIScriptWidget_EquipmentIconButton::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_HeroInfoExpBar
// 0x007C (0x0548 - 0x04CC)
class UUIScriptWidget_HeroInfoExpBar : public UUIScriptWidget
{
public:
	float                                              TextCenterOffsetX;                                		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextCenterOffsetY;                                		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BackgroundColor;                                  		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   BarMIC;                                           		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextScale;                                        		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextBouncyScale;                                  		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextBouncyScaleSpeed;                             		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      TextColor;                                        		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LevelUpTextColor;                                 		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       TextFont;                                         		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TextGradientColor;                                		// 0x04F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                LevelUpTextGradientColor;                         		// 0x0504 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PercentParamName;                                 		// 0x0514 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PreValuesString;                                  		// 0x051C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PostValuesString;                                 		// 0x0528 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      isEditorRender : 1;                               		// 0x0534 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsLevelUp : 1;                                    		// 0x0534 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     LevelUpDisplayString;                             		// 0x0538 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UDunDefHero*                                 MyHero;                                           		// 0x0544 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70305 ];

		return pClassPointer;
	};

	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void eventRenderEditor ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	class ADunDefPlayer* GetPlayer ( );
	class UDunDefHero* GetHero ( );
};

UClass* UUIScriptWidget_HeroInfoExpBar::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_Combobox
// 0x00C4 (0x0688 - 0x05C4)
class UUIScriptWidget_Combobox : public UUIScriptWidget_Button
{
public:
	struct FBoxOverlay                                 OverlayBorder;                                    		// 0x05C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FComboboxFlags                              BehaviorSettings;                                 		// 0x05D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Title;                                            		// 0x05DC (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      TextFocusColor;                                   		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   TitlePadding;                                     		// 0x05EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    TitleBackground;                                  		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    TitleBackgroundFocused;                           		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    TitleBackgroundExpanded;                          		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           Elements;                                         		// 0x0600 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USurface*                                    ElementBackground;                                		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    ElementBackgroundFocused;                         		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementHeight;                                    		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       ElementsFont;                                     		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    BottomBorderBackground;                           		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    BottomBorderBackgroundFocused;                    		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEditorForceExpand : 1;                           		// 0x0624 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawCustomTextBox : 1;                           		// 0x0624 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bExpanded : 1;                                    		// 0x0624 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDrawLeftArrow : 1;                               		// 0x0624 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bDrawRightArrow : 1;                              		// 0x0624 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	class USurface*                                    ToggleBtnIcon;                                    		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    ToggleBtnIconFocused;                             		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToggleBtnRotation;                                		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToggleBtnRotationDefault;                         		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToggleIconReferenceSize;                          		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    EndCapIcon;                                       		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   EndCapOffset;                                     		// 0x0640 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   EndCapSize;                                       		// 0x0648 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElementsFontScale;                                		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    LeftArrowIcon;                                    		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    RightArrowIcon;                                   		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentFocusSelection;                            		// 0x065C (0x0004) [0x0000000000000000]              
	int                                                LastSelection;                                    		// 0x0660 (0x0004) [0x0000000000000000]              
	float                                              OriginalWidgetHeight;                             		// 0x0664 (0x0004) [0x0000000000000000]              
	float                                              ExpandedStartTime;                                		// 0x0668 (0x0004) [0x0000000000000000]              
	int                                                ClickCount;                                       		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __NotifySelectionChanged__Delegate;               		// 0x0670 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyTitleClicked__Delegate;                   		// 0x067C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70475 ];

		return pClassPointer;
	};

	void Pressed ( class UUIScreenObject* Sender, int PlayerIndex );
	void SceneReleasedClick ( );
	void ToggleOptionList ( );
	void CollapseOptionList ( );
	void ExpandOptionList ( );
	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	void LostFocus ( );
	void ComboBoxElementSelected ( int Idx, unsigned long notifySelection );
	void ClearSelection ( struct FString newTitle, unsigned long notifySelection );
	bool IsToggleBtnFocused ( );
	bool IsTitleFocused ( );
	int GetFocusedElement ( );
	int GetFocusedSelection ( );
	void DeIncrementSelection ( );
	void IncrementSelection ( );
	void SetFocusedElement ( int aFocusSeletion );
	class USurface* GetComboElementBackgroundImage ( int Idx, unsigned long bFocused );
	class USurface* GetTitleBackgroundImage ( unsigned long bFocused );
	class USurface* GetToggleIconImage ( unsigned long bFocused );
	class USurface* GetToggleBackgroundImage ( unsigned long bFocused );
	int GetElementsCount ( );
	float GetComboBoxElementSize ( );
	bool GetWidgetCursorPosition ( float X1, float Y1, float X2, float Y2, float* outCursorX, float* outCursorY );
	void UpdateFocusSelection ( float X1, float Y1, float X2, float Y2, float TitleRatio );
	void DrawBox ( class UCanvas* C, float Width, float Height, float StrawWidth );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void eventOnInitialSceneUpdateDelegate ( );
	void OnNotifyResolutionChanged ( struct FVector2D* OldViewportsize, struct FVector2D* NewViewportSize );
	int FindComboElement ( struct FString Option );
	void SelectValue ( unsigned long triggerNotifications, struct FString* val );
	void SetSelectedComboElement ( int Idx, unsigned long triggerNotifications );
	void SetComboElements ( TArray< struct FString > newComboElements, unsigned long triggerNotifications );
	struct FString GetElementString ( int Idx );
	struct FString GetSelectedString ( );
	int GetSelectedElementIdx ( );
	void NotifyTitleClicked ( int selectedElementIdx );
	void NotifySelectionChanged ( int selectedElementIdx );
};

UClass* UUIScriptWidget_Combobox::pClassPointer = NULL;

// Class UDKGame.UIDataContainer_Equipment_DataList
// 0x0000 (0x0488 - 0x0488)
class UUIDataContainer_Equipment_DataList : public UUIDataContainer_Equipment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70552 ];

		return pClassPointer;
	};

	class UDunDefHero* GetHero ( );
	class UHeroEquipment* GetHeroCurrentEquipmentOfType ( class UUIScriptWidget_EquipmentIconButton* equipmentButton );
	class UHeroEquipment* GetEquipment ( class UUIScriptWidget_EquipmentIconButton* equipmentButton );
	void InitDataContainer_Equipment_DataList ( class UDunDefHero* hero );
};

UClass* UUIDataContainer_Equipment_DataList::pClassPointer = NULL;

// Class UDKGame.UI_Leaderboard
// 0x00A0 (0x06DC - 0x063C)
class UUI_Leaderboard : public UDunDefUIScene
{
public:
	class UUIList*                                     LeaderboardList;                                  		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    leaderboardTitle;                                 		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    ViewMode;                                         		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    retrieveLabel;                                    		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          nextMode;                                         		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton_Scripted*                          PrevMode;                                         		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ULocalPlayer* >                      localPlayers;                                     		// 0x0654 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LocalPlayerIndex;                                 		// 0x0660 (0x0004) [0x0000000000000000]              
	struct FStatHeroInfo                               myHeroInfo;                                       		// 0x0664 (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TopRankingsView;                                  		// 0x06B4 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InfiniteWaveString;                               		// 0x06C0 (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RetrieveString;                                   		// 0x06CC (0x000C) [0x0000000000408000]              ( CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      IsRetrieving : 1;                                 		// 0x06D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ScrolledUp : 1;                                   		// 0x06D8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70762 ];

		return pClassPointer;
	};

	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	void ToggleMode ( int Dir );
	void SetFilterString ( class APlayerController* Player );
	void SetTitle ( );
	int GetPlayModeFromString ( struct FString LeaderboardName );
	int GetDifficultyFromString ( struct FString LeaderboardName );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void eventSceneActivated ( unsigned long bInitialActivation );
	void ScrollFailed ( int Direction );
	void OnReadComplete ( unsigned long bWasSuccessful );
	int FindMyRecord ( );
	void SetRetrieving ( unsigned long retrieving );
	void eventPostInitialize ( );
	void eventInitialized ( );
};

UClass* UUI_Leaderboard::pClassPointer = NULL;

// Class UDKGame.UI_TitleScreen
// 0x0040 (0x067C - 0x063C)
class UUI_TitleScreen : public UDunDefUIScene
{
public:
	class USoundCue*                                   ProceedCue;                                       		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefUIScene*                              MainMenuScene;                                    		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SaveNotificationDelay;                            		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimatedLogoTag;                                  		// 0x0648 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              StarterTimer;                                     		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RequirePassword : 1;                              		// 0x0654 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      PasswordSuccess : 1;                              		// 0x0654 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FString                                     SpecialPassword;                                  		// 0x0658 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PasswordDescription;                              		// 0x0664 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TitleDescription;                                 		// 0x0670 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70864 ];

		return pClassPointer;
	};

	float PlayDunDefUIAnim ( struct FName DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn, unsigned long forceNoSound, float playSpeed );
	void eventUpdate ( float DeltaTime );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool ShowPasswordKeyboard ( );
	void PasswordInputDone ( unsigned long Success );
	void eventPostInitialize ( );
	void eventInitialized ( );
};

UClass* UUI_TitleScreen::pClassPointer = NULL;

// Class UDKGame.UI_PasswordPrompt
// 0x0034 (0x0670 - 0x063C)
class UUI_PasswordPrompt : public UDunDefUIScene
{
public:
	class UUIEditBox*                                  passwordBox;                                      		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      CancelButton;                                     		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      okButton;                                         		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    TitleLabel;                                       		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MSG_PasswordTitle;                                		// 0x064C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_PasswordDescription;                          		// 0x0658 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      isGameName : 1;                                   		// 0x0664 (0x0004) [0x0000000000000000] [0x00000001] 
	class UUI_MultiplayerMenu*                         multiplayerMenu;                                  		// 0x0668 (0x0004) [0x0000000000000000]              
	class UUI_NetworkMultiplayer*                      ServerList;                                       		// 0x066C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70970 ];

		return pClassPointer;
	};

	bool eventIsGamepadOwned ( );
	void eventSceneDeactivated ( );
	bool eventIsKeyboardOwned ( );
	void Update ( float DeltaTime );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void InitForGameName ( );
	void eventInitialized ( );
};

UClass* UUI_PasswordPrompt::pClassPointer = NULL;

// Class UDKGame.UI_SessionBrowser_EntryPanel
// 0x0010 (0x0490 - 0x0480)
class UUI_SessionBrowser_EntryPanel : public UUIPanel
{
public:
	class UUIButton_SessionBrowser_Entry*              BrowserButton;                                    		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FOnlineGameSearchResult                     SessionResult;                                    		// 0x0484 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71146 ];

		return pClassPointer;
	};

	void eventCreated ( );
	void eventNotifyButtonClicked ( class UUIObject* Widget );
};

UClass* UUI_SessionBrowser_EntryPanel::pClassPointer = NULL;

// Class UDKGame.UI_SearchFilters
// 0x00F4 (0x0730 - 0x063C)
class UUI_SearchFilters : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           CampaignMapDataList;                              		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel_DataList*                           ChallengeMapDataList;                             		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        CampaignsCheckbox;                                		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        ChallengesCheckbox;                               		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        EasyCheckbox;                                     		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        MediumCheckbox;                                   		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        HardCheckbox;                                     		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        InsaneCheckbox;                                   		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        NightmareCheckbox;                                		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                BuildOn;                                          		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                BuildOff;                                         		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                BuildAny;                                         		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                SurvivalOn;                                       		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                SurvivalOff;                                      		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                SurvivalAny;                                      		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                StrategyOn;                                       		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                StrategyOff;                                      		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_ToggleButton*                StrategyAny;                                      		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ButtonCycleBuild;                                 		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ButtonCycleSurvival;                              		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIButton*                                   ButtonCycleStrategy;                              		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUICheckBox_Scripted*                        filterHostLevel;                                  		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    HostLevelContainer;                               		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUINumericOptionList*                        FilterHostLevelStartList;                         		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUINumericOptionList*                        FilterHostLevelEndList;                           		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUILabel*                                    HeroClassLabel;                                   		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      HeroClassPrev;                                    		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      HeroClassNext;                                    		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    OptionsPanel1;                                    		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIPanel*                                    OptionsPanel2;                                    		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      MoreOptionsButton;                                		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MSG_OneDifficultyRequiredTitle;                   		// 0x06B8 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_OneDifficultyRequiredDescription;             		// 0x06C4 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AnyString;                                        		// 0x06D0 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	class UUIScriptWidget_Button*                      AcceptButton;                                     		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIScriptWidget_Button*                      CancelButton;                                     		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUI_NetworkMultiplayer*                      MultiplayerUI;                                    		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      readyForFilterInit : 1;                           		// 0x06E8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      switchOptions : 1;                                		// 0x06E8 (0x0004) [0x0000000000000000] [0x00000002] 
	class UUIImage*                                    survivalContainer;                                		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    buildContainer;                                   		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIImage*                                    strategyContainer;                                		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      savedSurvivalValue;                               		// 0x06F8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      savedBuildValue;                                  		// 0x06F9 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      savedStrategyValue;                               		// 0x06FA (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct UDunDefHeroManagerNative_FSearchFilterSettings originalSettings;                                 		// 0x06FC (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct UUI_SearchFilters_FHeroClassInfo >  heroClasses;                                      		// 0x0720 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                selectedHeroClassIndex;                           		// 0x072C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71241 ];

		return pClassPointer;
	};

	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool eventIsGamepadOwned ( );
	bool eventIsKeyboardOwned ( );
	void RestoreRadialValues ( );
	void SaveRadialValues ( );
	void Update ( float DeltaTime );
	bool HasCampaignMissionsSelected ( );
	void CheckDifficultyChange ( class UUICheckBox_Scripted* Widget );
	void SwitchOptionsPanel ( );
	bool eventNotifyWidgetClicked ( class UUIObject* Widget );
	void SearchFiltersSelectionChanged ( class UUIObject* Widget, unsigned long bFromMouseClick );
	void ChangeAllDataListSelectionEntries ( class UUICheckBox_Scripted* ParentBox, class UUIPanel_DataList* DataList, unsigned long bSelect, unsigned long bOnlyAffectTop );
	void UncheckAll ( class UUIObject* theException );
	void ApplyFilterSettings ( unsigned long doSave );
	void LoadFilterSettings ( );
	void AfterDataListUpdate ( class UUIPanel_DataList* aDataList );
	void BeforeDataListUpdate ( class UUIPanel_DataList* aDataList );
	void PostInitialSceneUpdate ( );
	void RefreshedChallengeList ( );
	void BeforeRefreshedChallengeList ( );
	void RefreshedCampaignList ( );
	void BeforeRefreshedCampaignList ( );
};

UClass* UUI_SearchFilters::pClassPointer = NULL;

// Class UDKGame.UICheckBox_Scripted
// 0x0000 (0x04E0 - 0x04E0)
class UUICheckBox_Scripted : public UUICheckbox
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71404 ];

		return pClassPointer;
	};

	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
};

UClass* UUICheckBox_Scripted::pClassPointer = NULL;

// Class UDKGame.UILabel_KeyBinding
// 0x0034 (0x0500 - 0x04CC)
class UUILabel_KeyBinding : public UUILabel
{
public:
	struct FString                                     DisplayBindingDescriptionForBindingName;          		// 0x04CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       DisplayBindingDescriptionForKeyName;              		// 0x04D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DisplayKeyDescriptionForBindingName;              		// 0x04E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       DisplayKeyDescriptionForKeyName;                  		// 0x04EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     forActiveHeroArchetypePath;                       		// 0x04F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71542 ];

		return pClassPointer;
	};

	void DoInit ( );
};

UClass* UUILabel_KeyBinding::pClassPointer = NULL;

// Class UDKGame.UIButton_SessionBrowser_Entry
// 0x0000 (0x0508 - 0x0508)
class UUIButton_SessionBrowser_Entry : public UUIToggleButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72376 ];

		return pClassPointer;
	};

	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
};

UClass* UUIButton_SessionBrowser_Entry::pClassPointer = NULL;

// Class UDKGame.UIDataContainer_EquipmentOverlay
// 0x0000 (0x0488 - 0x0488)
class UUIDataContainer_EquipmentOverlay : public UUIDataContainer_Equipment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73207 ];

		return pClassPointer;
	};

};

UClass* UUIDataContainer_EquipmentOverlay::pClassPointer = NULL;

// Class UDKGame.UIScript_ActionWheelHotkey
// 0x0040 (0x050C - 0x04CC)
class UUIScript_ActionWheelHotkey : public UUIScriptWidget
{
public:
	int                                                hotKeyIndex;                                      		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  emptyTexture;                                     		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawHotkeyNumber : 1;                            		// 0x04D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetString : 1;                                   		// 0x04D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FVector                                     HotKeyNumberOffset;                               		// 0x04D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       HotKeyNumberFont;                                 		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      HotKeyNumberColor;                                		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HotKeyNumberScale;                                		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                HotKeyNumberBottomColor;                          		// 0x04F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     numberString;                                     		// 0x0500 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73887 ];

		return pClassPointer;
	};

	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void eventRenderEditor ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
};

UClass* UUIScript_ActionWheelHotkey::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_ButtonMultiImage
// 0x001C (0x0634 - 0x0618)
class UUIScriptWidget_ButtonMultiImage : public UUIButton_DataListEntry
{
public:
	float                                              widgetBaseScaleX;                                 		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleY;                                 		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MultiImageIndexToSetFromDataObject;               		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetDisplayStringFromDataObject : 1;              		// 0x0624 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetBackgroundImageFromDataObject : 1;            		// 0x0624 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< struct FMultiImageEntry >                  MultiImageEntries;                                		// 0x0628 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73915 ];

		return pClassPointer;
	};

	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void InitializeFromDataListEntry ( class UUIPanel_DataList* DataList, class UDataListEntryInterface* Entry );
};

UClass* UUIScriptWidget_ButtonMultiImage::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_HealthManaIcon
// 0x0070 (0x053C - 0x04CC)
class UUIScriptWidget_HealthManaIcon : public UUIScriptWidget
{
public:
	float                                              widgetBaseScaleX;                                 		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleY;                                 		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextMinCenterOffsetX;                             		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextMinCenterOffsetY;                             		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextMaxCenterOffsetX;                             		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextMaxCenterOffsetY;                             		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconCenterOffsetX;                                		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconCenterOffsetY;                                		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSizeX;                                        		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconSizeY;                                        		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BackgroundColor;                                  		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    IconTex;                                          		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    BackgroundTex;                                    		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextScale;                                        		// 0x0500 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      TextMinDrawColor;                                 		// 0x0504 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      TextMaxDrawColor;                                 		// 0x0508 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFont*                                       TextFont;                                         		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TextMinGradientColor;                             		// 0x0510 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TextMaxGradientColor;                             		// 0x0520 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextShadowScaleMultiplier;                        		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsHealthIndicator : 1;                            		// 0x0534 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      isEditorRender : 1;                               		// 0x0534 (0x0004) [0x0000000000000000] [0x00000002] 
	class UDunDefHero*                                 MyHero;                                           		// 0x0538 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74511 ];

		return pClassPointer;
	};

	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void eventRenderEditor ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	class ADunDefPlayer* GetPlayer ( );
	class UDunDefHero* GetHero ( );
};

UClass* UUIScriptWidget_HealthManaIcon::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_HeroIcon
// 0x000C (0x04D8 - 0x04CC)
class UUIScriptWidget_HeroIcon : public UUIScriptWidget
{
public:
	struct FColor                                      iconColor;                                        		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDunDefHero*                                 MyHero;                                           		// 0x04D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      isEditorRender : 1;                               		// 0x04D4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74561 ];

		return pClassPointer;
	};

	struct FColor GetIconColor ( );
	class USurface* GetIcon ( );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	void eventRenderEditor ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	class UDunDefHero* GetHero ( );
};

UClass* UUIScriptWidget_HeroIcon::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_HeroSelectionButton
// 0x008C (0x06A4 - 0x0618)
class UUIScriptWidget_HeroSelectionButton : public UUIButton_DataListEntry
{
public:
	float                                              TextYPadding;                                     		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BottomTextYPadding;                               		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroNameTextScale;                                		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroLevelTextScale;                               		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthAndManaTextScale;                           		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LevelString;                                      		// 0x062C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HealthString;                                     		// 0x0638 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     manaString;                                       		// 0x0644 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaxManaString;                                    		// 0x0650 (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaxHealthString;                                  		// 0x065C (0x000C) [0x0000000000408001]              ( CPF_Edit | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      healthColor;                                      		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ManaColor;                                        		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroIconWidth;                                    		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroIconHeight;                                   		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthManaShadowScale;                            		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelShadowScale;                                 		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NameShadowScale;                                  		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleX;                                 		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              widgetBaseScaleY;                                 		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LevelStringYOffset;                               		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MuteIcon;                                         		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysDrawMuteIcon : 1;                          		// 0x0694 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDontFlush : 1;                                   		// 0x0694 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              MuteIconSize;                                     		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuteIconOffsetX;                                  		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuteIconOffsetY;                                  		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74626 ];

		return pClassPointer;
	};

	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	class UDunDefHero* GetHero ( );
};

UClass* UUIScriptWidget_HeroSelectionButton::pClassPointer = NULL;

// Class UDKGame.UIScriptWidget_HeroPlayerListButton
// 0x0034 (0x06D8 - 0x06A4)
class UUIScriptWidget_HeroPlayerListButton : public UUIScriptWidget_HeroSelectionButton
{
public:
	struct FColor                                      PlayerNameTextColor;                              		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                PlayerNameTextGradientColor;                      		// 0x06A8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerNameTextYPadding;                           		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerNameTextScale;                              		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerNameTextShadowScale;                        		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinPlayerNameScaler;                              		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EditorDisplayString;                              		// 0x06C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bClearValueOnLostFocus : 1;                       		// 0x06D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74679 ];

		return pClassPointer;
	};

	void LostFocus ( );
	void eventRenderGame ( class UCanvas* C, float X1, float X2, float Y1, float Y2 );
	class UDunDefHero* GetHero ( );
};

UClass* UUIScriptWidget_HeroPlayerListButton::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif